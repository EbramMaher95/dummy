
pet-food-dispenser2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  00006098  2**0
                  CONTENTS
  4 .ARM          00000000  08004d40  08004d40  00006098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d40  08004d40  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d40  08004d40  00005d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d44  08004d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08004d48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000098  08004de0  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004de0  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7bf  00000000  00000000  000060c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002130  00000000  00000000  00012880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000149b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a92  00000000  00000000  00015750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f5  00000000  00000000  000161e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011255  00000000  00000000  0002e8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac98  00000000  00000000  0003fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca7c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  000ca808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000ce5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c90 	.word	0x08004c90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004c90 	.word	0x08004c90

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a2      	sub	sp, #136	@ 0x88
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f001 f803 	bl	800115c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f94f 	bl	80003f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 fa45 	bl	80005e8 <MX_GPIO_Init>
	MX_TIM1_Init();
 800015e:	f000 f9bf 	bl	80004e0 <MX_TIM1_Init>
	MX_I2C2_Init();
 8000162:	f000 f98f 	bl	8000484 <MX_I2C2_Init>
	//initialize device drivers
	//first we initialize the lcd to display the updates
	//the LCD will be connected to: --> can be found in line 32 in the main.c file
	//A0,1,2,3 --> Data pins
	//A4:RS, A5:EN
	Alcd_Init(&lcd, 2, 16);
 8000166:	2210      	movs	r2, #16
 8000168:	2102      	movs	r1, #2
 800016a:	4896      	ldr	r0, [pc, #600]	@ (80003c4 <main+0x278>)
 800016c:	f000 fdc0 	bl	8000cf0 <Alcd_Init>

	//clear display
	Alcd_Clear(&lcd);
 8000170:	4894      	ldr	r0, [pc, #592]	@ (80003c4 <main+0x278>)
 8000172:	f000 fe91 	bl	8000e98 <Alcd_Clear>

	Keypad_Init(&kp);
 8000176:	4894      	ldr	r0, [pc, #592]	@ (80003c8 <main+0x27c>)
 8000178:	f000 ff74 	bl	8001064 <Keypad_Init>

	//initialize the RTC
	Ds1307_init(&CLK, &hi2c2);
 800017c:	4993      	ldr	r1, [pc, #588]	@ (80003cc <main+0x280>)
 800017e:	4894      	ldr	r0, [pc, #592]	@ (80003d0 <main+0x284>)
 8000180:	f000 fc89 	bl	8000a96 <Ds1307_init>

	//initialize the eeprom
	eeprom24c32_init(&memory, &hi2c2);
 8000184:	4991      	ldr	r1, [pc, #580]	@ (80003cc <main+0x280>)
 8000186:	4893      	ldr	r0, [pc, #588]	@ (80003d4 <main+0x288>)
 8000188:	f000 fbf0 	bl	800096c <eeprom24c32_init>

	//to initiate the base (counter)
	HAL_TIM_Base_Start(&htim1);
 800018c:	4892      	ldr	r0, [pc, #584]	@ (80003d8 <main+0x28c>)
 800018e:	f003 fc07 	bl	80039a0 <HAL_TIM_Base_Start>

	//enable the OC pin (PWM pin)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000192:	2100      	movs	r1, #0
 8000194:	4890      	ldr	r0, [pc, #576]	@ (80003d8 <main+0x28c>)
 8000196:	f003 fc9d 	bl	8003ad4 <HAL_TIM_PWM_Start>

	//to change the duty cycle -> CCR
	//range is from 999 to 1999 (according to calculations)

	//the servo is set at 0 degree upon starting
	TIM1->CCR1 = 999;
 800019a:	4b90      	ldr	r3, [pc, #576]	@ (80003dc <main+0x290>)
 800019c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001a0:	635a      	str	r2, [r3, #52]	@ 0x34

	//a flag if button is pressed
	uint8_t password_comp_flag, error_code, delay_flag;
	int8_t status;
	password_comp_flag = 0;
 80001a2:	2300      	movs	r3, #0
 80001a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	status = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	error_code = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	uint8_t dose_h, dose_m, dose_s, dose_num;

	//finite state machine section
	uint32_t current_tick;

	uint32_t dosing_tick = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	67bb      	str	r3, [r7, #120]	@ 0x78

	// a string to save the RTC time
	char timeString[50];

	/*password section*/
	char menu_pass[] = "1234";
 80001b8:	4a89      	ldr	r2, [pc, #548]	@ (80003e0 <main+0x294>)
 80001ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80001be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001c2:	6018      	str	r0, [r3, #0]
 80001c4:	3304      	adds	r3, #4
 80001c6:	7019      	strb	r1, [r3, #0]
	char entered_password[5] = ""; // User input buffer (4 digits + null terminator)
 80001c8:	2300      	movs	r3, #0
 80001ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80001cc:	2300      	movs	r3, #0
 80001ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	char time_date_buffer[5];
	uint16_t buffer;
	uint8_t input_index = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

	general_delay = HAL_GetTick() + 250;
 80001d8:	f001 f818 	bl	800120c <HAL_GetTick>
 80001dc:	4603      	mov	r3, r0
 80001de:	33fa      	adds	r3, #250	@ 0xfa
 80001e0:	673b      	str	r3, [r7, #112]	@ 0x70
	 * testing section
	 */

	//to change the duty cycle -> CCR
	//range is from 999 to 1999 (according to calculations)
	TIM1->CCR1 = 1999;
 80001e2:	4b7e      	ldr	r3, [pc, #504]	@ (80003dc <main+0x290>)
 80001e4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80001e8:	635a      	str	r2, [r3, #52]	@ 0x34
	GPIO_InitTypeDef c = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = GPIO_PIN_13,
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001fc:	617b      	str	r3, [r7, #20]
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
 8000202:	2302      	movs	r3, #2
 8000204:	623b      	str	r3, [r7, #32]
			.Speed = GPIO_SPEED_LOW };

	HAL_GPIO_Init(GPIOC, &c);
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	4619      	mov	r1, r3
 800020c:	4875      	ldr	r0, [pc, #468]	@ (80003e4 <main+0x298>)
 800020e:	f001 f90f 	bl	8001430 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	4872      	ldr	r0, [pc, #456]	@ (80003e4 <main+0x298>)
 800021a:	f001 fa8d 	bl	8001738 <HAL_GPIO_WritePin>

	char str[16];
	int16_t message;
	uint8_t value1, value2;
	eeprom24c32_read(&memory, &value1, dosing_time_hours);
 800021e:	4b6d      	ldr	r3, [pc, #436]	@ (80003d4 <main+0x288>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	b29a      	uxth	r2, r3
 8000224:	1cfb      	adds	r3, r7, #3
 8000226:	4619      	mov	r1, r3
 8000228:	486a      	ldr	r0, [pc, #424]	@ (80003d4 <main+0x288>)
 800022a:	f000 fbd5 	bl	80009d8 <eeprom24c32_read>

	eeprom24c32_read(&memory, &value1, dosing_time_minutes);
 800022e:	4b69      	ldr	r3, [pc, #420]	@ (80003d4 <main+0x288>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	b29a      	uxth	r2, r3
 8000234:	1cfb      	adds	r3, r7, #3
 8000236:	4619      	mov	r1, r3
 8000238:	4866      	ldr	r0, [pc, #408]	@ (80003d4 <main+0x288>)
 800023a:	f000 fbcd 	bl	80009d8 <eeprom24c32_read>

	//eeprom24c32_read(&memory, &value1, &memory.i2c_buffer[4]);

	Alcd_Clear(&lcd);
 800023e:	4861      	ldr	r0, [pc, #388]	@ (80003c4 <main+0x278>)
 8000240:	f000 fe2a 	bl	8000e98 <Alcd_Clear>
	// Display ADC value on the LCD
	message = sprintf(str, "mem1 = %d", value1);
 8000244:	78fb      	ldrb	r3, [r7, #3]
 8000246:	461a      	mov	r2, r3
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4967      	ldr	r1, [pc, #412]	@ (80003e8 <main+0x29c>)
 800024c:	4618      	mov	r0, r3
 800024e:	f004 f86f 	bl	8004330 <siprintf>
 8000252:	4603      	mov	r3, r0
 8000254:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	Alcd_PutAt_n(&lcd, 0, 0, str, message);
 8000258:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800025c:	b2db      	uxtb	r3, r3
 800025e:	1d3a      	adds	r2, r7, #4
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	4613      	mov	r3, r2
 8000264:	2200      	movs	r2, #0
 8000266:	2100      	movs	r1, #0
 8000268:	4856      	ldr	r0, [pc, #344]	@ (80003c4 <main+0x278>)
 800026a:	f000 fdfc 	bl	8000e66 <Alcd_PutAt_n>
	message = sprintf(str, "mem2 = %d", value2);
 800026e:	78bb      	ldrb	r3, [r7, #2]
 8000270:	461a      	mov	r2, r3
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	495d      	ldr	r1, [pc, #372]	@ (80003ec <main+0x2a0>)
 8000276:	4618      	mov	r0, r3
 8000278:	f004 f85a 	bl	8004330 <siprintf>
 800027c:	4603      	mov	r3, r0
 800027e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	Alcd_PutAt_n(&lcd, 1, 0, str, message);
 8000282:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000286:	b2db      	uxtb	r3, r3
 8000288:	1d3a      	adds	r2, r7, #4
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4613      	mov	r3, r2
 800028e:	2200      	movs	r2, #0
 8000290:	2101      	movs	r1, #1
 8000292:	484c      	ldr	r0, [pc, #304]	@ (80003c4 <main+0x278>)
 8000294:	f000 fde7 	bl	8000e66 <Alcd_PutAt_n>

	HAL_Delay(2000);
 8000298:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800029c:	f000 ffc0 	bl	8001220 <HAL_Delay>

	value1 = 255;
 80002a0:	23ff      	movs	r3, #255	@ 0xff
 80002a2:	70fb      	strb	r3, [r7, #3]

	value2 = 8;
 80002a4:	2308      	movs	r3, #8
 80002a6:	70bb      	strb	r3, [r7, #2]

	while (value1 == 255) {
 80002a8:	e037      	b.n	800031a <main+0x1ce>

		Keypad_Refresh(&kp);
 80002aa:	4847      	ldr	r0, [pc, #284]	@ (80003c8 <main+0x27c>)
 80002ac:	f000 fea2 	bl	8000ff4 <Keypad_Refresh>
		if (Keypad_Get_Key(&kp, 0)) {
 80002b0:	2100      	movs	r1, #0
 80002b2:	4845      	ldr	r0, [pc, #276]	@ (80003c8 <main+0x27c>)
 80002b4:	f000 ff3a 	bl	800112c <Keypad_Get_Key>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00a      	beq.n	80002d4 <main+0x188>
			value1 = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	70fb      	strb	r3, [r7, #3]
			value2 = 10;
 80002c2:	230a      	movs	r3, #10
 80002c4:	70bb      	strb	r3, [r7, #2]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002cc:	4845      	ldr	r0, [pc, #276]	@ (80003e4 <main+0x298>)
 80002ce:	f001 fa33 	bl	8001738 <HAL_GPIO_WritePin>
 80002d2:	e022      	b.n	800031a <main+0x1ce>
		} else if (Keypad_Get_Key(&kp, 1)) {
 80002d4:	2101      	movs	r1, #1
 80002d6:	483c      	ldr	r0, [pc, #240]	@ (80003c8 <main+0x27c>)
 80002d8:	f000 ff28 	bl	800112c <Keypad_Get_Key>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d00a      	beq.n	80002f8 <main+0x1ac>
			value1 = 5;
 80002e2:	2305      	movs	r3, #5
 80002e4:	70fb      	strb	r3, [r7, #3]
			value2 = 20;
 80002e6:	2314      	movs	r3, #20
 80002e8:	70bb      	strb	r3, [r7, #2]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002f0:	483c      	ldr	r0, [pc, #240]	@ (80003e4 <main+0x298>)
 80002f2:	f001 fa21 	bl	8001738 <HAL_GPIO_WritePin>
 80002f6:	e010      	b.n	800031a <main+0x1ce>
		} else if (Keypad_Get_Key(&kp, 2)) {
 80002f8:	2102      	movs	r1, #2
 80002fa:	4833      	ldr	r0, [pc, #204]	@ (80003c8 <main+0x27c>)
 80002fc:	f000 ff16 	bl	800112c <Keypad_Get_Key>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d009      	beq.n	800031a <main+0x1ce>
			value1 = 15;
 8000306:	230f      	movs	r3, #15
 8000308:	70fb      	strb	r3, [r7, #3]
			value2 = 30;
 800030a:	231e      	movs	r3, #30
 800030c:	70bb      	strb	r3, [r7, #2]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000314:	4833      	ldr	r0, [pc, #204]	@ (80003e4 <main+0x298>)
 8000316:	f001 fa0f 	bl	8001738 <HAL_GPIO_WritePin>
	while (value1 == 255) {
 800031a:	78fb      	ldrb	r3, [r7, #3]
 800031c:	2bff      	cmp	r3, #255	@ 0xff
 800031e:	d0c4      	beq.n	80002aa <main+0x15e>
		}

	}

	Alcd_Clear(&lcd);
 8000320:	4828      	ldr	r0, [pc, #160]	@ (80003c4 <main+0x278>)
 8000322:	f000 fdb9 	bl	8000e98 <Alcd_Clear>
	Alcd_PutAt(&lcd, 0, 0, "exit while");
 8000326:	4832      	ldr	r0, [pc, #200]	@ (80003f0 <main+0x2a4>)
 8000328:	f000 fe0a 	bl	8000f40 <Str_Len>
 800032c:	4603      	mov	r3, r0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	4b2f      	ldr	r3, [pc, #188]	@ (80003f0 <main+0x2a4>)
 8000334:	2200      	movs	r2, #0
 8000336:	2100      	movs	r1, #0
 8000338:	4822      	ldr	r0, [pc, #136]	@ (80003c4 <main+0x278>)
 800033a:	f000 fd94 	bl	8000e66 <Alcd_PutAt_n>

	HAL_Delay(2000);
 800033e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000342:	f000 ff6d 	bl	8001220 <HAL_Delay>

	eeprom24c32_write(&memory, &value1, dosing_time_hours);
 8000346:	4b23      	ldr	r3, [pc, #140]	@ (80003d4 <main+0x288>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	b29a      	uxth	r2, r3
 800034c:	1cfb      	adds	r3, r7, #3
 800034e:	4619      	mov	r1, r3
 8000350:	4820      	ldr	r0, [pc, #128]	@ (80003d4 <main+0x288>)
 8000352:	f000 fb23 	bl	800099c <eeprom24c32_write>
	eeprom24c32_write(&memory, &value2, dosing_time_minutes);
 8000356:	4b1f      	ldr	r3, [pc, #124]	@ (80003d4 <main+0x288>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	b29a      	uxth	r2, r3
 800035c:	1cbb      	adds	r3, r7, #2
 800035e:	4619      	mov	r1, r3
 8000360:	481c      	ldr	r0, [pc, #112]	@ (80003d4 <main+0x288>)
 8000362:	f000 fb1b 	bl	800099c <eeprom24c32_write>

	Alcd_Clear(&lcd);
 8000366:	4817      	ldr	r0, [pc, #92]	@ (80003c4 <main+0x278>)
 8000368:	f000 fd96 	bl	8000e98 <Alcd_Clear>
	// Display ADC value on the LCD
	message = sprintf(str, "value = %d", value1);
 800036c:	78fb      	ldrb	r3, [r7, #3]
 800036e:	461a      	mov	r2, r3
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4920      	ldr	r1, [pc, #128]	@ (80003f4 <main+0x2a8>)
 8000374:	4618      	mov	r0, r3
 8000376:	f003 ffdb 	bl	8004330 <siprintf>
 800037a:	4603      	mov	r3, r0
 800037c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	Alcd_PutAt_n(&lcd, 0, 0, str, message);
 8000380:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000384:	b2db      	uxtb	r3, r3
 8000386:	1d3a      	adds	r2, r7, #4
 8000388:	9300      	str	r3, [sp, #0]
 800038a:	4613      	mov	r3, r2
 800038c:	2200      	movs	r2, #0
 800038e:	2100      	movs	r1, #0
 8000390:	480c      	ldr	r0, [pc, #48]	@ (80003c4 <main+0x278>)
 8000392:	f000 fd68 	bl	8000e66 <Alcd_PutAt_n>
	message = sprintf(str, "mem2 = %d", value2);
 8000396:	78bb      	ldrb	r3, [r7, #2]
 8000398:	461a      	mov	r2, r3
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4913      	ldr	r1, [pc, #76]	@ (80003ec <main+0x2a0>)
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 ffc6 	bl	8004330 <siprintf>
 80003a4:	4603      	mov	r3, r0
 80003a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	Alcd_PutAt_n(&lcd, 1, 0, str, message);
 80003aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	1d3a      	adds	r2, r7, #4
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	4613      	mov	r3, r2
 80003b6:	2200      	movs	r2, #0
 80003b8:	2101      	movs	r1, #1
 80003ba:	4802      	ldr	r0, [pc, #8]	@ (80003c4 <main+0x278>)
 80003bc:	f000 fd53 	bl	8000e66 <Alcd_PutAt_n>
	 */
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <main+0x274>
 80003c4:	2000001c 	.word	0x2000001c
 80003c8:	20000000 	.word	0x20000000
 80003cc:	200000b4 	.word	0x200000b4
 80003d0:	20000150 	.word	0x20000150
 80003d4:	20000168 	.word	0x20000168
 80003d8:	20000108 	.word	0x20000108
 80003dc:	40012c00 	.word	0x40012c00
 80003e0:	08004cd8 	.word	0x08004cd8
 80003e4:	40011000 	.word	0x40011000
 80003e8:	08004ca8 	.word	0x08004ca8
 80003ec:	08004cb4 	.word	0x08004cb4
 80003f0:	08004cc0 	.word	0x08004cc0
 80003f4:	08004ccc 	.word	0x08004ccc

080003f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b090      	sub	sp, #64	@ 0x40
 80003fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2228      	movs	r2, #40	@ 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 ffb2 	bl	8004370 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041a:	2301      	movs	r3, #1
 800041c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000422:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	2301      	movs	r3, #1
 800042a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042c:	2302      	movs	r3, #2
 800042e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000434:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000436:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	4618      	mov	r0, r3
 8000442:	f002 feb1 	bl	80031a8 <HAL_RCC_OscConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0x58>
		Error_Handler();
 800044c:	f000 f906 	bl	800065c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000450:	230f      	movs	r3, #15
 8000452:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000454:	2302      	movs	r3, #2
 8000456:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000460:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f003 f91e 	bl	80036ac <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x82>
		Error_Handler();
 8000476:	f000 f8f1 	bl	800065c <Error_Handler>
	}
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	@ 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <MX_I2C2_Init+0x50>)
 800048a:	4a13      	ldr	r2, [pc, #76]	@ (80004d8 <MX_I2C2_Init+0x54>)
 800048c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800048e:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <MX_I2C2_Init+0x50>)
 8000490:	4a12      	ldr	r2, [pc, #72]	@ (80004dc <MX_I2C2_Init+0x58>)
 8000492:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_I2C2_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_I2C2_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <MX_I2C2_Init+0x50>)
 80004a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004a6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <MX_I2C2_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_I2C2_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b4:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <MX_I2C2_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_I2C2_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80004c0:	4804      	ldr	r0, [pc, #16]	@ (80004d4 <MX_I2C2_Init+0x50>)
 80004c2:	f001 f951 	bl	8001768 <HAL_I2C_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80004cc:	f000 f8c6 	bl	800065c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000b4 	.word	0x200000b4
 80004d8:	40005800 	.word	0x40005800
 80004dc:	000186a0 	.word	0x000186a0

080004e0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b092      	sub	sp, #72	@ 0x48
 80004e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80004f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2220      	movs	r2, #32
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f003 ff30 	bl	8004370 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000510:	4b33      	ldr	r3, [pc, #204]	@ (80005e0 <MX_TIM1_Init+0x100>)
 8000512:	4a34      	ldr	r2, [pc, #208]	@ (80005e4 <MX_TIM1_Init+0x104>)
 8000514:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8000516:	4b32      	ldr	r3, [pc, #200]	@ (80005e0 <MX_TIM1_Init+0x100>)
 8000518:	2247      	movs	r2, #71	@ 0x47
 800051a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051c:	4b30      	ldr	r3, [pc, #192]	@ (80005e0 <MX_TIM1_Init+0x100>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8000522:	4b2f      	ldr	r3, [pc, #188]	@ (80005e0 <MX_TIM1_Init+0x100>)
 8000524:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000528:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <MX_TIM1_Init+0x100>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000530:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <MX_TIM1_Init+0x100>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000536:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <MX_TIM1_Init+0x100>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800053c:	4828      	ldr	r0, [pc, #160]	@ (80005e0 <MX_TIM1_Init+0x100>)
 800053e:	f003 fa79 	bl	8003a34 <HAL_TIM_PWM_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8000548:	f000 f888 	bl	800065c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054c:	2300      	movs	r3, #0
 800054e:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000554:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000558:	4619      	mov	r1, r3
 800055a:	4821      	ldr	r0, [pc, #132]	@ (80005e0 <MX_TIM1_Init+0x100>)
 800055c:	f003 fe38 	bl	80041d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000566:	f000 f879 	bl	800065c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056a:	2360      	movs	r3, #96	@ 0x60
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 1000;
 800056e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000574:	2300      	movs	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	4813      	ldr	r0, [pc, #76]	@ (80005e0 <MX_TIM1_Init+0x100>)
 8000592:	f003 fb41 	bl	8003c18 <HAL_TIM_PWM_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 800059c:	f000 f85e 	bl	800065c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <MX_TIM1_Init+0x100>)
 80005c4:	f003 fe62 	bl	800428c <HAL_TIMEx_ConfigBreakDeadTime>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 80005ce:	f000 f845 	bl	800065c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <MX_TIM1_Init+0x100>)
 80005d4:	f000 f8d8 	bl	8000788 <HAL_TIM_MspPostInit>

}
 80005d8:	bf00      	nop
 80005da:	3748      	adds	r7, #72	@ 0x48
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000108 	.word	0x20000108
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_GPIO_Init+0x70>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a19      	ldr	r2, [pc, #100]	@ (8000658 <MX_GPIO_Init+0x70>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <MX_GPIO_Init+0x70>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_GPIO_Init+0x70>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <MX_GPIO_Init+0x70>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_GPIO_Init+0x70>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_GPIO_Init+0x70>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <MX_GPIO_Init+0x70>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <MX_GPIO_Init+0x70>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <MX_GPIO_Init+0x70>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <MX_GPIO_Init+0x70>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <MX_GPIO_Init+0x70>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0310 	and.w	r3, r3, #16
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40021000 	.word	0x40021000

0800065c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <Error_Handler+0x8>

08000668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <HAL_MspInit+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <HAL_MspInit+0x5c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <HAL_MspInit+0x60>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <HAL_MspInit+0x60>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <HAL_I2C_MspInit+0x74>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d124      	bne.n	8000736 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <HAL_I2C_MspInit+0x78>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <HAL_I2C_MspInit+0x78>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <HAL_I2C_MspInit+0x78>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000704:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070a:	2312      	movs	r3, #18
 800070c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	@ (8000748 <HAL_I2C_MspInit+0x7c>)
 800071a:	f000 fe89 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_I2C_MspInit+0x78>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_I2C_MspInit+0x78>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_I2C_MspInit+0x78>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40005800 	.word	0x40005800
 8000744:	40021000 	.word	0x40021000
 8000748:	40010c00 	.word	0x40010c00

0800074c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <HAL_TIM_PWM_MspInit+0x34>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10b      	bne.n	8000776 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_TIM_PWM_MspInit+0x38>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_TIM_PWM_MspInit+0x38>)
 8000764:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_TIM_PWM_MspInit+0x38>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40012c00 	.word	0x40012c00
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a10      	ldr	r2, [pc, #64]	@ (80007e4 <HAL_TIM_MspPostInit+0x5c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d118      	bne.n	80007da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_TIM_MspPostInit+0x60>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <HAL_TIM_MspPostInit+0x64>)
 80007d6:	f000 fe2b 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40012c00 	.word	0x40012c00
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010800 	.word	0x40010800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <NMI_Handler+0x4>

080007f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <MemManage_Handler+0x4>

08000808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <UsageFault_Handler+0x4>

08000818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 fcd2 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000850:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <_sbrk+0x5c>)
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <_sbrk+0x60>)
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d102      	bne.n	800086a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <_sbrk+0x64>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <_sbrk+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	429a      	cmp	r2, r3
 8000876:	d207      	bcs.n	8000888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000878:	f003 fd82 	bl	8004380 <__errno>
 800087c:	4603      	mov	r3, r0
 800087e:	220c      	movs	r2, #12
 8000880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e009      	b.n	800089c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <_sbrk+0x64>)
 8000898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20005000 	.word	0x20005000
 80008a8:	00000400 	.word	0x00000400
 80008ac:	2000018c 	.word	0x2000018c
 80008b0:	200002e0 	.word	0x200002e0

080008b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c0:	f7ff fff8 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008c6:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008c8:	4a0c      	ldr	r2, [pc, #48]	@ (80008fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008dc:	4c09      	ldr	r4, [pc, #36]	@ (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ea:	f003 fd4f 	bl	800438c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fc2d 	bl	800014c <main>
  bx lr
 80008f2:	4770      	bx	lr
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80008fc:	08004d48 	.word	0x08004d48
  ldr r2, =_sbss
 8000900:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000904:	200002dc 	.word	0x200002dc

08000908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_2_IRQHandler>
	...

0800090c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <DWT_Delay_Init+0x58>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <DWT_Delay_Init+0x58>)
 8000916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800091a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <DWT_Delay_Init+0x58>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <DWT_Delay_Init+0x58>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000926:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <DWT_Delay_Init+0x5c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <DWT_Delay_Init+0x5c>)
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <DWT_Delay_Init+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <DWT_Delay_Init+0x5c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <DWT_Delay_Init+0x5c>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000946:	bf00      	nop
     __ASM volatile ("NOP");
 8000948:	bf00      	nop
  __ASM volatile ("NOP");
 800094a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <DWT_Delay_Init+0x5c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000954:	2300      	movs	r3, #0
 8000956:	e000      	b.n	800095a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000958:	2301      	movs	r3, #1
  }
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000edf0 	.word	0xe000edf0
 8000968:	e0001000 	.word	0xe0001000

0800096c <eeprom24c32_init>:
	return (OK == HAL_OK) ? 1 : 0;
}

//initializing the eeprom
eeprom_state_t eeprom24c32_init(eeprom24c32_t *eeprom,
		I2C_HandleTypeDef *i2c_bus) {
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	73fb      	strb	r3, [r7, #15]
	eeprom->i2c_bus = i2c_bus;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	621a      	str	r2, [r3, #32]

	// Clear buffer and write to EEPROM
	eeprom->i2c_buffer[0] = 0x00;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]

	// Return the appropriate status
	return (status == 1) ? eeprom_OK : eeprom_NOK;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b01      	cmp	r3, #1
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2db      	uxtb	r3, r3

}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <eeprom24c32_write>:
 }
 */

//write to the eeprom function
uint8_t eeprom24c32_write(eeprom24c32_t *eeprom, uint32_t *buffer_data,
		uint16_t mem_ddress) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af04      	add	r7, sp, #16
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80fb      	strh	r3, [r7, #6]
	uint8_t status;

	//for testing
	//eeprom->i2c_buffer[0] = 8;

	status = HAL_I2C_Mem_Write(eeprom->i2c_bus, (eeprom_SLA << 1), mem_ddress,
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6a18      	ldr	r0, [r3, #32]
 80009ae:	88fa      	ldrh	r2, [r7, #6]
 80009b0:	2364      	movs	r3, #100	@ 0x64
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	2301      	movs	r3, #1
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	21a0      	movs	r1, #160	@ 0xa0
 80009c0:	f001 fb80 	bl	80020c4 <HAL_I2C_Mem_Write>
 80009c4:	4603      	mov	r3, r0
 80009c6:	75fb      	strb	r3, [r7, #23]
			2, (uint8_t*)buffer_data, 1, 100);

	//delay according to the datasheet
	HAL_Delay(20);
 80009c8:	2014      	movs	r0, #20
 80009ca:	f000 fc29 	bl	8001220 <HAL_Delay>

	return status;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]

}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <eeprom24c32_read>:

//read data from the eeprom
uint16_t eeprom24c32_read(eeprom24c32_t *eeprom, uint16_t *data,
		uint16_t mem_ddress) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af04      	add	r7, sp, #16
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4613      	mov	r3, r2
 80009e4:	80fb      	strh	r3, [r7, #6]

	uint8_t status;
	uint8_t read_data;

	status = HAL_I2C_Mem_Read(eeprom->i2c_bus, (eeprom_SLA << 1), mem_ddress, 2,
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6a18      	ldr	r0, [r3, #32]
 80009ea:	88fa      	ldrh	r2, [r7, #6]
 80009ec:	2364      	movs	r3, #100	@ 0x64
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2301      	movs	r3, #1
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	f107 0316 	add.w	r3, r7, #22
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2302      	movs	r3, #2
 80009fc:	21a0      	movs	r1, #160	@ 0xa0
 80009fe:	f001 fc5b 	bl	80022b8 <HAL_I2C_Mem_Read>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75fb      	strb	r3, [r7, #23]
			&read_data, 1, 100);

	// Store the read byte into the data variable
	*data = read_data;
 8000a06:	7dbb      	ldrb	r3, [r7, #22]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	return status;
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	b29b      	uxth	r3, r3

}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <I2C__write>:
#define dev_SLA	0b1101000

#define start_address 0b00000000

static uint8_t I2C__write(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b088      	sub	sp, #32
 8000a1e:	af02      	add	r7, sp, #8
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4603      	mov	r3, r0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	73bb      	strb	r3, [r7, #14]

	//master send data to the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Transmit(clock->i2c_bus,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6958      	ldr	r0, [r3, #20]
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	2264      	movs	r2, #100	@ 0x64
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	21d0      	movs	r1, #208	@ 0xd0
 8000a3c:	f000 ffd8 	bl	80019f0 <HAL_I2C_Master_Transmit>
 8000a40:	4603      	mov	r3, r0
 8000a42:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf0c      	ite	eq
 8000a4a:	2301      	moveq	r3, #1
 8000a4c:	2300      	movne	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <I2C__read>:

static uint8_t I2C__read(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	4613      	mov	r3, r2
 8000a68:	73bb      	strb	r3, [r7, #14]

	//master receive data from the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Receive(clock->i2c_bus,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6958      	ldr	r0, [r3, #20]
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2264      	movs	r2, #100	@ 0x64
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	21d0      	movs	r1, #208	@ 0xd0
 8000a7a:	f001 f8b7 	bl	8001bec <HAL_I2C_Master_Receive>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Ds1307_init>:

	return (div << 4 | rem);
}

//initializing the RTC
DS1307_state_t Ds1307_init(ds1307_t *clock, I2C_HandleTypeDef *i2c_bus) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]

	clock->i2c_bus = i2c_bus;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	615a      	str	r2, [r3, #20]

	clock->i2c_buffer[0] = 0x00;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	status &= I2C__write(dev_SLA, clock->i2c_buffer, 1, clock);
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2068      	movs	r0, #104	@ 0x68
 8000ab8:	f7ff ffaf 	bl	8000a1a <I2C__write>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	73fb      	strb	r3, [r7, #15]

	status &= I2C__read(dev_SLA, clock->i2c_buffer, 1, clock);
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	2068      	movs	r0, #104	@ 0x68
 8000ace:	f7ff ffc3 	bl	8000a58 <I2C__read>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	73fb      	strb	r3, [r7, #15]

	if (((clock->i2c_buffer[0]) & (1 << 7)) == 0) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	da10      	bge.n	8000b08 <Ds1307_init+0x72>

	} else {

		clock->i2c_buffer[0] = 0x00; 	//reg base address
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]

		clock->i2c_buffer[1] = 0; 		//clock hold bit
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	705a      	strb	r2, [r3, #1]

		status &= I2C__write(dev_SLA, clock->i2c_buffer, 2, clock);
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2202      	movs	r2, #2
 8000af8:	2068      	movs	r0, #104	@ 0x68
 8000afa:	f7ff ff8e 	bl	8000a1a <I2C__write>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4013      	ands	r3, r2
 8000b06:	73fb      	strb	r3, [r7, #15]
	}

	if (status == 1) {
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d101      	bne.n	8000b12 <Ds1307_init+0x7c>

		return DS1307_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <Ds1307_init+0x7e>
	} else {
		return DS1307_NOK;
 8000b12:	2301      	movs	r3, #1
	}

}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000b24:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <DWT_Delay_us+0x40>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000b2a:	f002 fefd 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <DWT_Delay_us+0x44>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	0c9b      	lsrs	r3, r3, #18
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	fb02 f303 	mul.w	r3, r2, r3
 8000b3e:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000b40:	bf00      	nop
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <DWT_Delay_us+0x40>)
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	1ad2      	subs	r2, r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3f8      	bcc.n	8000b42 <DWT_Delay_us+0x26>
		;
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e0001000 	.word	0xe0001000
 8000b60:	431bde83 	.word	0x431bde83

08000b64 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ffd3 	bl	8000b1c <DWT_Delay_us>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7a1b      	ldrb	r3, [r3, #8]
 8000b94:	4619      	mov	r1, r3
 8000b96:	230f      	movs	r3, #15
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	7a09      	ldrb	r1, [r1, #8]
 8000bb2:	408b      	lsls	r3, r1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	60da      	str	r2, [r3, #12]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6958      	ldr	r0, [r3, #20]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	8b1b      	ldrh	r3, [r3, #24]
 8000bdc:	78fa      	ldrb	r2, [r7, #3]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f000 fdaa 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68d8      	ldr	r0, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	8a1b      	ldrh	r3, [r3, #16]
 8000c00:	78fa      	ldrb	r2, [r7, #3]
 8000c02:	4619      	mov	r1, r3
 8000c04:	f000 fd98 	bl	8001738 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8b1b      	ldrh	r3, [r3, #24]
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f107 0208 	add.w	r2, r7, #8
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fbf6 	bl	8001430 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	8a1b      	ldrh	r3, [r3, #16]
 8000c48:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f107 0208 	add.w	r2, r7, #8
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fbeb 	bl	8001430 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7a1b      	ldrb	r3, [r3, #8]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	230f      	movs	r3, #15
 8000c62:	4093      	lsls	r3, r2
 8000c64:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f107 0208 	add.w	r2, r7, #8
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fbdd 	bl	8001430 <HAL_GPIO_Init>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	70fb      	strb	r3, [r7, #3]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	4619      	mov	r1, r3
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff98 	bl	8000bc8 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000c98:	78bb      	ldrb	r3, [r7, #2]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff6c 	bl	8000b7e <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff9f 	bl	8000bec <EN_SET>
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f7ff ff58 	bl	8000b64 <usDelay>
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff98 	bl	8000bec <EN_SET>
 8000cbc:	2064      	movs	r0, #100	@ 0x64
 8000cbe:	f7ff ff51 	bl	8000b64 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8000cc2:	78bb      	ldrb	r3, [r7, #2]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff59 	bl	8000b7e <Write_HalfByte>
	PulseEn
 8000ccc:	2101      	movs	r1, #1
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff8c 	bl	8000bec <EN_SET>
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f7ff ff45 	bl	8000b64 <usDelay>
 8000cda:	2100      	movs	r1, #0
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff85 	bl	8000bec <EN_SET>
 8000ce2:	2064      	movs	r0, #100	@ 0x64
 8000ce4:	f7ff ff3e 	bl	8000b64 <usDelay>
	;
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000d00:	f7ff fe04 	bl	800090c <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff83 	bl	8000c10 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2240      	movs	r2, #64	@ 0x40
 8000d14:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	78ba      	ldrb	r2, [r7, #2]
 8000d1a:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000d1c:	78bb      	ldrb	r3, [r7, #2]
 8000d1e:	3340      	adds	r3, #64	@ 0x40
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000d26:	2100      	movs	r1, #0
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff4d 	bl	8000bc8 <RS_SET>
	EN_SET(lcd, 0);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff5b 	bl	8000bec <EN_SET>
	usDelay(50000);
 8000d36:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000d3a:	f7ff ff13 	bl	8000b64 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e018      	b.n	8000d76 <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 8000d44:	2103      	movs	r1, #3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff19 	bl	8000b7e <Write_HalfByte>
		PulseEn
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <EN_SET>
 8000d54:	200a      	movs	r0, #10
 8000d56:	f7ff ff05 	bl	8000b64 <usDelay>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff45 	bl	8000bec <EN_SET>
 8000d62:	2064      	movs	r0, #100	@ 0x64
 8000d64:	f7ff fefe 	bl	8000b64 <usDelay>
		;
		usDelay(4500);
 8000d68:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d6c:	f7ff fefa 	bl	8000b64 <usDelay>
	for (x = 0; x < 2; x++) {
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d9e3      	bls.n	8000d44 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fefd 	bl	8000b7e <Write_HalfByte>
	PulseEn
 8000d84:	2101      	movs	r1, #1
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff30 	bl	8000bec <EN_SET>
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f7ff fee9 	bl	8000b64 <usDelay>
 8000d92:	2100      	movs	r1, #0
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff29 	bl	8000bec <EN_SET>
 8000d9a:	2064      	movs	r0, #100	@ 0x64
 8000d9c:	f7ff fee2 	bl	8000b64 <usDelay>
	;
	usDelay(150);
 8000da0:	2096      	movs	r0, #150	@ 0x96
 8000da2:	f7ff fedf 	bl	8000b64 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000da6:	2102      	movs	r1, #2
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fee8 	bl	8000b7e <Write_HalfByte>
	PulseEn
 8000dae:	2101      	movs	r1, #1
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff1b 	bl	8000bec <EN_SET>
 8000db6:	200a      	movs	r0, #10
 8000db8:	f7ff fed4 	bl	8000b64 <usDelay>
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff14 	bl	8000bec <EN_SET>
 8000dc4:	2064      	movs	r0, #100	@ 0x64
 8000dc6:	f7ff fecd 	bl	8000b64 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000dca:	2228      	movs	r2, #40	@ 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff55 	bl	8000c7e <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2101      	movs	r1, #1
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f86d 	bl	8000eba <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f859 	bl	8000e98 <Alcd_Clear>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	70fb      	strb	r3, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	7e9a      	ldrb	r2, [r3, #26]
 8000e06:	78bb      	ldrb	r3, [r7, #2]
 8000e08:	4413      	add	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff2f 	bl	8000c7e <Alcd_SendByte>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	75fb      	strb	r3, [r7, #23]
 8000e3a:	e00b      	b.n	8000e54 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	2101      	movs	r1, #1
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff ff18 	bl	8000c7e <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	3301      	adds	r3, #1
 8000e52:	75fb      	strb	r3, [r7, #23]
 8000e54:	7dfa      	ldrb	r2, [r7, #23]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d3ef      	bcc.n	8000e3c <Alcd_Put_n+0x14>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	72fb      	strb	r3, [r7, #11]
 8000e74:	4613      	mov	r3, r2
 8000e76:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000e78:	7aba      	ldrb	r2, [r7, #10]
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f7ff ffb5 	bl	8000dee <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000e84:	7e3b      	ldrb	r3, [r7, #24]
 8000e86:	461a      	mov	r2, r3
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff ffcc 	bl	8000e28 <Alcd_Put_n>
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff feea 	bl	8000c7e <Alcd_SendByte>
	usDelay(2000);
 8000eaa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eae:	f7ff fe59 	bl	8000b64 <usDelay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	70fb      	strb	r3, [r7, #3]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70bb      	strb	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d006      	beq.n	8000eee <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7f9b      	ldrb	r3, [r3, #30]
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7f9b      	ldrb	r3, [r3, #30]
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 8000f02:	787b      	ldrb	r3, [r7, #1]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7f9b      	ldrb	r3, [r3, #30]
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7f9b      	ldrb	r3, [r3, #30]
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f9b      	ldrb	r3, [r3, #30]
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fea3 	bl	8000c7e <Alcd_SendByte>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8000f4c:	e002      	b.n	8000f54 <Str_Len+0x14>
		len++;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f6      	bne.n	8000f4e <Str_Len+0xe>
	}
	return len;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <Keypad_GetInputs>:
 */

#include "Matrix_Keypad.h"

/// @brief Reads the input status from the input port
static uint16_t Keypad_GetInputs(Matrix_Keypad_t *keypad) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	uint16_t Input = keypad->IntputPort->IDR & keypad->IP_Mask;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	8b1b      	ldrh	r3, [r3, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	81fb      	strh	r3, [r7, #14]
	return (Input >> keypad->InputStartingPin);
 8000f84:	89fa      	ldrh	r2, [r7, #14]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	fa42 f303 	asr.w	r3, r2, r3
 8000f8e:	b29b      	uxth	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <Keypad_SetOutputs>:

///@brief Write the status of output ports
static void Keypad_SetOutputs(Matrix_Keypad_t *keypad, uint16_t OutputStat) {
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]
	//turn off the pins
	keypad->OutputPort->BRR |= keypad->OP_Mask;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	8b5b      	ldrh	r3, [r3, #26]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	615a      	str	r2, [r3, #20]
	//turn on only the needed ones according to the required output
	keypad->OutputPort->BSRR |= (OutputStat << keypad->OutputStartingPin);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	8879      	ldrh	r1, [r7, #2]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <Keypad_Delay>:

/// @fn void Keypad_Delay(uint32_t)
/// @brief
/// Halts the program execution for a certain time
/// @param delay_ms delay value in milliseconds
static void Keypad_Delay(uint32_t delay_ms) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f91a 	bl	8001220 <HAL_Delay>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <Keypad_Refresh>:

void Keypad_Refresh(Matrix_Keypad_t *keypad) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
// temporary variable to store the new status of keys
	uint32_t TempKeys = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
	uint16_t OutputStat = 1 << (keypad->Rows - 1);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	2201      	movs	r2, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	817b      	strh	r3, [r7, #10]

	uint16_t x = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	813b      	strh	r3, [r7, #8]
	do {

		TempKeys <<= keypad->Columns;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4093      	lsls	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
		// send the output status to the hardware
		Keypad_SetOutputs(keypad, OutputStat);
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb9 	bl	8000f9a <Keypad_SetOutputs>
		Keypad_Delay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff ffd8 	bl	8000fde <Keypad_Delay>
		// read the input status from the hardware

		TempKeys |= Keypad_GetInputs(keypad);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ff9c 	bl	8000f6c <Keypad_GetInputs>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
		OutputStat >>= 1;
 800103e:	897b      	ldrh	r3, [r7, #10]
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	817b      	strh	r3, [r7, #10]
		x++;
 8001044:	893b      	ldrh	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	813b      	strh	r3, [r7, #8]
	} while (x < keypad->Rows);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	893b      	ldrh	r3, [r7, #8]
 8001052:	4293      	cmp	r3, r2
 8001054:	d3dd      	bcc.n	8001012 <Keypad_Refresh+0x1e>

	keypad->KeysStatus = TempKeys;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <Keypad_Init>:

void Keypad_Init(Matrix_Keypad_t *keypad) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef config;

//put a logic 1 in every position where an input pin is selected
	uint16_t Pins = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	84fb      	strh	r3, [r7, #38]	@ 0x26

//configure the columns gpio pins as inputs
//enable pull down resistors to eliminate the use of external ones
	for (int x = 0; x < keypad->Columns; x++) {
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	e00f      	b.n	8001096 <Keypad_Init+0x32>
		Pins |= (1 << (x + keypad->InputStartingPin));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	4413      	add	r3, r2
 800107e:	2201      	movs	r2, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	b21a      	sxth	r2, r3
 8001086:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Columns; x++) {
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	3301      	adds	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	461a      	mov	r2, r3
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	4293      	cmp	r3, r2
 80010a0:	dbe9      	blt.n	8001076 <Keypad_Init+0x12>
	}
//Load the input pin Mask
	keypad->IP_Mask = Pins;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80010a6:	831a      	strh	r2, [r3, #24]

	config.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
	config.Pull = GPIO_PULLDOWN;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
	config.Pin = Pins;
 80010b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f107 020c 	add.w	r2, r7, #12
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f9b6 	bl	8001430 <HAL_GPIO_Init>

//configure the rows gpio pins as outputs
	Pins = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	e00f      	b.n	80010ee <Keypad_Init+0x8a>
		Pins |= (1 << (x + keypad->OutputStartingPin));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4413      	add	r3, r2
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b21a      	sxth	r2, r3
 80010de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	3301      	adds	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	4293      	cmp	r3, r2
 80010f8:	dbe9      	blt.n	80010ce <Keypad_Init+0x6a>
	}

//Load the output pin Mask
	keypad->OP_Mask = Pins;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80010fe:	835a      	strh	r2, [r3, #26]

	config.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
	config.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
	config.Pin = Pins;
 8001108:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800110a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f107 020c 	add.w	r2, r7, #12
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f98a 	bl	8001430 <HAL_GPIO_Init>

//turn off all the outputs
	Keypad_SetOutputs(keypad, 0);
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff3b 	bl	8000f9a <Keypad_SetOutputs>
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	@ 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(Matrix_Keypad_t *keypad, uint8_t key) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	return (keypad->KeysStatus & (1 << key)) ? 1 : 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	4013      	ands	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2db      	uxtb	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f92b 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fa76 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f935 	bl	8001416 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f90b 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000003c 	.word	0x2000003c
 80011e0:	20000044 	.word	0x20000044
 80011e4:	20000040 	.word	0x20000040

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	@ (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000044 	.word	0x20000044
 8001208:	20000190 	.word	0x20000190

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000190 	.word	0x20000190

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000044 	.word	0x20000044

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	@ (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	@ 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff90 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff49 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff5e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff90 	bl	8001320 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffb0 	bl	8001384 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	@ 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e169      	b.n	8001718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001444:	2201      	movs	r2, #1
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8158 	bne.w	8001712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a9a      	ldr	r2, [pc, #616]	@ (80016d0 <HAL_GPIO_Init+0x2a0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d05e      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 800146c:	4a98      	ldr	r2, [pc, #608]	@ (80016d0 <HAL_GPIO_Init+0x2a0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d875      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 8001472:	4a98      	ldr	r2, [pc, #608]	@ (80016d4 <HAL_GPIO_Init+0x2a4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d058      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001478:	4a96      	ldr	r2, [pc, #600]	@ (80016d4 <HAL_GPIO_Init+0x2a4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d86f      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 800147e:	4a96      	ldr	r2, [pc, #600]	@ (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d052      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001484:	4a94      	ldr	r2, [pc, #592]	@ (80016d8 <HAL_GPIO_Init+0x2a8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d869      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 800148a:	4a94      	ldr	r2, [pc, #592]	@ (80016dc <HAL_GPIO_Init+0x2ac>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d04c      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 8001490:	4a92      	ldr	r2, [pc, #584]	@ (80016dc <HAL_GPIO_Init+0x2ac>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d863      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 8001496:	4a92      	ldr	r2, [pc, #584]	@ (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d046      	beq.n	800152a <HAL_GPIO_Init+0xfa>
 800149c:	4a90      	ldr	r2, [pc, #576]	@ (80016e0 <HAL_GPIO_Init+0x2b0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d85d      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	d82a      	bhi.n	80014fc <HAL_GPIO_Init+0xcc>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d859      	bhi.n	800155e <HAL_GPIO_Init+0x12e>
 80014aa:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <HAL_GPIO_Init+0x80>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	0800152b 	.word	0x0800152b
 80014b4:	08001505 	.word	0x08001505
 80014b8:	08001517 	.word	0x08001517
 80014bc:	08001559 	.word	0x08001559
 80014c0:	0800155f 	.word	0x0800155f
 80014c4:	0800155f 	.word	0x0800155f
 80014c8:	0800155f 	.word	0x0800155f
 80014cc:	0800155f 	.word	0x0800155f
 80014d0:	0800155f 	.word	0x0800155f
 80014d4:	0800155f 	.word	0x0800155f
 80014d8:	0800155f 	.word	0x0800155f
 80014dc:	0800155f 	.word	0x0800155f
 80014e0:	0800155f 	.word	0x0800155f
 80014e4:	0800155f 	.word	0x0800155f
 80014e8:	0800155f 	.word	0x0800155f
 80014ec:	0800155f 	.word	0x0800155f
 80014f0:	0800155f 	.word	0x0800155f
 80014f4:	0800150d 	.word	0x0800150d
 80014f8:	08001521 	.word	0x08001521
 80014fc:	4a79      	ldr	r2, [pc, #484]	@ (80016e4 <HAL_GPIO_Init+0x2b4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001502:	e02c      	b.n	800155e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e029      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	3304      	adds	r3, #4
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e024      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	3308      	adds	r3, #8
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e01f      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	330c      	adds	r3, #12
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e01a      	b.n	8001560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001532:	2304      	movs	r3, #4
 8001534:	623b      	str	r3, [r7, #32]
          break;
 8001536:	e013      	b.n	8001560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001540:	2308      	movs	r3, #8
 8001542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	611a      	str	r2, [r3, #16]
          break;
 800154a:	e009      	b.n	8001560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	615a      	str	r2, [r3, #20]
          break;
 8001556:	e003      	b.n	8001560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x130>
          break;
 800155e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2bff      	cmp	r3, #255	@ 0xff
 8001564:	d801      	bhi.n	800156a <HAL_GPIO_Init+0x13a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	e001      	b.n	800156e <HAL_GPIO_Init+0x13e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	d802      	bhi.n	800157c <HAL_GPIO_Init+0x14c>
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	e002      	b.n	8001582 <HAL_GPIO_Init+0x152>
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	3b08      	subs	r3, #8
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	210f      	movs	r1, #15
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	401a      	ands	r2, r3
 8001594:	6a39      	ldr	r1, [r7, #32]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80b1 	beq.w	8001712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b0:	4b4d      	ldr	r3, [pc, #308]	@ (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a4c      	ldr	r2, [pc, #304]	@ (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015c8:	4a48      	ldr	r2, [pc, #288]	@ (80016ec <HAL_GPIO_Init+0x2bc>)
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a40      	ldr	r2, [pc, #256]	@ (80016f0 <HAL_GPIO_Init+0x2c0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <HAL_GPIO_Init+0x1ec>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a3f      	ldr	r2, [pc, #252]	@ (80016f4 <HAL_GPIO_Init+0x2c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1e8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3e      	ldr	r2, [pc, #248]	@ (80016f8 <HAL_GPIO_Init+0x2c8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1e4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3d      	ldr	r2, [pc, #244]	@ (80016fc <HAL_GPIO_Init+0x2cc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1e0>
 800160c:	2303      	movs	r3, #3
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001610:	2304      	movs	r3, #4
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001614:	2302      	movs	r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x1ee>
 800161c:	2300      	movs	r3, #0
 800161e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162e:	492f      	ldr	r1, [pc, #188]	@ (80016ec <HAL_GPIO_Init+0x2bc>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	492c      	ldr	r1, [pc, #176]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	4928      	ldr	r1, [pc, #160]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4922      	ldr	r1, [pc, #136]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	60cb      	str	r3, [r1, #12]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	491e      	ldr	r1, [pc, #120]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4918      	ldr	r1, [pc, #96]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4914      	ldr	r1, [pc, #80]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d021      	beq.n	8001704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	490e      	ldr	r1, [pc, #56]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e021      	b.n	8001712 <HAL_GPIO_Init+0x2e2>
 80016ce:	bf00      	nop
 80016d0:	10320000 	.word	0x10320000
 80016d4:	10310000 	.word	0x10310000
 80016d8:	10220000 	.word	0x10220000
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10120000 	.word	0x10120000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_GPIO_Init+0x304>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	43db      	mvns	r3, r3
 800170c:	4909      	ldr	r1, [pc, #36]	@ (8001734 <HAL_GPIO_Init+0x304>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	3301      	adds	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ae8e 	bne.w	8001444 <HAL_GPIO_Init+0x14>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	@ 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001754:	e003      	b.n	800175e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e12b      	b.n	80019d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe ff9c 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2224      	movs	r2, #36	@ 0x24
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017cc:	f002 f8b6 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a81      	ldr	r2, [pc, #516]	@ (80019dc <HAL_I2C_Init+0x274>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d807      	bhi.n	80017ec <HAL_I2C_Init+0x84>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a80      	ldr	r2, [pc, #512]	@ (80019e0 <HAL_I2C_Init+0x278>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	bf94      	ite	ls
 80017e4:	2301      	movls	r3, #1
 80017e6:	2300      	movhi	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	e006      	b.n	80017fa <HAL_I2C_Init+0x92>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4a7d      	ldr	r2, [pc, #500]	@ (80019e4 <HAL_I2C_Init+0x27c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	bf94      	ite	ls
 80017f4:	2301      	movls	r3, #1
 80017f6:	2300      	movhi	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0e7      	b.n	80019d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a78      	ldr	r2, [pc, #480]	@ (80019e8 <HAL_I2C_Init+0x280>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9b      	lsrs	r3, r3, #18
 800180c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a6a      	ldr	r2, [pc, #424]	@ (80019dc <HAL_I2C_Init+0x274>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d802      	bhi.n	800183c <HAL_I2C_Init+0xd4>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3301      	adds	r3, #1
 800183a:	e009      	b.n	8001850 <HAL_I2C_Init+0xe8>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	4a69      	ldr	r2, [pc, #420]	@ (80019ec <HAL_I2C_Init+0x284>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	3301      	adds	r3, #1
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001862:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	495c      	ldr	r1, [pc, #368]	@ (80019dc <HAL_I2C_Init+0x274>)
 800186c:	428b      	cmp	r3, r1
 800186e:	d819      	bhi.n	80018a4 <HAL_I2C_Init+0x13c>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e59      	subs	r1, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fbb1 f3f3 	udiv	r3, r1, r3
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001884:	400b      	ands	r3, r1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <HAL_I2C_Init+0x138>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1e59      	subs	r1, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fbb1 f3f3 	udiv	r3, r1, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189e:	e051      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e04f      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d111      	bne.n	80018d0 <HAL_I2C_Init+0x168>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e012      	b.n	80018f6 <HAL_I2C_Init+0x18e>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e58      	subs	r0, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	0099      	lsls	r1, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Init+0x196>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e022      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10e      	bne.n	8001924 <HAL_I2C_Init+0x1bc>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1e58      	subs	r0, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	440b      	add	r3, r1
 8001914:	fbb0 f3f3 	udiv	r3, r0, r3
 8001918:	3301      	adds	r3, #1
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001922:	e00f      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	0099      	lsls	r1, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	6809      	ldr	r1, [r1, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001972:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6911      	ldr	r1, [r2, #16]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68d2      	ldr	r2, [r2, #12]
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	000186a0 	.word	0x000186a0
 80019e0:	001e847f 	.word	0x001e847f
 80019e4:	003d08ff 	.word	0x003d08ff
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	10624dd3 	.word	0x10624dd3

080019f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	460b      	mov	r3, r1
 80019fe:	817b      	strh	r3, [r7, #10]
 8001a00:	4613      	mov	r3, r2
 8001a02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff fc02 	bl	800120c <HAL_GetTick>
 8001a08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	f040 80e0 	bne.w	8001bd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2319      	movs	r3, #25
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4970      	ldr	r1, [pc, #448]	@ (8001be4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f001 f98a 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e0d3      	b.n	8001bda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_Master_Transmit+0x50>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0cc      	b.n	8001bda <HAL_I2C_Master_Transmit+0x1ea>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d007      	beq.n	8001a66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2221      	movs	r2, #33	@ 0x21
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2210      	movs	r2, #16
 8001a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	893a      	ldrh	r2, [r7, #8]
 8001a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	@ (8001be8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001aa8:	8979      	ldrh	r1, [r7, #10]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 fe76 	bl	80027a0 <I2C_MasterRequestWrite>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e08d      	b.n	8001bda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ad4:	e066      	b.n	8001ba4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f001 fa48 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d107      	bne.n	8001afe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d11b      	bne.n	8001b78 <HAL_I2C_Master_Transmit+0x188>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	6a39      	ldr	r1, [r7, #32]
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f001 fa3f 	bl	8003000 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00d      	beq.n	8001ba4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d107      	bne.n	8001ba0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e01a      	b.n	8001bda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d194      	bne.n	8001ad6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	00100002 	.word	0x00100002
 8001be8:	ffff0000 	.word	0xffff0000

08001bec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	@ 0x30
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	817b      	strh	r3, [r7, #10]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff fb02 	bl	800120c <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	f040 824b 	bne.w	80020ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2319      	movs	r3, #25
 8001c1e:	2201      	movs	r2, #1
 8001c20:	497f      	ldr	r1, [pc, #508]	@ (8001e20 <HAL_I2C_Master_Receive+0x234>)
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f001 f88a 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e23e      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_I2C_Master_Receive+0x54>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e237      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d007      	beq.n	8001c66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2222      	movs	r2, #34	@ 0x22
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2210      	movs	r2, #16
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	893a      	ldrh	r2, [r7, #8]
 8001c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8001e24 <HAL_I2C_Master_Receive+0x238>)
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fdf8 	bl	80028a4 <I2C_MasterRequestRead>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1f8      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d113      	bne.n	8001cee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e1cc      	b.n	8002088 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d11e      	bne.n	8001d34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d06:	b672      	cpsid	i
}
 8001d08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d30:	b662      	cpsie	i
}
 8001d32:	e035      	b.n	8001da0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d11e      	bne.n	8001d7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d76:	b662      	cpsie	i
}
 8001d78:	e012      	b.n	8001da0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001da0:	e172      	b.n	8002088 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f200 811f 	bhi.w	8001fea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d123      	bne.n	8001dfc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f001 f969 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e173      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dfa:	e145      	b.n	8002088 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d152      	bne.n	8001eaa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4906      	ldr	r1, [pc, #24]	@ (8001e28 <HAL_I2C_Master_Receive+0x23c>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 ff94 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e148      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
 8001e1e:	bf00      	nop
 8001e20:	00100002 	.word	0x00100002
 8001e24:	ffff0000 	.word	0xffff0000
 8001e28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e72:	b662      	cpsie	i
}
 8001e74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ea8:	e0ee      	b.n	8002088 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4981      	ldr	r1, [pc, #516]	@ (80020b8 <HAL_I2C_Master_Receive+0x4cc>)
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 ff41 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0f5      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	@ (80020bc <HAL_I2C_Master_Receive+0x4d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	4a6b      	ldr	r2, [pc, #428]	@ (80020c0 <HAL_I2C_Master_Receive+0x4d4>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a1a      	lsrs	r2, r3, #8
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00da      	lsls	r2, r3, #3
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d118      	bne.n	8001f62 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f52:	b662      	cpsie	i
}
 8001f54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0a6      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d1d9      	bne.n	8001f24 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fb2:	b662      	cpsie	i
}
 8001fb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fe8:	e04e      	b.n	8002088 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f001 f84e 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e058      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b04      	cmp	r3, #4
 800203c:	d124      	bne.n	8002088 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002042:	2b03      	cmp	r3, #3
 8002044:	d107      	bne.n	8002056 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002054:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f ae88 	bne.w	8001da2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	00010004 	.word	0x00010004
 80020bc:	2000003c 	.word	0x2000003c
 80020c0:	14f8b589 	.word	0x14f8b589

080020c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	460b      	mov	r3, r1
 80020d8:	813b      	strh	r3, [r7, #8]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020de:	f7ff f895 	bl	800120c <HAL_GetTick>
 80020e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	f040 80d9 	bne.w	80022a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2319      	movs	r3, #25
 80020f8:	2201      	movs	r2, #1
 80020fa:	496d      	ldr	r1, [pc, #436]	@ (80022b0 <HAL_I2C_Mem_Write+0x1ec>)
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fe1d 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
 800210a:	e0cc      	b.n	80022a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_I2C_Mem_Write+0x56>
 8002116:	2302      	movs	r3, #2
 8002118:	e0c5      	b.n	80022a6 <HAL_I2C_Mem_Write+0x1e2>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d007      	beq.n	8002140 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2221      	movs	r2, #33	@ 0x21
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	@ 0x40
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002170:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a4d      	ldr	r2, [pc, #308]	@ (80022b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002180:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002182:	88f8      	ldrh	r0, [r7, #6]
 8002184:	893a      	ldrh	r2, [r7, #8]
 8002186:	8979      	ldrh	r1, [r7, #10]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4603      	mov	r3, r0
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fc54 	bl	8002a40 <I2C_RequestMemoryWrite>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d052      	beq.n	8002244 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e081      	b.n	80022a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fee2 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d107      	bne.n	80021ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06b      	b.n	80022a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d11b      	bne.n	8002244 <HAL_I2C_Mem_Write+0x180>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d017      	beq.n	8002244 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1aa      	bne.n	80021a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fed5 	bl	8003000 <I2C_WaitOnBTFFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2b04      	cmp	r3, #4
 8002262:	d107      	bne.n	8002274 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002272:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e016      	b.n	80022a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	00100002 	.word	0x00100002
 80022b4:	ffff0000 	.word	0xffff0000

080022b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	@ 0x30
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d6:	f7fe ff99 	bl	800120c <HAL_GetTick>
 80022da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	f040 8250 	bne.w	800278a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2319      	movs	r3, #25
 80022f0:	2201      	movs	r2, #1
 80022f2:	4982      	ldr	r1, [pc, #520]	@ (80024fc <HAL_I2C_Mem_Read+0x244>)
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fd21 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
 8002302:	e243      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_I2C_Mem_Read+0x5a>
 800230e:	2302      	movs	r3, #2
 8002310:	e23c      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d007      	beq.n	8002338 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2222      	movs	r2, #34	@ 0x22
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2240      	movs	r2, #64	@ 0x40
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a62      	ldr	r2, [pc, #392]	@ (8002500 <HAL_I2C_Mem_Read+0x248>)
 8002378:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800237a:	88f8      	ldrh	r0, [r7, #6]
 800237c:	893a      	ldrh	r2, [r7, #8]
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4603      	mov	r3, r0
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fbee 	bl	8002b6c <I2C_RequestMemoryRead>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1f8      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d113      	bne.n	80023ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e1cc      	b.n	8002764 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11e      	bne.n	8002410 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e2:	b672      	cpsid	i
}
 80023e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800240c:	b662      	cpsie	i
}
 800240e:	e035      	b.n	800247c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11e      	bne.n	8002456 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002426:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002428:	b672      	cpsid	i
}
 800242a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002452:	b662      	cpsie	i
}
 8002454:	e012      	b.n	800247c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002464:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800247c:	e172      	b.n	8002764 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	2b03      	cmp	r3, #3
 8002484:	f200 811f 	bhi.w	80026c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	2b01      	cmp	r3, #1
 800248e:	d123      	bne.n	80024d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002492:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fdfb 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e173      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024d6:	e145      	b.n	8002764 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d152      	bne.n	8002586 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	2200      	movs	r2, #0
 80024e8:	4906      	ldr	r1, [pc, #24]	@ (8002504 <HAL_I2C_Mem_Read+0x24c>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fc26 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e148      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
 80024fa:	bf00      	nop
 80024fc:	00100002 	.word	0x00100002
 8002500:	ffff0000 	.word	0xffff0000
 8002504:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800254e:	b662      	cpsie	i
}
 8002550:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002584:	e0ee      	b.n	8002764 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258c:	2200      	movs	r2, #0
 800258e:	4981      	ldr	r1, [pc, #516]	@ (8002794 <HAL_I2C_Mem_Read+0x4dc>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fbd3 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0f5      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80025e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002798 <HAL_I2C_Mem_Read+0x4e0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	4a6b      	ldr	r2, [pc, #428]	@ (800279c <HAL_I2C_Mem_Read+0x4e4>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0a1a      	lsrs	r2, r3, #8
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00da      	lsls	r2, r3, #3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	3b01      	subs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d118      	bne.n	800263e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800262e:	b662      	cpsie	i
}
 8002630:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0a6      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b04      	cmp	r3, #4
 800264a:	d1d9      	bne.n	8002600 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800268e:	b662      	cpsie	i
}
 8002690:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026c4:	e04e      	b.n	8002764 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fce0 	bl	8003090 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e058      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d124      	bne.n	8002764 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	2b03      	cmp	r3, #3
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002730:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	f47f ae88 	bne.w	800247e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	@ 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	00010004 	.word	0x00010004
 8002798:	2000003c 	.word	0x2000003c
 800279c:	14f8b589 	.word	0x14f8b589

080027a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d006      	beq.n	80027ca <I2C_MasterRequestWrite+0x2a>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d003      	beq.n	80027ca <I2C_MasterRequestWrite+0x2a>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027c8:	d108      	bne.n	80027dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e00b      	b.n	80027f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d107      	bne.n	80027f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fa9b 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800281a:	d103      	bne.n	8002824 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e035      	b.n	8002894 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002830:	d108      	bne.n	8002844 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	e01b      	b.n	800287c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	11db      	asrs	r3, r3, #7
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 030f 	orn	r3, r3, #15
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <I2C_MasterRequestWrite+0xfc>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fae4 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e010      	b.n	8002894 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4907      	ldr	r1, [pc, #28]	@ (80028a0 <I2C_MasterRequestWrite+0x100>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fad4 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00010008 	.word	0x00010008
 80028a0:	00010002 	.word	0x00010002

080028a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	460b      	mov	r3, r1
 80028b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d006      	beq.n	80028de <I2C_MasterRequestRead+0x3a>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <I2C_MasterRequestRead+0x3a>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028dc:	d108      	bne.n	80028f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00b      	b.n	8002908 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d107      	bne.n	8002908 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa11 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00d      	beq.n	800293c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800292e:	d103      	bne.n	8002938 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e079      	b.n	8002a30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002944:	d108      	bne.n	8002958 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e05f      	b.n	8002a18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002958:	897b      	ldrh	r3, [r7, #10]
 800295a:	11db      	asrs	r3, r3, #7
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f003 0306 	and.w	r3, r3, #6
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f063 030f 	orn	r3, r3, #15
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4930      	ldr	r1, [pc, #192]	@ (8002a38 <I2C_MasterRequestRead+0x194>)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa5a 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e054      	b.n	8002a30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4929      	ldr	r1, [pc, #164]	@ (8002a3c <I2C_MasterRequestRead+0x198>)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa4a 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e044      	b.n	8002a30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f9af 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f2:	d103      	bne.n	80029fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e017      	b.n	8002a30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	11db      	asrs	r3, r3, #7
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 0306 	and.w	r3, r3, #6
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f063 030e 	orn	r3, r3, #14
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4907      	ldr	r1, [pc, #28]	@ (8002a3c <I2C_MasterRequestRead+0x198>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa06 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	00010008 	.word	0x00010008
 8002a3c:	00010002 	.word	0x00010002

08002a40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f960 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a90:	d103      	bne.n	8002a9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e05f      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	492d      	ldr	r1, [pc, #180]	@ (8002b68 <I2C_RequestMemoryWrite+0x128>)
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9bb 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e04c      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fa46 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e02b      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	611a      	str	r2, [r3, #16]
 8002b16:	e021      	b.n	8002b5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b18:	893b      	ldrh	r3, [r7, #8]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	6a39      	ldr	r1, [r7, #32]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa20 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d107      	bne.n	8002b4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e005      	b.n	8002b5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b52:	893b      	ldrh	r3, [r7, #8]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	00010002 	.word	0x00010002

08002b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	817b      	strh	r3, [r7, #10]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	813b      	strh	r3, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f8c2 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bcc:	d103      	bne.n	8002bd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0aa      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	4952      	ldr	r1, [pc, #328]	@ (8002d38 <I2C_RequestMemoryRead+0x1cc>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f91d 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e097      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c18:	6a39      	ldr	r1, [r7, #32]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f9a8 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d107      	bne.n	8002c3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e076      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	611a      	str	r2, [r3, #16]
 8002c52:	e021      	b.n	8002c98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c64:	6a39      	ldr	r1, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f982 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d107      	bne.n	8002c8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e050      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8e:	893b      	ldrh	r3, [r7, #8]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f967 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e035      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f82b 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cfa:	d103      	bne.n	8002d04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e013      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	4906      	ldr	r1, [pc, #24]	@ (8002d38 <I2C_RequestMemoryRead+0x1cc>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f886 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	00010002 	.word	0x00010002

08002d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	e048      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d044      	beq.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fa59 	bl	800120c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d139      	bne.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	e00c      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d116      	bne.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e023      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10d      	bne.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	e00c      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d093      	beq.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3e:	e071      	b.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4e:	d123      	bne.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e067      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d041      	beq.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7fe f9b4 	bl	800120c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d136      	bne.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10c      	bne.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e00b      	b.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e021      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10c      	bne.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e00b      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f af6d 	bne.w	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7c:	e034      	b.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8e3 	bl	800314a <I2C_IsAcknowledgeFailed>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e034      	b.n	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d028      	beq.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe f939 	bl	800120c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11d      	bne.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d016      	beq.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff2:	2b80      	cmp	r3, #128	@ 0x80
 8002ff4:	d1c3      	bne.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300c:	e034      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f89b 	bl	800314a <I2C_IsAcknowledgeFailed>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e034      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d028      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7fe f8f1 	bl	800120c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11d      	bne.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d1c3      	bne.n	800300e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309c:	e049      	b.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d119      	bne.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e030      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7fe f894 	bl	800120c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d016      	beq.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d1ae      	bne.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003160:	d11b      	bne.n	800319a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800316a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e272      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8087 	beq.w	80032d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c8:	4b92      	ldr	r3, [pc, #584]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d00c      	beq.n	80031ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d112      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
 80031e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ec:	d10b      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ee:	4b89      	ldr	r3, [pc, #548]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x12c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d168      	bne.n	80032d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e24c      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x76>
 8003210:	4b80      	ldr	r3, [pc, #512]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a7f      	ldr	r2, [pc, #508]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e02e      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b7b      	ldr	r3, [pc, #492]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7a      	ldr	r2, [pc, #488]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b78      	ldr	r3, [pc, #480]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a77      	ldr	r2, [pc, #476]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003238:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0xbc>
 800324a:	4b72      	ldr	r3, [pc, #456]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a71      	ldr	r2, [pc, #452]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b6f      	ldr	r3, [pc, #444]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6e      	ldr	r2, [pc, #440]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 8003264:	4b6b      	ldr	r3, [pc, #428]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6a      	ldr	r2, [pc, #424]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b68      	ldr	r3, [pc, #416]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a67      	ldr	r2, [pc, #412]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd ffc2 	bl	800120c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7fd ffbe 	bl	800120c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e200      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b5d      	ldr	r3, [pc, #372]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xe4>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fd ffae 	bl	800120c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fd ffaa 	bl	800120c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	@ 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1ec      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b53      	ldr	r3, [pc, #332]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x10c>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ee:	4b49      	ldr	r3, [pc, #292]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x18c>
 80032fa:	4b46      	ldr	r3, [pc, #280]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b43      	ldr	r3, [pc, #268]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x176>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1c0      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b3d      	ldr	r3, [pc, #244]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4939      	ldr	r1, [pc, #228]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b36      	ldr	r3, [pc, #216]	@ (8003418 <HAL_RCC_OscConfig+0x270>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fd ff63 	bl	800120c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334a:	f7fd ff5f 	bl	800120c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1a1      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b2d      	ldr	r3, [pc, #180]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4927      	ldr	r1, [pc, #156]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_RCC_OscConfig+0x270>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fd ff42 	bl	800120c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338c:	f7fd ff3e 	bl	800120c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e180      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d03a      	beq.n	800342c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d019      	beq.n	80033f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_RCC_OscConfig+0x274>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fd ff22 	bl	800120c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fd ff1e 	bl	800120c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e160      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ea:	2001      	movs	r0, #1
 80033ec:	f000 faba 	bl	8003964 <RCC_Delay>
 80033f0:	e01c      	b.n	800342c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <HAL_RCC_OscConfig+0x274>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fd ff08 	bl	800120c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fe:	e00f      	b.n	8003420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7fd ff04 	bl	800120c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d908      	bls.n	8003420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e146      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	42420000 	.word	0x42420000
 800341c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b92      	ldr	r3, [pc, #584]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e9      	bne.n	8003400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a6 	beq.w	8003586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b8b      	ldr	r3, [pc, #556]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4a87      	ldr	r2, [pc, #540]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003454:	61d3      	str	r3, [r2, #28]
 8003456:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003466:	4b82      	ldr	r3, [pc, #520]	@ (8003670 <HAL_RCC_OscConfig+0x4c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d118      	bne.n	80034a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003472:	4b7f      	ldr	r3, [pc, #508]	@ (8003670 <HAL_RCC_OscConfig+0x4c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7e      	ldr	r2, [pc, #504]	@ (8003670 <HAL_RCC_OscConfig+0x4c8>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347e:	f7fd fec5 	bl	800120c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003486:	f7fd fec1 	bl	800120c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b64      	cmp	r3, #100	@ 0x64
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e103      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	4b75      	ldr	r3, [pc, #468]	@ (8003670 <HAL_RCC_OscConfig+0x4c8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d106      	bne.n	80034ba <HAL_RCC_OscConfig+0x312>
 80034ac:	4b6f      	ldr	r3, [pc, #444]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a6e      	ldr	r2, [pc, #440]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6213      	str	r3, [r2, #32]
 80034b8:	e02d      	b.n	8003516 <HAL_RCC_OscConfig+0x36e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10c      	bne.n	80034dc <HAL_RCC_OscConfig+0x334>
 80034c2:	4b6a      	ldr	r3, [pc, #424]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a69      	ldr	r2, [pc, #420]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	4b67      	ldr	r3, [pc, #412]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a66      	ldr	r2, [pc, #408]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	6213      	str	r3, [r2, #32]
 80034da:	e01c      	b.n	8003516 <HAL_RCC_OscConfig+0x36e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d10c      	bne.n	80034fe <HAL_RCC_OscConfig+0x356>
 80034e4:	4b61      	ldr	r3, [pc, #388]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a60      	ldr	r2, [pc, #384]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	6213      	str	r3, [r2, #32]
 80034f0:	4b5e      	ldr	r3, [pc, #376]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	e00b      	b.n	8003516 <HAL_RCC_OscConfig+0x36e>
 80034fe:	4b5b      	ldr	r3, [pc, #364]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a5a      	ldr	r2, [pc, #360]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6213      	str	r3, [r2, #32]
 800350a:	4b58      	ldr	r3, [pc, #352]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a57      	ldr	r2, [pc, #348]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d015      	beq.n	800354a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fd fe75 	bl	800120c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fd fe71 	bl	800120c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0b1      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	4b4b      	ldr	r3, [pc, #300]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ee      	beq.n	8003526 <HAL_RCC_OscConfig+0x37e>
 8003548:	e014      	b.n	8003574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354a:	f7fd fe5f 	bl	800120c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fd fe5b 	bl	800120c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e09b      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	4b40      	ldr	r3, [pc, #256]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ee      	bne.n	8003552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	4b3c      	ldr	r3, [pc, #240]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8087 	beq.w	800369e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003590:	4b36      	ldr	r3, [pc, #216]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d061      	beq.n	8003660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d146      	bne.n	8003632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b33      	ldr	r3, [pc, #204]	@ (8003674 <HAL_RCC_OscConfig+0x4cc>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fd fe2f 	bl	800120c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fd fe2b 	bl	800120c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e06d      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c4:	4b29      	ldr	r3, [pc, #164]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d8:	d108      	bne.n	80035ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035da:	4b24      	ldr	r3, [pc, #144]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4921      	ldr	r1, [pc, #132]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ec:	4b1f      	ldr	r3, [pc, #124]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a19      	ldr	r1, [r3, #32]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	430b      	orrs	r3, r1
 80035fe:	491b      	ldr	r1, [pc, #108]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003604:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fd fdff 	bl	800120c <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003612:	f7fd fdfb 	bl	800120c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e03d      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x46a>
 8003630:	e035      	b.n	800369e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003632:	4b10      	ldr	r3, [pc, #64]	@ (8003674 <HAL_RCC_OscConfig+0x4cc>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fde8 	bl	800120c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7fd fde4 	bl	800120c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e026      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_RCC_OscConfig+0x4c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x498>
 800365e:	e01e      	b.n	800369e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e019      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
 8003674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_RCC_OscConfig+0x500>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	429a      	cmp	r2, r3
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0d0      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b6a      	ldr	r3, [pc, #424]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d910      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b67      	ldr	r3, [pc, #412]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0207 	bic.w	r2, r3, #7
 80036d6:	4965      	ldr	r1, [pc, #404]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a58      	ldr	r2, [pc, #352]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a52      	ldr	r2, [pc, #328]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800372a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d040      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e073      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3d      	ldr	r3, [pc, #244]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06b      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4936      	ldr	r1, [pc, #216]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd fd36 	bl	800120c <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd fd32 	bl	800120c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e053      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b27      	ldr	r3, [pc, #156]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d210      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b24      	ldr	r3, [pc, #144]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 0207 	bic.w	r2, r3, #7
 80037e2:	4922      	ldr	r1, [pc, #136]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f821 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <HAL_RCC_ClockConfig+0x1cc>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_RCC_ClockConfig+0x1d0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fc94 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40022000 	.word	0x40022000
 8003870:	40021000 	.word	0x40021000
 8003874:	08004ce0 	.word	0x08004ce0
 8003878:	2000003c 	.word	0x2000003c
 800387c:	20000040 	.word	0x20000040

08003880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800389a:	4b1e      	ldr	r3, [pc, #120]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x94>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x30>
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ae:	e027      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x98>)
 80038b2:	613b      	str	r3, [r7, #16]
      break;
 80038b4:	e027      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	0c9b      	lsrs	r3, r3, #18
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a17      	ldr	r2, [pc, #92]	@ (800391c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ce:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x94>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0c5b      	lsrs	r3, r3, #17
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	4a11      	ldr	r2, [pc, #68]	@ (8003920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
 80038dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x98>)
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e004      	b.n	80038fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	613b      	str	r3, [r7, #16]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x98>)
 8003902:	613b      	str	r3, [r7, #16]
      break;
 8003904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003906:	693b      	ldr	r3, [r7, #16]
}
 8003908:	4618      	mov	r0, r3
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	007a1200 	.word	0x007a1200
 800391c:	08004cf8 	.word	0x08004cf8
 8003920:	08004d08 	.word	0x08004d08
 8003924:	003d0900 	.word	0x003d0900

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b02      	ldr	r3, [pc, #8]	@ (8003938 <HAL_RCC_GetHCLKFreq+0x10>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	2000003c 	.word	0x2000003c

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff2 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	08004cf0 	.word	0x08004cf0

08003964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <RCC_Delay+0x34>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <RCC_Delay+0x38>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003980:	bf00      	nop
  }
  while (Delay --);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f9      	bne.n	8003980 <RCC_Delay+0x1c>
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	2000003c 	.word	0x2000003c
 800399c:	10624dd3 	.word	0x10624dd3

080039a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	@ (8003a28 <HAL_TIM_Base_Start+0x88>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_Base_Start+0x48>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d009      	beq.n	80039e8 <HAL_TIM_Base_Start+0x48>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a14      	ldr	r2, [pc, #80]	@ (8003a2c <HAL_TIM_Base_Start+0x8c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_Base_Start+0x48>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <HAL_TIM_Base_Start+0x90>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d010      	beq.n	8003a1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e007      	b.n	8003a1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc fe76 	bl	800074c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 f992 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x24>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e022      	b.n	8003b3e <HAL_TIM_PWM_Start+0x6a>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d109      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x3e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e015      	b.n	8003b3e <HAL_TIM_PWM_Start+0x6a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x58>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e008      	b.n	8003b3e <HAL_TIM_PWM_Start+0x6a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e05e      	b.n	8003c04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_PWM_Start+0x82>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b54:	e013      	b.n	8003b7e <HAL_TIM_PWM_Start+0xaa>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0x92>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b64:	e00b      	b.n	8003b7e <HAL_TIM_PWM_Start+0xaa>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b74:	e003      	b.n	8003b7e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fafe 	bl	8004188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <HAL_TIM_PWM_Start+0x138>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a18      	ldr	r2, [pc, #96]	@ (8003c0c <HAL_TIM_PWM_Start+0x138>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_TIM_PWM_Start+0xfa>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb8:	d009      	beq.n	8003bce <HAL_TIM_PWM_Start+0xfa>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <HAL_TIM_PWM_Start+0x13c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d004      	beq.n	8003bce <HAL_TIM_PWM_Start+0xfa>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <HAL_TIM_PWM_Start+0x140>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d111      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b06      	cmp	r3, #6
 8003bde:	d010      	beq.n	8003c02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	e007      	b.n	8003c02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800

08003c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0ae      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	f200 809f 	bhi.w	8003d84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c46:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003d85 	.word	0x08003d85
 8003c54:	08003d85 	.word	0x08003d85
 8003c58:	08003d85 	.word	0x08003d85
 8003c5c:	08003cc1 	.word	0x08003cc1
 8003c60:	08003d85 	.word	0x08003d85
 8003c64:	08003d85 	.word	0x08003d85
 8003c68:	08003d85 	.word	0x08003d85
 8003c6c:	08003d03 	.word	0x08003d03
 8003c70:	08003d85 	.word	0x08003d85
 8003c74:	08003d85 	.word	0x08003d85
 8003c78:	08003d85 	.word	0x08003d85
 8003c7c:	08003d43 	.word	0x08003d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f8f6 	bl	8003e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0208 	orr.w	r2, r2, #8
 8003c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0204 	bic.w	r2, r2, #4
 8003caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	619a      	str	r2, [r3, #24]
      break;
 8003cbe:	e064      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f93c 	bl	8003f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6999      	ldr	r1, [r3, #24]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	021a      	lsls	r2, r3, #8
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	619a      	str	r2, [r3, #24]
      break;
 8003d00:	e043      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f985 	bl	8004018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0208 	orr.w	r2, r2, #8
 8003d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0204 	bic.w	r2, r2, #4
 8003d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	61da      	str	r2, [r3, #28]
      break;
 8003d40:	e023      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f9cf 	bl	80040ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	61da      	str	r2, [r3, #28]
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
      break;
 8003d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a2f      	ldr	r2, [pc, #188]	@ (8003e6c <TIM_Base_SetConfig+0xd0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00b      	beq.n	8003dcc <TIM_Base_SetConfig+0x30>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d007      	beq.n	8003dcc <TIM_Base_SetConfig+0x30>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8003e70 <TIM_Base_SetConfig+0xd4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0x30>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e74 <TIM_Base_SetConfig+0xd8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d108      	bne.n	8003dde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <TIM_Base_SetConfig+0xd0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0x62>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0x62>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <TIM_Base_SetConfig+0xd4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0x62>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <TIM_Base_SetConfig+0xd8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0d      	ldr	r2, [pc, #52]	@ (8003e6c <TIM_Base_SetConfig+0xd0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d103      	bne.n	8003e44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]
  }
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800

08003e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f023 0201 	bic.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 0302 	bic.w	r3, r3, #2
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <TIM_OC1_SetConfig+0xc8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10c      	bne.n	8003eee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0308 	bic.w	r3, r3, #8
 8003eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a13      	ldr	r2, [pc, #76]	@ (8003f40 <TIM_OC1_SetConfig+0xc8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d111      	bne.n	8003f1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	621a      	str	r2, [r3, #32]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40012c00 	.word	0x40012c00

08003f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f023 0210 	bic.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0320 	bic.w	r3, r3, #32
 8003f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004014 <TIM_OC2_SetConfig+0xd0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10d      	bne.n	8003fc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <TIM_OC2_SetConfig+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d113      	bne.n	8003ff0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00

08004018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <TIM_OC3_SetConfig+0xd0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10d      	bne.n	8004092 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800407c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <TIM_OC3_SetConfig+0xd0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d113      	bne.n	80040c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40012c00 	.word	0x40012c00

080040ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <TIM_OC4_SetConfig+0x98>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d109      	bne.n	8004160 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00

08004188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2201      	movs	r2, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	431a      	orrs	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e046      	b.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004234:	d009      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a10      	ldr	r2, [pc, #64]	@ (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800

0800428c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e03d      	b.n	8004324 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr
	...

08004330 <siprintf>:
 8004330:	b40e      	push	{r1, r2, r3}
 8004332:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004336:	b500      	push	{lr}
 8004338:	b09c      	sub	sp, #112	@ 0x70
 800433a:	ab1d      	add	r3, sp, #116	@ 0x74
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	9107      	str	r1, [sp, #28]
 8004342:	9104      	str	r1, [sp, #16]
 8004344:	4808      	ldr	r0, [pc, #32]	@ (8004368 <siprintf+0x38>)
 8004346:	4909      	ldr	r1, [pc, #36]	@ (800436c <siprintf+0x3c>)
 8004348:	f853 2b04 	ldr.w	r2, [r3], #4
 800434c:	9105      	str	r1, [sp, #20]
 800434e:	6800      	ldr	r0, [r0, #0]
 8004350:	a902      	add	r1, sp, #8
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	f000 f992 	bl	800467c <_svfiprintf_r>
 8004358:	2200      	movs	r2, #0
 800435a:	9b02      	ldr	r3, [sp, #8]
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	b01c      	add	sp, #112	@ 0x70
 8004360:	f85d eb04 	ldr.w	lr, [sp], #4
 8004364:	b003      	add	sp, #12
 8004366:	4770      	bx	lr
 8004368:	20000048 	.word	0x20000048
 800436c:	ffff0208 	.word	0xffff0208

08004370 <memset>:
 8004370:	4603      	mov	r3, r0
 8004372:	4402      	add	r2, r0
 8004374:	4293      	cmp	r3, r2
 8004376:	d100      	bne.n	800437a <memset+0xa>
 8004378:	4770      	bx	lr
 800437a:	f803 1b01 	strb.w	r1, [r3], #1
 800437e:	e7f9      	b.n	8004374 <memset+0x4>

08004380 <__errno>:
 8004380:	4b01      	ldr	r3, [pc, #4]	@ (8004388 <__errno+0x8>)
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000048 	.word	0x20000048

0800438c <__libc_init_array>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	2600      	movs	r6, #0
 8004390:	4d0c      	ldr	r5, [pc, #48]	@ (80043c4 <__libc_init_array+0x38>)
 8004392:	4c0d      	ldr	r4, [pc, #52]	@ (80043c8 <__libc_init_array+0x3c>)
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	42a6      	cmp	r6, r4
 800439a:	d109      	bne.n	80043b0 <__libc_init_array+0x24>
 800439c:	f000 fc78 	bl	8004c90 <_init>
 80043a0:	2600      	movs	r6, #0
 80043a2:	4d0a      	ldr	r5, [pc, #40]	@ (80043cc <__libc_init_array+0x40>)
 80043a4:	4c0a      	ldr	r4, [pc, #40]	@ (80043d0 <__libc_init_array+0x44>)
 80043a6:	1b64      	subs	r4, r4, r5
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	42a6      	cmp	r6, r4
 80043ac:	d105      	bne.n	80043ba <__libc_init_array+0x2e>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b4:	4798      	blx	r3
 80043b6:	3601      	adds	r6, #1
 80043b8:	e7ee      	b.n	8004398 <__libc_init_array+0xc>
 80043ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80043be:	4798      	blx	r3
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7f2      	b.n	80043aa <__libc_init_array+0x1e>
 80043c4:	08004d40 	.word	0x08004d40
 80043c8:	08004d40 	.word	0x08004d40
 80043cc:	08004d40 	.word	0x08004d40
 80043d0:	08004d44 	.word	0x08004d44

080043d4 <__retarget_lock_acquire_recursive>:
 80043d4:	4770      	bx	lr

080043d6 <__retarget_lock_release_recursive>:
 80043d6:	4770      	bx	lr

080043d8 <_free_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4605      	mov	r5, r0
 80043dc:	2900      	cmp	r1, #0
 80043de:	d040      	beq.n	8004462 <_free_r+0x8a>
 80043e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e4:	1f0c      	subs	r4, r1, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bfb8      	it	lt
 80043ea:	18e4      	addlt	r4, r4, r3
 80043ec:	f000 f8de 	bl	80045ac <__malloc_lock>
 80043f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <_free_r+0x8c>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	b933      	cbnz	r3, 8004404 <_free_r+0x2c>
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	6014      	str	r4, [r2, #0]
 80043fa:	4628      	mov	r0, r5
 80043fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004400:	f000 b8da 	b.w	80045b8 <__malloc_unlock>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d908      	bls.n	800441a <_free_r+0x42>
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	1821      	adds	r1, r4, r0
 800440c:	428b      	cmp	r3, r1
 800440e:	bf01      	itttt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	1809      	addeq	r1, r1, r0
 8004416:	6021      	streq	r1, [r4, #0]
 8004418:	e7ed      	b.n	80043f6 <_free_r+0x1e>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x4c>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x42>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1850      	adds	r0, r2, r1
 8004428:	42a0      	cmp	r0, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x6c>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	4401      	add	r1, r0
 8004430:	1850      	adds	r0, r2, r1
 8004432:	4283      	cmp	r3, r0
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1e0      	bne.n	80043fa <_free_r+0x22>
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4408      	add	r0, r1
 800443e:	6010      	str	r0, [r2, #0]
 8004440:	6053      	str	r3, [r2, #4]
 8004442:	e7da      	b.n	80043fa <_free_r+0x22>
 8004444:	d902      	bls.n	800444c <_free_r+0x74>
 8004446:	230c      	movs	r3, #12
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	e7d6      	b.n	80043fa <_free_r+0x22>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	1821      	adds	r1, r4, r0
 8004450:	428b      	cmp	r3, r1
 8004452:	bf01      	itttt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	1809      	addeq	r1, r1, r0
 800445a:	6021      	streq	r1, [r4, #0]
 800445c:	6063      	str	r3, [r4, #4]
 800445e:	6054      	str	r4, [r2, #4]
 8004460:	e7cb      	b.n	80043fa <_free_r+0x22>
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	200002d8 	.word	0x200002d8

08004468 <sbrk_aligned>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4e0f      	ldr	r6, [pc, #60]	@ (80044a8 <sbrk_aligned+0x40>)
 800446c:	460c      	mov	r4, r1
 800446e:	6831      	ldr	r1, [r6, #0]
 8004470:	4605      	mov	r5, r0
 8004472:	b911      	cbnz	r1, 800447a <sbrk_aligned+0x12>
 8004474:	f000 fbaa 	bl	8004bcc <_sbrk_r>
 8004478:	6030      	str	r0, [r6, #0]
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	f000 fba5 	bl	8004bcc <_sbrk_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d103      	bne.n	800448e <sbrk_aligned+0x26>
 8004486:	f04f 34ff 	mov.w	r4, #4294967295
 800448a:	4620      	mov	r0, r4
 800448c:	bd70      	pop	{r4, r5, r6, pc}
 800448e:	1cc4      	adds	r4, r0, #3
 8004490:	f024 0403 	bic.w	r4, r4, #3
 8004494:	42a0      	cmp	r0, r4
 8004496:	d0f8      	beq.n	800448a <sbrk_aligned+0x22>
 8004498:	1a21      	subs	r1, r4, r0
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fb96 	bl	8004bcc <_sbrk_r>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d1f2      	bne.n	800448a <sbrk_aligned+0x22>
 80044a4:	e7ef      	b.n	8004486 <sbrk_aligned+0x1e>
 80044a6:	bf00      	nop
 80044a8:	200002d4 	.word	0x200002d4

080044ac <_malloc_r>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	1ccd      	adds	r5, r1, #3
 80044b2:	f025 0503 	bic.w	r5, r5, #3
 80044b6:	3508      	adds	r5, #8
 80044b8:	2d0c      	cmp	r5, #12
 80044ba:	bf38      	it	cc
 80044bc:	250c      	movcc	r5, #12
 80044be:	2d00      	cmp	r5, #0
 80044c0:	4606      	mov	r6, r0
 80044c2:	db01      	blt.n	80044c8 <_malloc_r+0x1c>
 80044c4:	42a9      	cmp	r1, r5
 80044c6:	d904      	bls.n	80044d2 <_malloc_r+0x26>
 80044c8:	230c      	movs	r3, #12
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	2000      	movs	r0, #0
 80044ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045a8 <_malloc_r+0xfc>
 80044d6:	f000 f869 	bl	80045ac <__malloc_lock>
 80044da:	f8d8 3000 	ldr.w	r3, [r8]
 80044de:	461c      	mov	r4, r3
 80044e0:	bb44      	cbnz	r4, 8004534 <_malloc_r+0x88>
 80044e2:	4629      	mov	r1, r5
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff ffbf 	bl	8004468 <sbrk_aligned>
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	4604      	mov	r4, r0
 80044ee:	d158      	bne.n	80045a2 <_malloc_r+0xf6>
 80044f0:	f8d8 4000 	ldr.w	r4, [r8]
 80044f4:	4627      	mov	r7, r4
 80044f6:	2f00      	cmp	r7, #0
 80044f8:	d143      	bne.n	8004582 <_malloc_r+0xd6>
 80044fa:	2c00      	cmp	r4, #0
 80044fc:	d04b      	beq.n	8004596 <_malloc_r+0xea>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	4639      	mov	r1, r7
 8004502:	4630      	mov	r0, r6
 8004504:	eb04 0903 	add.w	r9, r4, r3
 8004508:	f000 fb60 	bl	8004bcc <_sbrk_r>
 800450c:	4581      	cmp	r9, r0
 800450e:	d142      	bne.n	8004596 <_malloc_r+0xea>
 8004510:	6821      	ldr	r1, [r4, #0]
 8004512:	4630      	mov	r0, r6
 8004514:	1a6d      	subs	r5, r5, r1
 8004516:	4629      	mov	r1, r5
 8004518:	f7ff ffa6 	bl	8004468 <sbrk_aligned>
 800451c:	3001      	adds	r0, #1
 800451e:	d03a      	beq.n	8004596 <_malloc_r+0xea>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	442b      	add	r3, r5
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	f8d8 3000 	ldr.w	r3, [r8]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	bb62      	cbnz	r2, 8004588 <_malloc_r+0xdc>
 800452e:	f8c8 7000 	str.w	r7, [r8]
 8004532:	e00f      	b.n	8004554 <_malloc_r+0xa8>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	1b52      	subs	r2, r2, r5
 8004538:	d420      	bmi.n	800457c <_malloc_r+0xd0>
 800453a:	2a0b      	cmp	r2, #11
 800453c:	d917      	bls.n	800456e <_malloc_r+0xc2>
 800453e:	1961      	adds	r1, r4, r5
 8004540:	42a3      	cmp	r3, r4
 8004542:	6025      	str	r5, [r4, #0]
 8004544:	bf18      	it	ne
 8004546:	6059      	strne	r1, [r3, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	bf08      	it	eq
 800454c:	f8c8 1000 	streq.w	r1, [r8]
 8004550:	5162      	str	r2, [r4, r5]
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f82f 	bl	80045b8 <__malloc_unlock>
 800455a:	f104 000b 	add.w	r0, r4, #11
 800455e:	1d23      	adds	r3, r4, #4
 8004560:	f020 0007 	bic.w	r0, r0, #7
 8004564:	1ac2      	subs	r2, r0, r3
 8004566:	bf1c      	itt	ne
 8004568:	1a1b      	subne	r3, r3, r0
 800456a:	50a3      	strne	r3, [r4, r2]
 800456c:	e7af      	b.n	80044ce <_malloc_r+0x22>
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	42a3      	cmp	r3, r4
 8004572:	bf0c      	ite	eq
 8004574:	f8c8 2000 	streq.w	r2, [r8]
 8004578:	605a      	strne	r2, [r3, #4]
 800457a:	e7eb      	b.n	8004554 <_malloc_r+0xa8>
 800457c:	4623      	mov	r3, r4
 800457e:	6864      	ldr	r4, [r4, #4]
 8004580:	e7ae      	b.n	80044e0 <_malloc_r+0x34>
 8004582:	463c      	mov	r4, r7
 8004584:	687f      	ldr	r7, [r7, #4]
 8004586:	e7b6      	b.n	80044f6 <_malloc_r+0x4a>
 8004588:	461a      	mov	r2, r3
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	42a3      	cmp	r3, r4
 800458e:	d1fb      	bne.n	8004588 <_malloc_r+0xdc>
 8004590:	2300      	movs	r3, #0
 8004592:	6053      	str	r3, [r2, #4]
 8004594:	e7de      	b.n	8004554 <_malloc_r+0xa8>
 8004596:	230c      	movs	r3, #12
 8004598:	4630      	mov	r0, r6
 800459a:	6033      	str	r3, [r6, #0]
 800459c:	f000 f80c 	bl	80045b8 <__malloc_unlock>
 80045a0:	e794      	b.n	80044cc <_malloc_r+0x20>
 80045a2:	6005      	str	r5, [r0, #0]
 80045a4:	e7d6      	b.n	8004554 <_malloc_r+0xa8>
 80045a6:	bf00      	nop
 80045a8:	200002d8 	.word	0x200002d8

080045ac <__malloc_lock>:
 80045ac:	4801      	ldr	r0, [pc, #4]	@ (80045b4 <__malloc_lock+0x8>)
 80045ae:	f7ff bf11 	b.w	80043d4 <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	200002d0 	.word	0x200002d0

080045b8 <__malloc_unlock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	@ (80045c0 <__malloc_unlock+0x8>)
 80045ba:	f7ff bf0c 	b.w	80043d6 <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	200002d0 	.word	0x200002d0

080045c4 <__ssputs_r>:
 80045c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	461f      	mov	r7, r3
 80045ca:	688e      	ldr	r6, [r1, #8]
 80045cc:	4682      	mov	sl, r0
 80045ce:	42be      	cmp	r6, r7
 80045d0:	460c      	mov	r4, r1
 80045d2:	4690      	mov	r8, r2
 80045d4:	680b      	ldr	r3, [r1, #0]
 80045d6:	d82d      	bhi.n	8004634 <__ssputs_r+0x70>
 80045d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045e0:	d026      	beq.n	8004630 <__ssputs_r+0x6c>
 80045e2:	6965      	ldr	r5, [r4, #20]
 80045e4:	6909      	ldr	r1, [r1, #16]
 80045e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ea:	eba3 0901 	sub.w	r9, r3, r1
 80045ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f2:	1c7b      	adds	r3, r7, #1
 80045f4:	444b      	add	r3, r9
 80045f6:	106d      	asrs	r5, r5, #1
 80045f8:	429d      	cmp	r5, r3
 80045fa:	bf38      	it	cc
 80045fc:	461d      	movcc	r5, r3
 80045fe:	0553      	lsls	r3, r2, #21
 8004600:	d527      	bpl.n	8004652 <__ssputs_r+0x8e>
 8004602:	4629      	mov	r1, r5
 8004604:	f7ff ff52 	bl	80044ac <_malloc_r>
 8004608:	4606      	mov	r6, r0
 800460a:	b360      	cbz	r0, 8004666 <__ssputs_r+0xa2>
 800460c:	464a      	mov	r2, r9
 800460e:	6921      	ldr	r1, [r4, #16]
 8004610:	f000 fafa 	bl	8004c08 <memcpy>
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800461a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	6126      	str	r6, [r4, #16]
 8004622:	444e      	add	r6, r9
 8004624:	6026      	str	r6, [r4, #0]
 8004626:	463e      	mov	r6, r7
 8004628:	6165      	str	r5, [r4, #20]
 800462a:	eba5 0509 	sub.w	r5, r5, r9
 800462e:	60a5      	str	r5, [r4, #8]
 8004630:	42be      	cmp	r6, r7
 8004632:	d900      	bls.n	8004636 <__ssputs_r+0x72>
 8004634:	463e      	mov	r6, r7
 8004636:	4632      	mov	r2, r6
 8004638:	4641      	mov	r1, r8
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	f000 faac 	bl	8004b98 <memmove>
 8004640:	2000      	movs	r0, #0
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	1b9b      	subs	r3, r3, r6
 8004646:	60a3      	str	r3, [r4, #8]
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	4433      	add	r3, r6
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	462a      	mov	r2, r5
 8004654:	f000 fae6 	bl	8004c24 <_realloc_r>
 8004658:	4606      	mov	r6, r0
 800465a:	2800      	cmp	r0, #0
 800465c:	d1e0      	bne.n	8004620 <__ssputs_r+0x5c>
 800465e:	4650      	mov	r0, sl
 8004660:	6921      	ldr	r1, [r4, #16]
 8004662:	f7ff feb9 	bl	80043d8 <_free_r>
 8004666:	230c      	movs	r3, #12
 8004668:	f8ca 3000 	str.w	r3, [sl]
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
 8004672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	e7e9      	b.n	800464e <__ssputs_r+0x8a>
	...

0800467c <_svfiprintf_r>:
 800467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	4698      	mov	r8, r3
 8004682:	898b      	ldrh	r3, [r1, #12]
 8004684:	4607      	mov	r7, r0
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	460d      	mov	r5, r1
 800468a:	4614      	mov	r4, r2
 800468c:	b09d      	sub	sp, #116	@ 0x74
 800468e:	d510      	bpl.n	80046b2 <_svfiprintf_r+0x36>
 8004690:	690b      	ldr	r3, [r1, #16]
 8004692:	b973      	cbnz	r3, 80046b2 <_svfiprintf_r+0x36>
 8004694:	2140      	movs	r1, #64	@ 0x40
 8004696:	f7ff ff09 	bl	80044ac <_malloc_r>
 800469a:	6028      	str	r0, [r5, #0]
 800469c:	6128      	str	r0, [r5, #16]
 800469e:	b930      	cbnz	r0, 80046ae <_svfiprintf_r+0x32>
 80046a0:	230c      	movs	r3, #12
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	b01d      	add	sp, #116	@ 0x74
 80046aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ae:	2340      	movs	r3, #64	@ 0x40
 80046b0:	616b      	str	r3, [r5, #20]
 80046b2:	2300      	movs	r3, #0
 80046b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b6:	2320      	movs	r3, #32
 80046b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046bc:	2330      	movs	r3, #48	@ 0x30
 80046be:	f04f 0901 	mov.w	r9, #1
 80046c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004860 <_svfiprintf_r+0x1e4>
 80046ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046ce:	4623      	mov	r3, r4
 80046d0:	469a      	mov	sl, r3
 80046d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046d6:	b10a      	cbz	r2, 80046dc <_svfiprintf_r+0x60>
 80046d8:	2a25      	cmp	r2, #37	@ 0x25
 80046da:	d1f9      	bne.n	80046d0 <_svfiprintf_r+0x54>
 80046dc:	ebba 0b04 	subs.w	fp, sl, r4
 80046e0:	d00b      	beq.n	80046fa <_svfiprintf_r+0x7e>
 80046e2:	465b      	mov	r3, fp
 80046e4:	4622      	mov	r2, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	4638      	mov	r0, r7
 80046ea:	f7ff ff6b 	bl	80045c4 <__ssputs_r>
 80046ee:	3001      	adds	r0, #1
 80046f0:	f000 80a7 	beq.w	8004842 <_svfiprintf_r+0x1c6>
 80046f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046f6:	445a      	add	r2, fp
 80046f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80046fa:	f89a 3000 	ldrb.w	r3, [sl]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 809f 	beq.w	8004842 <_svfiprintf_r+0x1c6>
 8004704:	2300      	movs	r3, #0
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800470e:	f10a 0a01 	add.w	sl, sl, #1
 8004712:	9304      	str	r3, [sp, #16]
 8004714:	9307      	str	r3, [sp, #28]
 8004716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800471a:	931a      	str	r3, [sp, #104]	@ 0x68
 800471c:	4654      	mov	r4, sl
 800471e:	2205      	movs	r2, #5
 8004720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004724:	484e      	ldr	r0, [pc, #312]	@ (8004860 <_svfiprintf_r+0x1e4>)
 8004726:	f000 fa61 	bl	8004bec <memchr>
 800472a:	9a04      	ldr	r2, [sp, #16]
 800472c:	b9d8      	cbnz	r0, 8004766 <_svfiprintf_r+0xea>
 800472e:	06d0      	lsls	r0, r2, #27
 8004730:	bf44      	itt	mi
 8004732:	2320      	movmi	r3, #32
 8004734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004738:	0711      	lsls	r1, r2, #28
 800473a:	bf44      	itt	mi
 800473c:	232b      	movmi	r3, #43	@ 0x2b
 800473e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004742:	f89a 3000 	ldrb.w	r3, [sl]
 8004746:	2b2a      	cmp	r3, #42	@ 0x2a
 8004748:	d015      	beq.n	8004776 <_svfiprintf_r+0xfa>
 800474a:	4654      	mov	r4, sl
 800474c:	2000      	movs	r0, #0
 800474e:	f04f 0c0a 	mov.w	ip, #10
 8004752:	9a07      	ldr	r2, [sp, #28]
 8004754:	4621      	mov	r1, r4
 8004756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475a:	3b30      	subs	r3, #48	@ 0x30
 800475c:	2b09      	cmp	r3, #9
 800475e:	d94b      	bls.n	80047f8 <_svfiprintf_r+0x17c>
 8004760:	b1b0      	cbz	r0, 8004790 <_svfiprintf_r+0x114>
 8004762:	9207      	str	r2, [sp, #28]
 8004764:	e014      	b.n	8004790 <_svfiprintf_r+0x114>
 8004766:	eba0 0308 	sub.w	r3, r0, r8
 800476a:	fa09 f303 	lsl.w	r3, r9, r3
 800476e:	4313      	orrs	r3, r2
 8004770:	46a2      	mov	sl, r4
 8004772:	9304      	str	r3, [sp, #16]
 8004774:	e7d2      	b.n	800471c <_svfiprintf_r+0xa0>
 8004776:	9b03      	ldr	r3, [sp, #12]
 8004778:	1d19      	adds	r1, r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	9103      	str	r1, [sp, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfbb      	ittet	lt
 8004782:	425b      	neglt	r3, r3
 8004784:	f042 0202 	orrlt.w	r2, r2, #2
 8004788:	9307      	strge	r3, [sp, #28]
 800478a:	9307      	strlt	r3, [sp, #28]
 800478c:	bfb8      	it	lt
 800478e:	9204      	strlt	r2, [sp, #16]
 8004790:	7823      	ldrb	r3, [r4, #0]
 8004792:	2b2e      	cmp	r3, #46	@ 0x2e
 8004794:	d10a      	bne.n	80047ac <_svfiprintf_r+0x130>
 8004796:	7863      	ldrb	r3, [r4, #1]
 8004798:	2b2a      	cmp	r3, #42	@ 0x2a
 800479a:	d132      	bne.n	8004802 <_svfiprintf_r+0x186>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	3402      	adds	r4, #2
 80047a0:	1d1a      	adds	r2, r3, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	9203      	str	r2, [sp, #12]
 80047a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004864 <_svfiprintf_r+0x1e8>
 80047b0:	2203      	movs	r2, #3
 80047b2:	4650      	mov	r0, sl
 80047b4:	7821      	ldrb	r1, [r4, #0]
 80047b6:	f000 fa19 	bl	8004bec <memchr>
 80047ba:	b138      	cbz	r0, 80047cc <_svfiprintf_r+0x150>
 80047bc:	2240      	movs	r2, #64	@ 0x40
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	eba0 000a 	sub.w	r0, r0, sl
 80047c4:	4082      	lsls	r2, r0
 80047c6:	4313      	orrs	r3, r2
 80047c8:	3401      	adds	r4, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	2206      	movs	r2, #6
 80047d2:	4825      	ldr	r0, [pc, #148]	@ (8004868 <_svfiprintf_r+0x1ec>)
 80047d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047d8:	f000 fa08 	bl	8004bec <memchr>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d036      	beq.n	800484e <_svfiprintf_r+0x1d2>
 80047e0:	4b22      	ldr	r3, [pc, #136]	@ (800486c <_svfiprintf_r+0x1f0>)
 80047e2:	bb1b      	cbnz	r3, 800482c <_svfiprintf_r+0x1b0>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	3307      	adds	r3, #7
 80047e8:	f023 0307 	bic.w	r3, r3, #7
 80047ec:	3308      	adds	r3, #8
 80047ee:	9303      	str	r3, [sp, #12]
 80047f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f2:	4433      	add	r3, r6
 80047f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f6:	e76a      	b.n	80046ce <_svfiprintf_r+0x52>
 80047f8:	460c      	mov	r4, r1
 80047fa:	2001      	movs	r0, #1
 80047fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004800:	e7a8      	b.n	8004754 <_svfiprintf_r+0xd8>
 8004802:	2300      	movs	r3, #0
 8004804:	f04f 0c0a 	mov.w	ip, #10
 8004808:	4619      	mov	r1, r3
 800480a:	3401      	adds	r4, #1
 800480c:	9305      	str	r3, [sp, #20]
 800480e:	4620      	mov	r0, r4
 8004810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004814:	3a30      	subs	r2, #48	@ 0x30
 8004816:	2a09      	cmp	r2, #9
 8004818:	d903      	bls.n	8004822 <_svfiprintf_r+0x1a6>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0c6      	beq.n	80047ac <_svfiprintf_r+0x130>
 800481e:	9105      	str	r1, [sp, #20]
 8004820:	e7c4      	b.n	80047ac <_svfiprintf_r+0x130>
 8004822:	4604      	mov	r4, r0
 8004824:	2301      	movs	r3, #1
 8004826:	fb0c 2101 	mla	r1, ip, r1, r2
 800482a:	e7f0      	b.n	800480e <_svfiprintf_r+0x192>
 800482c:	ab03      	add	r3, sp, #12
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	462a      	mov	r2, r5
 8004832:	4638      	mov	r0, r7
 8004834:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <_svfiprintf_r+0x1f4>)
 8004836:	a904      	add	r1, sp, #16
 8004838:	f3af 8000 	nop.w
 800483c:	1c42      	adds	r2, r0, #1
 800483e:	4606      	mov	r6, r0
 8004840:	d1d6      	bne.n	80047f0 <_svfiprintf_r+0x174>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	065b      	lsls	r3, r3, #25
 8004846:	f53f af2d 	bmi.w	80046a4 <_svfiprintf_r+0x28>
 800484a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800484c:	e72c      	b.n	80046a8 <_svfiprintf_r+0x2c>
 800484e:	ab03      	add	r3, sp, #12
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	462a      	mov	r2, r5
 8004854:	4638      	mov	r0, r7
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <_svfiprintf_r+0x1f4>)
 8004858:	a904      	add	r1, sp, #16
 800485a:	f000 f87d 	bl	8004958 <_printf_i>
 800485e:	e7ed      	b.n	800483c <_svfiprintf_r+0x1c0>
 8004860:	08004d0a 	.word	0x08004d0a
 8004864:	08004d10 	.word	0x08004d10
 8004868:	08004d14 	.word	0x08004d14
 800486c:	00000000 	.word	0x00000000
 8004870:	080045c5 	.word	0x080045c5

08004874 <_printf_common>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	4616      	mov	r6, r2
 800487a:	4698      	mov	r8, r3
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	690b      	ldr	r3, [r1, #16]
 8004880:	4607      	mov	r7, r0
 8004882:	4293      	cmp	r3, r2
 8004884:	bfb8      	it	lt
 8004886:	4613      	movlt	r3, r2
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800488e:	460c      	mov	r4, r1
 8004890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004894:	b10a      	cbz	r2, 800489a <_printf_common+0x26>
 8004896:	3301      	adds	r3, #1
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	6833      	ldrmi	r3, [r6, #0]
 80048a2:	3302      	addmi	r3, #2
 80048a4:	6033      	strmi	r3, [r6, #0]
 80048a6:	6825      	ldr	r5, [r4, #0]
 80048a8:	f015 0506 	ands.w	r5, r5, #6
 80048ac:	d106      	bne.n	80048bc <_printf_common+0x48>
 80048ae:	f104 0a19 	add.w	sl, r4, #25
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	6832      	ldr	r2, [r6, #0]
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dc2b      	bgt.n	8004914 <_printf_common+0xa0>
 80048bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	3b00      	subs	r3, #0
 80048c4:	bf18      	it	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	0692      	lsls	r2, r2, #26
 80048ca:	d430      	bmi.n	800492e <_printf_common+0xba>
 80048cc:	4641      	mov	r1, r8
 80048ce:	4638      	mov	r0, r7
 80048d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d4:	47c8      	blx	r9
 80048d6:	3001      	adds	r0, #1
 80048d8:	d023      	beq.n	8004922 <_printf_common+0xae>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf14      	ite	ne
 80048e6:	2500      	movne	r5, #0
 80048e8:	6833      	ldreq	r3, [r6, #0]
 80048ea:	f04f 0600 	mov.w	r6, #0
 80048ee:	bf08      	it	eq
 80048f0:	68e5      	ldreq	r5, [r4, #12]
 80048f2:	f104 041a 	add.w	r4, r4, #26
 80048f6:	bf08      	it	eq
 80048f8:	1aed      	subeq	r5, r5, r3
 80048fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048fe:	bf08      	it	eq
 8004900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004904:	4293      	cmp	r3, r2
 8004906:	bfc4      	itt	gt
 8004908:	1a9b      	subgt	r3, r3, r2
 800490a:	18ed      	addgt	r5, r5, r3
 800490c:	42b5      	cmp	r5, r6
 800490e:	d11a      	bne.n	8004946 <_printf_common+0xd2>
 8004910:	2000      	movs	r0, #0
 8004912:	e008      	b.n	8004926 <_printf_common+0xb2>
 8004914:	2301      	movs	r3, #1
 8004916:	4652      	mov	r2, sl
 8004918:	4641      	mov	r1, r8
 800491a:	4638      	mov	r0, r7
 800491c:	47c8      	blx	r9
 800491e:	3001      	adds	r0, #1
 8004920:	d103      	bne.n	800492a <_printf_common+0xb6>
 8004922:	f04f 30ff 	mov.w	r0, #4294967295
 8004926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492a:	3501      	adds	r5, #1
 800492c:	e7c1      	b.n	80048b2 <_printf_common+0x3e>
 800492e:	2030      	movs	r0, #48	@ 0x30
 8004930:	18e1      	adds	r1, r4, r3
 8004932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800493c:	4422      	add	r2, r4
 800493e:	3302      	adds	r3, #2
 8004940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004944:	e7c2      	b.n	80048cc <_printf_common+0x58>
 8004946:	2301      	movs	r3, #1
 8004948:	4622      	mov	r2, r4
 800494a:	4641      	mov	r1, r8
 800494c:	4638      	mov	r0, r7
 800494e:	47c8      	blx	r9
 8004950:	3001      	adds	r0, #1
 8004952:	d0e6      	beq.n	8004922 <_printf_common+0xae>
 8004954:	3601      	adds	r6, #1
 8004956:	e7d9      	b.n	800490c <_printf_common+0x98>

08004958 <_printf_i>:
 8004958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	7e0f      	ldrb	r7, [r1, #24]
 800495e:	4691      	mov	r9, r2
 8004960:	2f78      	cmp	r7, #120	@ 0x78
 8004962:	4680      	mov	r8, r0
 8004964:	460c      	mov	r4, r1
 8004966:	469a      	mov	sl, r3
 8004968:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800496a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800496e:	d807      	bhi.n	8004980 <_printf_i+0x28>
 8004970:	2f62      	cmp	r7, #98	@ 0x62
 8004972:	d80a      	bhi.n	800498a <_printf_i+0x32>
 8004974:	2f00      	cmp	r7, #0
 8004976:	f000 80d3 	beq.w	8004b20 <_printf_i+0x1c8>
 800497a:	2f58      	cmp	r7, #88	@ 0x58
 800497c:	f000 80ba 	beq.w	8004af4 <_printf_i+0x19c>
 8004980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004988:	e03a      	b.n	8004a00 <_printf_i+0xa8>
 800498a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800498e:	2b15      	cmp	r3, #21
 8004990:	d8f6      	bhi.n	8004980 <_printf_i+0x28>
 8004992:	a101      	add	r1, pc, #4	@ (adr r1, 8004998 <_printf_i+0x40>)
 8004994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004998:	080049f1 	.word	0x080049f1
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004981 	.word	0x08004981
 80049a4:	08004981 	.word	0x08004981
 80049a8:	08004981 	.word	0x08004981
 80049ac:	08004981 	.word	0x08004981
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004981 	.word	0x08004981
 80049b8:	08004981 	.word	0x08004981
 80049bc:	08004981 	.word	0x08004981
 80049c0:	08004981 	.word	0x08004981
 80049c4:	08004b07 	.word	0x08004b07
 80049c8:	08004a2f 	.word	0x08004a2f
 80049cc:	08004ac1 	.word	0x08004ac1
 80049d0:	08004981 	.word	0x08004981
 80049d4:	08004981 	.word	0x08004981
 80049d8:	08004b29 	.word	0x08004b29
 80049dc:	08004981 	.word	0x08004981
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004981 	.word	0x08004981
 80049e8:	08004981 	.word	0x08004981
 80049ec:	08004ac9 	.word	0x08004ac9
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6032      	str	r2, [r6, #0]
 80049f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a00:	2301      	movs	r3, #1
 8004a02:	e09e      	b.n	8004b42 <_printf_i+0x1ea>
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6031      	str	r1, [r6, #0]
 8004a0c:	0606      	lsls	r6, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xbc>
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	e003      	b.n	8004a1c <_printf_i+0xc4>
 8004a14:	0645      	lsls	r5, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xb8>
 8004a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xd0>
 8004a20:	232d      	movs	r3, #45	@ 0x2d
 8004a22:	426d      	negs	r5, r5
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a28:	230a      	movs	r3, #10
 8004a2a:	4859      	ldr	r0, [pc, #356]	@ (8004b90 <_printf_i+0x238>)
 8004a2c:	e011      	b.n	8004a52 <_printf_i+0xfa>
 8004a2e:	6821      	ldr	r1, [r4, #0]
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	0608      	lsls	r0, r1, #24
 8004a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a38:	d402      	bmi.n	8004a40 <_printf_i+0xe8>
 8004a3a:	0649      	lsls	r1, r1, #25
 8004a3c:	bf48      	it	mi
 8004a3e:	b2ad      	uxthmi	r5, r5
 8004a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a42:	6033      	str	r3, [r6, #0]
 8004a44:	bf14      	ite	ne
 8004a46:	230a      	movne	r3, #10
 8004a48:	2308      	moveq	r3, #8
 8004a4a:	4851      	ldr	r0, [pc, #324]	@ (8004b90 <_printf_i+0x238>)
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a52:	6866      	ldr	r6, [r4, #4]
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	bfa8      	it	ge
 8004a58:	6821      	ldrge	r1, [r4, #0]
 8004a5a:	60a6      	str	r6, [r4, #8]
 8004a5c:	bfa4      	itt	ge
 8004a5e:	f021 0104 	bicge.w	r1, r1, #4
 8004a62:	6021      	strge	r1, [r4, #0]
 8004a64:	b90d      	cbnz	r5, 8004a6a <_printf_i+0x112>
 8004a66:	2e00      	cmp	r6, #0
 8004a68:	d04b      	beq.n	8004b02 <_printf_i+0x1aa>
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a70:	fb03 5711 	mls	r7, r3, r1, r5
 8004a74:	5dc7      	ldrb	r7, [r0, r7]
 8004a76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a7a:	462f      	mov	r7, r5
 8004a7c:	42bb      	cmp	r3, r7
 8004a7e:	460d      	mov	r5, r1
 8004a80:	d9f4      	bls.n	8004a6c <_printf_i+0x114>
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d10b      	bne.n	8004a9e <_printf_i+0x146>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	07df      	lsls	r7, r3, #31
 8004a8a:	d508      	bpl.n	8004a9e <_printf_i+0x146>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	6861      	ldr	r1, [r4, #4]
 8004a90:	4299      	cmp	r1, r3
 8004a92:	bfde      	ittt	le
 8004a94:	2330      	movle	r3, #48	@ 0x30
 8004a96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a9e:	1b92      	subs	r2, r2, r6
 8004aa0:	6122      	str	r2, [r4, #16]
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f8cd a000 	str.w	sl, [sp]
 8004aac:	aa03      	add	r2, sp, #12
 8004aae:	f7ff fee1 	bl	8004874 <_printf_common>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d14a      	bne.n	8004b4c <_printf_i+0x1f4>
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aba:	b004      	add	sp, #16
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f043 0320 	orr.w	r3, r3, #32
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	2778      	movs	r7, #120	@ 0x78
 8004aca:	4832      	ldr	r0, [pc, #200]	@ (8004b94 <_printf_i+0x23c>)
 8004acc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	6831      	ldr	r1, [r6, #0]
 8004ad4:	061f      	lsls	r7, r3, #24
 8004ad6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ada:	d402      	bmi.n	8004ae2 <_printf_i+0x18a>
 8004adc:	065f      	lsls	r7, r3, #25
 8004ade:	bf48      	it	mi
 8004ae0:	b2ad      	uxthmi	r5, r5
 8004ae2:	6031      	str	r1, [r6, #0]
 8004ae4:	07d9      	lsls	r1, r3, #31
 8004ae6:	bf44      	itt	mi
 8004ae8:	f043 0320 	orrmi.w	r3, r3, #32
 8004aec:	6023      	strmi	r3, [r4, #0]
 8004aee:	b11d      	cbz	r5, 8004af8 <_printf_i+0x1a0>
 8004af0:	2310      	movs	r3, #16
 8004af2:	e7ab      	b.n	8004a4c <_printf_i+0xf4>
 8004af4:	4826      	ldr	r0, [pc, #152]	@ (8004b90 <_printf_i+0x238>)
 8004af6:	e7e9      	b.n	8004acc <_printf_i+0x174>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	e7f6      	b.n	8004af0 <_printf_i+0x198>
 8004b02:	4616      	mov	r6, r2
 8004b04:	e7bd      	b.n	8004a82 <_printf_i+0x12a>
 8004b06:	6833      	ldr	r3, [r6, #0]
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6961      	ldr	r1, [r4, #20]
 8004b0e:	6030      	str	r0, [r6, #0]
 8004b10:	062e      	lsls	r6, r5, #24
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	d501      	bpl.n	8004b1a <_printf_i+0x1c2>
 8004b16:	6019      	str	r1, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <_printf_i+0x1c8>
 8004b1a:	0668      	lsls	r0, r5, #25
 8004b1c:	d5fb      	bpl.n	8004b16 <_printf_i+0x1be>
 8004b1e:	8019      	strh	r1, [r3, #0]
 8004b20:	2300      	movs	r3, #0
 8004b22:	4616      	mov	r6, r2
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	e7bc      	b.n	8004aa2 <_printf_i+0x14a>
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	1d1a      	adds	r2, r3, #4
 8004b2e:	6032      	str	r2, [r6, #0]
 8004b30:	681e      	ldr	r6, [r3, #0]
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f859 	bl	8004bec <memchr>
 8004b3a:	b108      	cbz	r0, 8004b40 <_printf_i+0x1e8>
 8004b3c:	1b80      	subs	r0, r0, r6
 8004b3e:	6060      	str	r0, [r4, #4]
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	2300      	movs	r3, #0
 8004b46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b4a:	e7aa      	b.n	8004aa2 <_printf_i+0x14a>
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	47d0      	blx	sl
 8004b56:	3001      	adds	r0, #1
 8004b58:	d0ad      	beq.n	8004ab6 <_printf_i+0x15e>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	079b      	lsls	r3, r3, #30
 8004b5e:	d413      	bmi.n	8004b88 <_printf_i+0x230>
 8004b60:	68e0      	ldr	r0, [r4, #12]
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	4298      	cmp	r0, r3
 8004b66:	bfb8      	it	lt
 8004b68:	4618      	movlt	r0, r3
 8004b6a:	e7a6      	b.n	8004aba <_printf_i+0x162>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4649      	mov	r1, r9
 8004b72:	4640      	mov	r0, r8
 8004b74:	47d0      	blx	sl
 8004b76:	3001      	adds	r0, #1
 8004b78:	d09d      	beq.n	8004ab6 <_printf_i+0x15e>
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	68e3      	ldr	r3, [r4, #12]
 8004b7e:	9903      	ldr	r1, [sp, #12]
 8004b80:	1a5b      	subs	r3, r3, r1
 8004b82:	42ab      	cmp	r3, r5
 8004b84:	dcf2      	bgt.n	8004b6c <_printf_i+0x214>
 8004b86:	e7eb      	b.n	8004b60 <_printf_i+0x208>
 8004b88:	2500      	movs	r5, #0
 8004b8a:	f104 0619 	add.w	r6, r4, #25
 8004b8e:	e7f5      	b.n	8004b7c <_printf_i+0x224>
 8004b90:	08004d1b 	.word	0x08004d1b
 8004b94:	08004d2c 	.word	0x08004d2c

08004b98 <memmove>:
 8004b98:	4288      	cmp	r0, r1
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	eb01 0402 	add.w	r4, r1, r2
 8004ba0:	d902      	bls.n	8004ba8 <memmove+0x10>
 8004ba2:	4284      	cmp	r4, r0
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	d807      	bhi.n	8004bb8 <memmove+0x20>
 8004ba8:	1e43      	subs	r3, r0, #1
 8004baa:	42a1      	cmp	r1, r4
 8004bac:	d008      	beq.n	8004bc0 <memmove+0x28>
 8004bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bb6:	e7f8      	b.n	8004baa <memmove+0x12>
 8004bb8:	4601      	mov	r1, r0
 8004bba:	4402      	add	r2, r0
 8004bbc:	428a      	cmp	r2, r1
 8004bbe:	d100      	bne.n	8004bc2 <memmove+0x2a>
 8004bc0:	bd10      	pop	{r4, pc}
 8004bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bca:	e7f7      	b.n	8004bbc <memmove+0x24>

08004bcc <_sbrk_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4d05      	ldr	r5, [pc, #20]	@ (8004be8 <_sbrk_r+0x1c>)
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fb fe36 	bl	8000848 <_sbrk>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_sbrk_r+0x1a>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_sbrk_r+0x1a>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	200002cc 	.word	0x200002cc

08004bec <memchr>:
 8004bec:	4603      	mov	r3, r0
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	b2c9      	uxtb	r1, r1
 8004bf2:	4402      	add	r2, r0
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	d101      	bne.n	8004bfe <memchr+0x12>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e003      	b.n	8004c06 <memchr+0x1a>
 8004bfe:	7804      	ldrb	r4, [r0, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	428c      	cmp	r4, r1
 8004c04:	d1f6      	bne.n	8004bf4 <memchr+0x8>
 8004c06:	bd10      	pop	{r4, pc}

08004c08 <memcpy>:
 8004c08:	440a      	add	r2, r1
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c10:	d100      	bne.n	8004c14 <memcpy+0xc>
 8004c12:	4770      	bx	lr
 8004c14:	b510      	push	{r4, lr}
 8004c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c20:	d1f9      	bne.n	8004c16 <memcpy+0xe>
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <_realloc_r>:
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	4680      	mov	r8, r0
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	b921      	cbnz	r1, 8004c3a <_realloc_r+0x16>
 8004c30:	4611      	mov	r1, r2
 8004c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c36:	f7ff bc39 	b.w	80044ac <_malloc_r>
 8004c3a:	b92a      	cbnz	r2, 8004c48 <_realloc_r+0x24>
 8004c3c:	f7ff fbcc 	bl	80043d8 <_free_r>
 8004c40:	2400      	movs	r4, #0
 8004c42:	4620      	mov	r0, r4
 8004c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c48:	f000 f81a 	bl	8004c80 <_malloc_usable_size_r>
 8004c4c:	4285      	cmp	r5, r0
 8004c4e:	4606      	mov	r6, r0
 8004c50:	d802      	bhi.n	8004c58 <_realloc_r+0x34>
 8004c52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c56:	d8f4      	bhi.n	8004c42 <_realloc_r+0x1e>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	f7ff fc26 	bl	80044ac <_malloc_r>
 8004c60:	4607      	mov	r7, r0
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0ec      	beq.n	8004c40 <_realloc_r+0x1c>
 8004c66:	42b5      	cmp	r5, r6
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	bf28      	it	cs
 8004c6e:	4632      	movcs	r2, r6
 8004c70:	f7ff ffca 	bl	8004c08 <memcpy>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7ff fbae 	bl	80043d8 <_free_r>
 8004c7c:	463c      	mov	r4, r7
 8004c7e:	e7e0      	b.n	8004c42 <_realloc_r+0x1e>

08004c80 <_malloc_usable_size_r>:
 8004c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c84:	1f18      	subs	r0, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfbc      	itt	lt
 8004c8a:	580b      	ldrlt	r3, [r1, r0]
 8004c8c:	18c0      	addlt	r0, r0, r3
 8004c8e:	4770      	bx	lr

08004c90 <_init>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr

08004c9c <_fini>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

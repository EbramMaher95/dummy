
pet-food-dispenser2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00006098  2**0
                  CONTENTS
  4 .ARM          00000008  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f08  08004f08  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08004f10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000098  08004fa8  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004fa8  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c72a  00000000  00000000  000060c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002103  00000000  00000000  000127eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000148f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a92  00000000  00000000  00015690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f5  00000000  00000000  00016122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112c0  00000000  00000000  0002e817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac62  00000000  00000000  0003fad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000ca77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000ce540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e44 	.word	0x08004e44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08004e44 	.word	0x08004e44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b09c      	sub	sp, #112	@ 0x70
 8000160:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f001 f8c1 	bl	80012e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 fa0d 	bl	8000584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 fb03 	bl	8000774 <MX_GPIO_Init>
	MX_TIM1_Init();
 800016e:	f000 fa7d 	bl	800066c <MX_TIM1_Init>
	MX_I2C2_Init();
 8000172:	f000 fa4d 	bl	8000610 <MX_I2C2_Init>
	//initialize device drivers
	//first we initialize the lcd to display the updates
	//the LCD will be connected to: --> can be found in line 32 in the main.c file
	//A0,1,2,3 --> Data pins
	//A4:RS, A5:EN
	Alcd_Init(&lcd, 2, 16);
 8000176:	2210      	movs	r2, #16
 8000178:	2102      	movs	r1, #2
 800017a:	489c      	ldr	r0, [pc, #624]	@ (80003ec <main+0x290>)
 800017c:	f000 fe7e 	bl	8000e7c <Alcd_Init>

	//clear display
	Alcd_Clear(&lcd);
 8000180:	489a      	ldr	r0, [pc, #616]	@ (80003ec <main+0x290>)
 8000182:	f000 ff4f 	bl	8001024 <Alcd_Clear>

	Keypad_Init(&kp);
 8000186:	489a      	ldr	r0, [pc, #616]	@ (80003f0 <main+0x294>)
 8000188:	f001 f832 	bl	80011f0 <Keypad_Init>

	//initialize the RTC
	Ds1307_init(&CLK, &hi2c2);
 800018c:	4999      	ldr	r1, [pc, #612]	@ (80003f4 <main+0x298>)
 800018e:	489a      	ldr	r0, [pc, #616]	@ (80003f8 <main+0x29c>)
 8000190:	f000 fd47 	bl	8000c22 <Ds1307_init>

	//initialize the eeprom
	eeprom24c32_init(&memory, &hi2c2);
 8000194:	4997      	ldr	r1, [pc, #604]	@ (80003f4 <main+0x298>)
 8000196:	4899      	ldr	r0, [pc, #612]	@ (80003fc <main+0x2a0>)
 8000198:	f000 fcae 	bl	8000af8 <eeprom24c32_init>

	//to initiate the base (counter)
	HAL_TIM_Base_Start(&htim1);
 800019c:	4898      	ldr	r0, [pc, #608]	@ (8000400 <main+0x2a4>)
 800019e:	f003 fcc5 	bl	8003b2c <HAL_TIM_Base_Start>

	//enable the OC pin (PWM pin)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001a2:	2100      	movs	r1, #0
 80001a4:	4896      	ldr	r0, [pc, #600]	@ (8000400 <main+0x2a4>)
 80001a6:	f003 fd5b 	bl	8003c60 <HAL_TIM_PWM_Start>

	//to change the duty cycle -> CCR
	//range is from 999 to 1999 (according to calculations)

	//the servo is set at 0 degree upon starting
	TIM1->CCR1 = 999;
 80001aa:	4b96      	ldr	r3, [pc, #600]	@ (8000404 <main+0x2a8>)
 80001ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001b0:	635a      	str	r2, [r3, #52]	@ 0x34

	//a flag if button is pressed
	uint8_t password_comp_flag, error_code, delay_flag;
	int8_t status;
	password_comp_flag = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	status = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	error_code = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	uint8_t dose_h, dose_m, dose_s, dose_num;

	//finite state machine section
	uint32_t current_tick;

	uint32_t dosing_tick = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	657b      	str	r3, [r7, #84]	@ 0x54

	// a string to save the RTC time
	char timeString[50];

	/*password section*/
	char menu_pass[] = "1234";
 80001c8:	4a8f      	ldr	r2, [pc, #572]	@ (8000408 <main+0x2ac>)
 80001ca:	f107 0314 	add.w	r3, r7, #20
 80001ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001d2:	6018      	str	r0, [r3, #0]
 80001d4:	3304      	adds	r3, #4
 80001d6:	7019      	strb	r1, [r3, #0]
	char entered_password[5] = ""; // User input buffer (4 digits + null terminator)
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	2300      	movs	r3, #0
 80001de:	743b      	strb	r3, [r7, #16]
	char time_date_buffer[5];
	uint16_t buffer;
	uint8_t input_index = 0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	general_delay = HAL_GetTick() + 250;
 80001e6:	f001 f8d7 	bl	8001398 <HAL_GetTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	33fa      	adds	r3, #250	@ 0xfa
 80001ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//get the current tick number
		current_tick = HAL_GetTick();
 80001f0:	f001 f8d2 	bl	8001398 <HAL_GetTick>
 80001f4:	6638      	str	r0, [r7, #96]	@ 0x60
		//view the time parameters -> status 14
		while ((status == 0) && (current_tick >= general_delay)) {
 80001f6:	e09c      	b.n	8000332 <main+0x1d6>

			//get the current tick number
			current_tick = HAL_GetTick();
 80001f8:	f001 f8ce 	bl	8001398 <HAL_GetTick>
 80001fc:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 80001fe:	487b      	ldr	r0, [pc, #492]	@ (80003ec <main+0x290>)
 8000200:	f000 ff10 	bl	8001024 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "Dose @");
 8000204:	4881      	ldr	r0, [pc, #516]	@ (800040c <main+0x2b0>)
 8000206:	f000 ff61 	bl	80010cc <Str_Len>
 800020a:	4603      	mov	r3, r0
 800020c:	b2db      	uxtb	r3, r3
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	4b7e      	ldr	r3, [pc, #504]	@ (800040c <main+0x2b0>)
 8000212:	2200      	movs	r2, #0
 8000214:	2100      	movs	r1, #0
 8000216:	4875      	ldr	r0, [pc, #468]	@ (80003ec <main+0x290>)
 8000218:	f000 feeb 	bl	8000ff2 <Alcd_PutAt_n>

			//reading dosing hours
			eeprom24c32_read(&memory, &dose_h, dosing_time_hours);
 800021c:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8000220:	2200      	movs	r2, #0
 8000222:	4619      	mov	r1, r3
 8000224:	4875      	ldr	r0, [pc, #468]	@ (80003fc <main+0x2a0>)
 8000226:	f000 fc9d 	bl	8000b64 <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800022a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800022e:	f107 001c 	add.w	r0, r7, #28
 8000232:	4a77      	ldr	r2, [pc, #476]	@ (8000410 <main+0x2b4>)
 8000234:	2132      	movs	r1, #50	@ 0x32
 8000236:	f004 f941 	bl	80044bc <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800023a:	f107 031c 	add.w	r3, r7, #28
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff84 	bl	800014c <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b2db      	uxtb	r3, r3
 8000248:	f107 021c 	add.w	r2, r7, #28
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	4613      	mov	r3, r2
 8000250:	220e      	movs	r2, #14
 8000252:	2100      	movs	r1, #0
 8000254:	4865      	ldr	r0, [pc, #404]	@ (80003ec <main+0x290>)
 8000256:	f000 fecc 	bl	8000ff2 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d:", dose_h);
 800025a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800025e:	f107 001c 	add.w	r0, r7, #28
 8000262:	4a6c      	ldr	r2, [pc, #432]	@ (8000414 <main+0x2b8>)
 8000264:	2132      	movs	r1, #50	@ 0x32
 8000266:	f004 f929 	bl	80044bc <sniprintf>
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 800026a:	f107 031c 	add.w	r3, r7, #28
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b2db      	uxtb	r3, r3
 8000278:	f107 021c 	add.w	r2, r7, #28
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	4613      	mov	r3, r2
 8000280:	2200      	movs	r2, #0
 8000282:	2101      	movs	r1, #1
 8000284:	4859      	ldr	r0, [pc, #356]	@ (80003ec <main+0x290>)
 8000286:	f000 feb4 	bl	8000ff2 <Alcd_PutAt_n>

			eeprom24c32_read(&memory, &dose_m, dosing_time_minutes);
 800028a:	f107 0351 	add.w	r3, r7, #81	@ 0x51
 800028e:	220f      	movs	r2, #15
 8000290:	4619      	mov	r1, r3
 8000292:	485a      	ldr	r0, [pc, #360]	@ (80003fc <main+0x2a0>)
 8000294:	f000 fc66 	bl	8000b64 <eeprom24c32_read>
			snprintf(timeString, sizeof(timeString), "%02d:", dose_m);
 8000298:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800029c:	f107 001c 	add.w	r0, r7, #28
 80002a0:	4a5c      	ldr	r2, [pc, #368]	@ (8000414 <main+0x2b8>)
 80002a2:	2132      	movs	r1, #50	@ 0x32
 80002a4:	f004 f90a 	bl	80044bc <sniprintf>

			Alcd_PutAt_n(&lcd, 1, 3, timeString, strlen(timeString));
 80002a8:	f107 031c 	add.w	r3, r7, #28
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4d 	bl	800014c <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f107 021c 	add.w	r2, r7, #28
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	4613      	mov	r3, r2
 80002be:	2203      	movs	r2, #3
 80002c0:	2101      	movs	r1, #1
 80002c2:	484a      	ldr	r0, [pc, #296]	@ (80003ec <main+0x290>)
 80002c4:	f000 fe95 	bl	8000ff2 <Alcd_PutAt_n>

			eeprom24c32_read(&memory, &dose_s, dosing_time_seconds);
 80002c8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002cc:	22f0      	movs	r2, #240	@ 0xf0
 80002ce:	4619      	mov	r1, r3
 80002d0:	484a      	ldr	r0, [pc, #296]	@ (80003fc <main+0x2a0>)
 80002d2:	f000 fc47 	bl	8000b64 <eeprom24c32_read>
			snprintf(timeString, sizeof(timeString), "%02d", dose_s);
 80002d6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80002da:	f107 001c 	add.w	r0, r7, #28
 80002de:	4a4c      	ldr	r2, [pc, #304]	@ (8000410 <main+0x2b4>)
 80002e0:	2132      	movs	r1, #50	@ 0x32
 80002e2:	f004 f8eb 	bl	80044bc <sniprintf>

			Alcd_PutAt_n(&lcd, 1, 6, timeString, strlen(timeString));
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff2e 	bl	800014c <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f107 021c 	add.w	r2, r7, #28
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	4613      	mov	r3, r2
 80002fc:	2206      	movs	r2, #6
 80002fe:	2101      	movs	r1, #1
 8000300:	483a      	ldr	r0, [pc, #232]	@ (80003ec <main+0x290>)
 8000302:	f000 fe76 	bl	8000ff2 <Alcd_PutAt_n>

			//check if back or next is selected
			Keypad_Refresh(&kp);
 8000306:	483a      	ldr	r0, [pc, #232]	@ (80003f0 <main+0x294>)
 8000308:	f000 ff3a 	bl	8001180 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_save_menu)
 800030c:	210c      	movs	r1, #12
 800030e:	4838      	ldr	r0, [pc, #224]	@ (80003f0 <main+0x294>)
 8000310:	f000 ffd2 	bl	80012b8 <Keypad_Get_Key>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d006      	beq.n	8000328 <main+0x1cc>
					&& (current_tick >= general_delay)) {
 800031a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800031c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800031e:	429a      	cmp	r2, r3
 8000320:	d302      	bcc.n	8000328 <main+0x1cc>

				//back to previous menu
				status = 10;
 8000322:	230a      	movs	r3, #10
 8000324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			}

			general_delay = HAL_GetTick() + 250;
 8000328:	f001 f836 	bl	8001398 <HAL_GetTick>
 800032c:	4603      	mov	r3, r0
 800032e:	33fa      	adds	r3, #250	@ 0xfa
 8000330:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 0) && (current_tick >= general_delay)) {
 8000332:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000336:	2b00      	cmp	r3, #0
 8000338:	d14f      	bne.n	80003da <main+0x27e>
 800033a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800033c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800033e:	429a      	cmp	r2, r3
 8000340:	f4bf af5a 	bcs.w	80001f8 <main+0x9c>
		}


		while ((status == 10) && (current_tick >= general_delay)) {
 8000344:	e049      	b.n	80003da <main+0x27e>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000346:	f001 f827 	bl	8001398 <HAL_GetTick>
 800034a:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 800034c:	4827      	ldr	r0, [pc, #156]	@ (80003ec <main+0x290>)
 800034e:	f000 fe69 	bl	8001024 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "enter h:");
 8000352:	4831      	ldr	r0, [pc, #196]	@ (8000418 <main+0x2bc>)
 8000354:	f000 feba 	bl	80010cc <Str_Len>
 8000358:	4603      	mov	r3, r0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	4b2e      	ldr	r3, [pc, #184]	@ (8000418 <main+0x2bc>)
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	4821      	ldr	r0, [pc, #132]	@ (80003ec <main+0x290>)
 8000366:	f000 fe44 	bl	8000ff2 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800036a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800036e:	f107 001c 	add.w	r0, r7, #28
 8000372:	4a27      	ldr	r2, [pc, #156]	@ (8000410 <main+0x2b4>)
 8000374:	2132      	movs	r1, #50	@ 0x32
 8000376:	f004 f8a1 	bl	80044bc <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800037a:	f107 031c 	add.w	r3, r7, #28
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fee4 	bl	800014c <strlen>
 8000384:	4603      	mov	r3, r0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f107 021c 	add.w	r2, r7, #28
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	4613      	mov	r3, r2
 8000390:	220e      	movs	r2, #14
 8000392:	2100      	movs	r1, #0
 8000394:	4815      	ldr	r0, [pc, #84]	@ (80003ec <main+0x290>)
 8000396:	f000 fe2c 	bl	8000ff2 <Alcd_PutAt_n>

			Keypad_Refresh(&kp);
 800039a:	4815      	ldr	r0, [pc, #84]	@ (80003f0 <main+0x294>)
 800039c:	f000 fef0 	bl	8001180 <Keypad_Refresh>

			if (Keypad_Get_Key(&kp, kp_button_1)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4813      	ldr	r0, [pc, #76]	@ (80003f0 <main+0x294>)
 80003a4:	f000 ff88 	bl	80012b8 <Keypad_Get_Key>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d010      	beq.n	80003d0 <main+0x274>
					&& (current_tick >= general_delay)) {
 80003ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80003b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d30c      	bcc.n	80003d0 <main+0x274>

				dose_h = 12;
 80003b6:	230c      	movs	r3, #12
 80003b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

				eeprom24c32_write(&memory, &dose_h, 0x0000);
 80003bc:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 80003c0:	2200      	movs	r2, #0
 80003c2:	4619      	mov	r1, r3
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <main+0x2a0>)
 80003c6:	f000 fbaf 	bl	8000b28 <eeprom24c32_write>

				status = 11;
 80003ca:	230b      	movs	r3, #11
 80003cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			}

			general_delay = HAL_GetTick() + 250;
 80003d0:	f000 ffe2 	bl	8001398 <HAL_GetTick>
 80003d4:	4603      	mov	r3, r0
 80003d6:	33fa      	adds	r3, #250	@ 0xfa
 80003d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 10) && (current_tick >= general_delay)) {
 80003da:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80003de:	2b0a      	cmp	r3, #10
 80003e0:	d166      	bne.n	80004b0 <main+0x354>
 80003e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80003e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d2ad      	bcs.n	8000346 <main+0x1ea>
		}


		while ((status == 11) && (current_tick >= general_delay)) {
 80003ea:	e061      	b.n	80004b0 <main+0x354>
 80003ec:	2000001c 	.word	0x2000001c
 80003f0:	20000000 	.word	0x20000000
 80003f4:	200000b4 	.word	0x200000b4
 80003f8:	20000150 	.word	0x20000150
 80003fc:	20000168 	.word	0x20000168
 8000400:	20000108 	.word	0x20000108
 8000404:	40012c00 	.word	0x40012c00
 8000408:	08004e98 	.word	0x08004e98
 800040c:	08004e5c 	.word	0x08004e5c
 8000410:	08004e64 	.word	0x08004e64
 8000414:	08004e6c 	.word	0x08004e6c
 8000418:	08004e74 	.word	0x08004e74

			//get the current tick number
			current_tick = HAL_GetTick();
 800041c:	f000 ffbc 	bl	8001398 <HAL_GetTick>
 8000420:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 8000422:	4852      	ldr	r0, [pc, #328]	@ (800056c <main+0x410>)
 8000424:	f000 fdfe 	bl	8001024 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "enter m:");
 8000428:	4851      	ldr	r0, [pc, #324]	@ (8000570 <main+0x414>)
 800042a:	f000 fe4f 	bl	80010cc <Str_Len>
 800042e:	4603      	mov	r3, r0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	4b4e      	ldr	r3, [pc, #312]	@ (8000570 <main+0x414>)
 8000436:	2200      	movs	r2, #0
 8000438:	2100      	movs	r1, #0
 800043a:	484c      	ldr	r0, [pc, #304]	@ (800056c <main+0x410>)
 800043c:	f000 fdd9 	bl	8000ff2 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000440:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000444:	f107 001c 	add.w	r0, r7, #28
 8000448:	4a4a      	ldr	r2, [pc, #296]	@ (8000574 <main+0x418>)
 800044a:	2132      	movs	r1, #50	@ 0x32
 800044c:	f004 f836 	bl	80044bc <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fe79 	bl	800014c <strlen>
 800045a:	4603      	mov	r3, r0
 800045c:	b2db      	uxtb	r3, r3
 800045e:	f107 021c 	add.w	r2, r7, #28
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	4613      	mov	r3, r2
 8000466:	220e      	movs	r2, #14
 8000468:	2100      	movs	r1, #0
 800046a:	4840      	ldr	r0, [pc, #256]	@ (800056c <main+0x410>)
 800046c:	f000 fdc1 	bl	8000ff2 <Alcd_PutAt_n>

			Keypad_Refresh(&kp);
 8000470:	4841      	ldr	r0, [pc, #260]	@ (8000578 <main+0x41c>)
 8000472:	f000 fe85 	bl	8001180 <Keypad_Refresh>

			if (Keypad_Get_Key(&kp, kp_button_2)
 8000476:	2101      	movs	r1, #1
 8000478:	483f      	ldr	r0, [pc, #252]	@ (8000578 <main+0x41c>)
 800047a:	f000 ff1d 	bl	80012b8 <Keypad_Get_Key>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d010      	beq.n	80004a6 <main+0x34a>
					&& (current_tick >= general_delay)) {
 8000484:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000488:	429a      	cmp	r2, r3
 800048a:	d30c      	bcc.n	80004a6 <main+0x34a>

				dose_m = 20;
 800048c:	2314      	movs	r3, #20
 800048e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

				eeprom24c32_write(&memory, &dose_m, 0x0010);
 8000492:	f107 0351 	add.w	r3, r7, #81	@ 0x51
 8000496:	2210      	movs	r2, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4838      	ldr	r0, [pc, #224]	@ (800057c <main+0x420>)
 800049c:	f000 fb44 	bl	8000b28 <eeprom24c32_write>

				status = 12;
 80004a0:	230c      	movs	r3, #12
 80004a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			}

			general_delay = HAL_GetTick() + 250;
 80004a6:	f000 ff77 	bl	8001398 <HAL_GetTick>
 80004aa:	4603      	mov	r3, r0
 80004ac:	33fa      	adds	r3, #250	@ 0xfa
 80004ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 11) && (current_tick >= general_delay)) {
 80004b0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80004b4:	2b0b      	cmp	r3, #11
 80004b6:	d14f      	bne.n	8000558 <main+0x3fc>
 80004b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80004ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80004bc:	429a      	cmp	r2, r3
 80004be:	d2ad      	bcs.n	800041c <main+0x2c0>
		}


		while ((status == 12) && (current_tick >= general_delay)) {
 80004c0:	e04a      	b.n	8000558 <main+0x3fc>

			//get the current tick number
			current_tick = HAL_GetTick();
 80004c2:	f000 ff69 	bl	8001398 <HAL_GetTick>
 80004c6:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 80004c8:	4828      	ldr	r0, [pc, #160]	@ (800056c <main+0x410>)
 80004ca:	f000 fdab 	bl	8001024 <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "enter sec:");
 80004ce:	482c      	ldr	r0, [pc, #176]	@ (8000580 <main+0x424>)
 80004d0:	f000 fdfc 	bl	80010cc <Str_Len>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <main+0x424>)
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	4822      	ldr	r0, [pc, #136]	@ (800056c <main+0x410>)
 80004e2:	f000 fd86 	bl	8000ff2 <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 80004e6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80004ea:	f107 001c 	add.w	r0, r7, #28
 80004ee:	4a21      	ldr	r2, [pc, #132]	@ (8000574 <main+0x418>)
 80004f0:	2132      	movs	r1, #50	@ 0x32
 80004f2:	f003 ffe3 	bl	80044bc <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe26 	bl	800014c <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b2db      	uxtb	r3, r3
 8000504:	f107 021c 	add.w	r2, r7, #28
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	4613      	mov	r3, r2
 800050c:	220e      	movs	r2, #14
 800050e:	2100      	movs	r1, #0
 8000510:	4816      	ldr	r0, [pc, #88]	@ (800056c <main+0x410>)
 8000512:	f000 fd6e 	bl	8000ff2 <Alcd_PutAt_n>

			Keypad_Refresh(&kp);
 8000516:	4818      	ldr	r0, [pc, #96]	@ (8000578 <main+0x41c>)
 8000518:	f000 fe32 	bl	8001180 <Keypad_Refresh>

			if (Keypad_Get_Key(&kp, kp_button_3)
 800051c:	2102      	movs	r1, #2
 800051e:	4816      	ldr	r0, [pc, #88]	@ (8000578 <main+0x41c>)
 8000520:	f000 feca 	bl	80012b8 <Keypad_Get_Key>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d011      	beq.n	800054e <main+0x3f2>
					&& (current_tick >= general_delay)) {
 800052a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800052c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800052e:	429a      	cmp	r2, r3
 8000530:	d30d      	bcc.n	800054e <main+0x3f2>

				dose_h = 50;
 8000532:	2332      	movs	r3, #50	@ 0x32
 8000534:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

				eeprom24c32_write(&memory, &dose_s, 0x0100);
 8000538:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800053c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000540:	4619      	mov	r1, r3
 8000542:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0x420>)
 8000544:	f000 faf0 	bl	8000b28 <eeprom24c32_write>

				status = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

			}

			general_delay = HAL_GetTick() + 250;
 800054e:	f000 ff23 	bl	8001398 <HAL_GetTick>
 8000552:	4603      	mov	r3, r0
 8000554:	33fa      	adds	r3, #250	@ 0xfa
 8000556:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 12) && (current_tick >= general_delay)) {
 8000558:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800055c:	2b0c      	cmp	r3, #12
 800055e:	f47f ae47 	bne.w	80001f0 <main+0x94>
 8000562:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000566:	429a      	cmp	r2, r3
 8000568:	d2ab      	bcs.n	80004c2 <main+0x366>
		current_tick = HAL_GetTick();
 800056a:	e641      	b.n	80001f0 <main+0x94>
 800056c:	2000001c 	.word	0x2000001c
 8000570:	08004e80 	.word	0x08004e80
 8000574:	08004e64 	.word	0x08004e64
 8000578:	20000000 	.word	0x20000000
 800057c:	20000168 	.word	0x20000168
 8000580:	08004e8c 	.word	0x08004e8c

08000584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b090      	sub	sp, #64	@ 0x40
 8000588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058a:	f107 0318 	add.w	r3, r7, #24
 800058e:	2228      	movs	r2, #40	@ 0x28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 ffc6 	bl	8004524 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2302      	movs	r3, #2
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 feb1 	bl	8003334 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x58>
		Error_Handler();
 80005d8:	f000 f906 	bl	80007e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f91e 	bl	8003838 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x82>
		Error_Handler();
 8000602:	f000 f8f1 	bl	80007e8 <Error_Handler>
	}
}
 8000606:	bf00      	nop
 8000608:	3740      	adds	r7, #64	@ 0x40
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_I2C2_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <MX_I2C2_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_I2C2_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <MX_I2C2_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_I2C2_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_I2C2_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_I2C2_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_I2C2_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_I2C2_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <MX_I2C2_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_I2C2_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_I2C2_Init+0x50>)
 800064e:	f001 f951 	bl	80018f4 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000658:	f000 f8c6 	bl	80007e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000b4 	.word	0x200000b4
 8000664:	40005800 	.word	0x40005800
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b092      	sub	sp, #72	@ 0x48
 8000670:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000672:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]
 800068e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2220      	movs	r2, #32
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 ff44 	bl	8004524 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800069c:	4b33      	ldr	r3, [pc, #204]	@ (800076c <MX_TIM1_Init+0x100>)
 800069e:	4a34      	ldr	r2, [pc, #208]	@ (8000770 <MX_TIM1_Init+0x104>)
 80006a0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80006a2:	4b32      	ldr	r3, [pc, #200]	@ (800076c <MX_TIM1_Init+0x100>)
 80006a4:	2247      	movs	r2, #71	@ 0x47
 80006a6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <MX_TIM1_Init+0x100>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <MX_TIM1_Init+0x100>)
 80006b0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006b4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b6:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_TIM1_Init+0x100>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006bc:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <MX_TIM1_Init+0x100>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_TIM1_Init+0x100>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80006c8:	4828      	ldr	r0, [pc, #160]	@ (800076c <MX_TIM1_Init+0x100>)
 80006ca:	f003 fa79 	bl	8003bc0 <HAL_TIM_PWM_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x6c>
		Error_Handler();
 80006d4:	f000 f888 	bl	80007e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006e4:	4619      	mov	r1, r3
 80006e6:	4821      	ldr	r0, [pc, #132]	@ (800076c <MX_TIM1_Init+0x100>)
 80006e8:	f003 fe38 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80006f2:	f000 f879 	bl	80007e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f6:	2360      	movs	r3, #96	@ 0x60
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 1000;
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000704:	2300      	movs	r3, #0
 8000706:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	4813      	ldr	r0, [pc, #76]	@ (800076c <MX_TIM1_Init+0x100>)
 800071e:	f003 fb41 	bl	8003da4 <HAL_TIM_PWM_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 8000728:	f000 f85e 	bl	80007e8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000740:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000744:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	@ (800076c <MX_TIM1_Init+0x100>)
 8000750:	f003 fe62 	bl	8004418 <HAL_TIMEx_ConfigBreakDeadTime>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 800075a:	f000 f845 	bl	80007e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800075e:	4803      	ldr	r0, [pc, #12]	@ (800076c <MX_TIM1_Init+0x100>)
 8000760:	f000 f8d8 	bl	8000914 <HAL_TIM_MspPostInit>

}
 8000764:	bf00      	nop
 8000766:	3748      	adds	r7, #72	@ 0x48
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000108 	.word	0x20000108
 8000770:	40012c00 	.word	0x40012c00

08000774 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_GPIO_Init+0x70>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <MX_GPIO_Init+0x70>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_GPIO_Init+0x70>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_GPIO_Init+0x70>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a13      	ldr	r2, [pc, #76]	@ (80007e4 <MX_GPIO_Init+0x70>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a07      	ldr	r2, [pc, #28]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0x70>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	40021000 	.word	0x40021000

080007e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <HAL_MspInit+0x5c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_MspInit+0x5c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_MspInit+0x60>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_MspInit+0x60>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <HAL_I2C_MspInit+0x74>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d124      	bne.n	80008c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_I2C_MspInit+0x78>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <HAL_I2C_MspInit+0x78>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_I2C_MspInit+0x78>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000890:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000896:	2312      	movs	r3, #18
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <HAL_I2C_MspInit+0x7c>)
 80008a6:	f000 fe89 	bl	80015bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_I2C_MspInit+0x78>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_I2C_MspInit+0x78>)
 80008b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_I2C_MspInit+0x78>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40005800 	.word	0x40005800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a09      	ldr	r2, [pc, #36]	@ (800090c <HAL_TIM_PWM_MspInit+0x34>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10b      	bne.n	8000902 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_TIM_PWM_MspInit+0x38>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	40012c00 	.word	0x40012c00
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_TIM_MspPostInit+0x5c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d118      	bne.n	8000966 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_TIM_MspPostInit+0x60>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_TIM_MspPostInit+0x60>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_TIM_MspPostInit+0x60>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2302      	movs	r3, #2
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <HAL_TIM_MspPostInit+0x64>)
 8000962:	f000 fe2b 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 fcd2 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f003 fd96 	bl	8004534 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20005000 	.word	0x20005000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	2000018c 	.word	0x2000018c
 8000a3c:	200002e0 	.word	0x200002e0

08000a40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a4c:	f7ff fff8 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a52:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a54:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a09      	ldr	r2, [pc, #36]	@ (8000a8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a68:	4c09      	ldr	r4, [pc, #36]	@ (8000a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a76:	f003 fd63 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7a:	f7ff fb6f 	bl	800015c <main>
  bx lr
 8000a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000a88:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 8000a8c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000a90:	200002dc 	.word	0x200002dc

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <DWT_Delay_Init+0x58>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <DWT_Delay_Init+0x58>)
 8000aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000aa6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <DWT_Delay_Init+0x58>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <DWT_Delay_Init+0x58>)
 8000aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ab2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <DWT_Delay_Init+0x5c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <DWT_Delay_Init+0x5c>)
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <DWT_Delay_Init+0x5c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <DWT_Delay_Init+0x5c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <DWT_Delay_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ad2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ad4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ad6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <DWT_Delay_Init+0x5c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e000      	b.n	8000ae6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000ae4:	2301      	movs	r3, #1
  }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000edf0 	.word	0xe000edf0
 8000af4:	e0001000 	.word	0xe0001000

08000af8 <eeprom24c32_init>:
	return (OK == HAL_OK) ? 1 : 0;
}

//initializing the eeprom
eeprom_state_t eeprom24c32_init(eeprom24c32_t *eeprom,
		I2C_HandleTypeDef *i2c_bus) {
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
	eeprom->i2c_bus = i2c_bus;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	621a      	str	r2, [r3, #32]

	// Clear buffer and write to EEPROM
	eeprom->i2c_buffer[0] = 0x00;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]

	// Return the appropriate status
	return (status == 1) ? eeprom_OK : eeprom_NOK;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3

}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <eeprom24c32_write>:
 }
 */

//write to the eeprom function
uint8_t eeprom24c32_write(eeprom24c32_t *eeprom, uint32_t *buffer_data,
		uint16_t mem_ddress) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	4613      	mov	r3, r2
 8000b34:	80fb      	strh	r3, [r7, #6]
	uint8_t status;

	//for testing
	//eeprom->i2c_buffer[0] = 8;

	status = HAL_I2C_Mem_Write(eeprom->i2c_bus, (eeprom_SLA << 1), mem_ddress,
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6a18      	ldr	r0, [r3, #32]
 8000b3a:	88fa      	ldrh	r2, [r7, #6]
 8000b3c:	2364      	movs	r3, #100	@ 0x64
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2301      	movs	r3, #1
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	21a0      	movs	r1, #160	@ 0xa0
 8000b4c:	f001 fb80 	bl	8002250 <HAL_I2C_Mem_Write>
 8000b50:	4603      	mov	r3, r0
 8000b52:	75fb      	strb	r3, [r7, #23]
			2, (uint8_t*)buffer_data, 1, 100);

	//delay according to the datasheet
	HAL_Delay(20);
 8000b54:	2014      	movs	r0, #20
 8000b56:	f000 fc29 	bl	80013ac <HAL_Delay>

	return status;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]

}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <eeprom24c32_read>:

//read data from the eeprom
uint16_t eeprom24c32_read(eeprom24c32_t *eeprom, uint16_t *data,
		uint16_t mem_ddress) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af04      	add	r7, sp, #16
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	80fb      	strh	r3, [r7, #6]

	uint8_t status;
	uint8_t read_data;

	status = HAL_I2C_Mem_Read(eeprom->i2c_bus, (eeprom_SLA << 1), mem_ddress, 2,
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6a18      	ldr	r0, [r3, #32]
 8000b76:	88fa      	ldrh	r2, [r7, #6]
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	f107 0316 	add.w	r3, r7, #22
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2302      	movs	r3, #2
 8000b88:	21a0      	movs	r1, #160	@ 0xa0
 8000b8a:	f001 fc5b 	bl	8002444 <HAL_I2C_Mem_Read>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	75fb      	strb	r3, [r7, #23]
			&read_data, 1, 100);

	// Store the read byte into the data variable
	*data = read_data;
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	461a      	mov	r2, r3
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	801a      	strh	r2, [r3, #0]

	return status;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	b29b      	uxth	r3, r3

}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <I2C__write>:
#define dev_SLA	0b1101000

#define start_address 0b00000000

static uint8_t I2C__write(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b088      	sub	sp, #32
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	73bb      	strb	r3, [r7, #14]

	//master send data to the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Transmit(clock->i2c_bus,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6958      	ldr	r0, [r3, #20]
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	2264      	movs	r2, #100	@ 0x64
 8000bc2:	9200      	str	r2, [sp, #0]
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	21d0      	movs	r1, #208	@ 0xd0
 8000bc8:	f000 ffd8 	bl	8001b7c <HAL_I2C_Master_Transmit>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <I2C__read>:

static uint8_t I2C__read(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4603      	mov	r3, r0
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	73bb      	strb	r3, [r7, #14]

	//master receive data from the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Receive(clock->i2c_bus,
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6958      	ldr	r0, [r3, #20]
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2264      	movs	r2, #100	@ 0x64
 8000c00:	9200      	str	r2, [sp, #0]
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	21d0      	movs	r1, #208	@ 0xd0
 8000c06:	f001 f8b7 	bl	8001d78 <HAL_I2C_Master_Receive>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf0c      	ite	eq
 8000c14:	2301      	moveq	r3, #1
 8000c16:	2300      	movne	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <Ds1307_init>:

	return (div << 4 | rem);
}

//initializing the RTC
DS1307_state_t Ds1307_init(ds1307_t *clock, I2C_HandleTypeDef *i2c_bus) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]

	clock->i2c_bus = i2c_bus;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	615a      	str	r2, [r3, #20]

	clock->i2c_buffer[0] = 0x00;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	status &= I2C__write(dev_SLA, clock->i2c_buffer, 1, clock);
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	2068      	movs	r0, #104	@ 0x68
 8000c44:	f7ff ffaf 	bl	8000ba6 <I2C__write>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	73fb      	strb	r3, [r7, #15]

	status &= I2C__read(dev_SLA, clock->i2c_buffer, 1, clock);
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	2068      	movs	r0, #104	@ 0x68
 8000c5a:	f7ff ffc3 	bl	8000be4 <I2C__read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4013      	ands	r3, r2
 8000c66:	73fb      	strb	r3, [r7, #15]

	if (((clock->i2c_buffer[0]) & (1 << 7)) == 0) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b25b      	sxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da10      	bge.n	8000c94 <Ds1307_init+0x72>

	} else {

		clock->i2c_buffer[0] = 0x00; 	//reg base address
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]

		clock->i2c_buffer[1] = 0; 		//clock hold bit
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	705a      	strb	r2, [r3, #1]

		status &= I2C__write(dev_SLA, clock->i2c_buffer, 2, clock);
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2202      	movs	r2, #2
 8000c84:	2068      	movs	r0, #104	@ 0x68
 8000c86:	f7ff ff8e 	bl	8000ba6 <I2C__write>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	4013      	ands	r3, r2
 8000c92:	73fb      	strb	r3, [r7, #15]
	}

	if (status == 1) {
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <Ds1307_init+0x7c>

		return DS1307_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <Ds1307_init+0x7e>
	} else {
		return DS1307_NOK;
 8000c9e:	2301      	movs	r3, #1
	}

}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <DWT_Delay_us+0x40>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cb6:	f002 fefd 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <DWT_Delay_us+0x44>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	fb02 f303 	mul.w	r3, r2, r3
 8000cca:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000ccc:	bf00      	nop
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <DWT_Delay_us+0x40>)
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1ad2      	subs	r2, r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3f8      	bcc.n	8000cce <DWT_Delay_us+0x26>
		;
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e0001000 	.word	0xe0001000
 8000cec:	431bde83 	.word	0x431bde83

08000cf0 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffd3 	bl	8000ca8 <DWT_Delay_us>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7a1b      	ldrb	r3, [r3, #8]
 8000d20:	4619      	mov	r1, r3
 8000d22:	230f      	movs	r3, #15
 8000d24:	408b      	lsls	r3, r1
 8000d26:	43db      	mvns	r3, r3
 8000d28:	4619      	mov	r1, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	400a      	ands	r2, r1
 8000d30:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	7a09      	ldrb	r1, [r1, #8]
 8000d3e:	408b      	lsls	r3, r1
 8000d40:	4619      	mov	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6958      	ldr	r0, [r3, #20]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	8b1b      	ldrh	r3, [r3, #24]
 8000d68:	78fa      	ldrb	r2, [r7, #3]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f000 fdaa 	bl	80018c4 <HAL_GPIO_WritePin>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68d8      	ldr	r0, [r3, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	8a1b      	ldrh	r3, [r3, #16]
 8000d8c:	78fa      	ldrb	r2, [r7, #3]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f000 fd98 	bl	80018c4 <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	8b1b      	ldrh	r3, [r3, #24]
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	2301      	movs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f107 0208 	add.w	r2, r7, #8
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fbf6 	bl	80015bc <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	8a1b      	ldrh	r3, [r3, #16]
 8000dd4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f107 0208 	add.w	r2, r7, #8
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fbeb 	bl	80015bc <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7a1b      	ldrb	r3, [r3, #8]
 8000dea:	461a      	mov	r2, r3
 8000dec:	230f      	movs	r3, #15
 8000dee:	4093      	lsls	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f107 0208 	add.w	r2, r7, #8
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fbdd 	bl	80015bc <HAL_GPIO_Init>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	70fb      	strb	r3, [r7, #3]
 8000e16:	4613      	mov	r3, r2
 8000e18:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ff98 	bl	8000d54 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff6c 	bl	8000d0a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000e32:	2101      	movs	r1, #1
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff9f 	bl	8000d78 <EN_SET>
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	f7ff ff58 	bl	8000cf0 <usDelay>
 8000e40:	2100      	movs	r1, #0
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff98 	bl	8000d78 <EN_SET>
 8000e48:	2064      	movs	r0, #100	@ 0x64
 8000e4a:	f7ff ff51 	bl	8000cf0 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8000e4e:	78bb      	ldrb	r3, [r7, #2]
 8000e50:	4619      	mov	r1, r3
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff59 	bl	8000d0a <Write_HalfByte>
	PulseEn
 8000e58:	2101      	movs	r1, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff8c 	bl	8000d78 <EN_SET>
 8000e60:	200a      	movs	r0, #10
 8000e62:	f7ff ff45 	bl	8000cf0 <usDelay>
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff85 	bl	8000d78 <EN_SET>
 8000e6e:	2064      	movs	r0, #100	@ 0x64
 8000e70:	f7ff ff3e 	bl	8000cf0 <usDelay>
	;
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8000e8c:	f7ff fe04 	bl	8000a98 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff83 	bl	8000d9c <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2240      	movs	r2, #64	@ 0x40
 8000ea0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	78ba      	ldrb	r2, [r7, #2]
 8000ea6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8000ea8:	78bb      	ldrb	r3, [r7, #2]
 8000eaa:	3340      	adds	r3, #64	@ 0x40
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff4d 	bl	8000d54 <RS_SET>
	EN_SET(lcd, 0);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff5b 	bl	8000d78 <EN_SET>
	usDelay(50000);
 8000ec2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ec6:	f7ff ff13 	bl	8000cf0 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e018      	b.n	8000f02 <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff19 	bl	8000d0a <Write_HalfByte>
		PulseEn
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff4c 	bl	8000d78 <EN_SET>
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f7ff ff05 	bl	8000cf0 <usDelay>
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff45 	bl	8000d78 <EN_SET>
 8000eee:	2064      	movs	r0, #100	@ 0x64
 8000ef0:	f7ff fefe 	bl	8000cf0 <usDelay>
		;
		usDelay(4500);
 8000ef4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ef8:	f7ff fefa 	bl	8000cf0 <usDelay>
	for (x = 0; x < 2; x++) {
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	3301      	adds	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d9e3      	bls.n	8000ed0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000f08:	2103      	movs	r1, #3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fefd 	bl	8000d0a <Write_HalfByte>
	PulseEn
 8000f10:	2101      	movs	r1, #1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff30 	bl	8000d78 <EN_SET>
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f7ff fee9 	bl	8000cf0 <usDelay>
 8000f1e:	2100      	movs	r1, #0
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff29 	bl	8000d78 <EN_SET>
 8000f26:	2064      	movs	r0, #100	@ 0x64
 8000f28:	f7ff fee2 	bl	8000cf0 <usDelay>
	;
	usDelay(150);
 8000f2c:	2096      	movs	r0, #150	@ 0x96
 8000f2e:	f7ff fedf 	bl	8000cf0 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000f32:	2102      	movs	r1, #2
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fee8 	bl	8000d0a <Write_HalfByte>
	PulseEn
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff1b 	bl	8000d78 <EN_SET>
 8000f42:	200a      	movs	r0, #10
 8000f44:	f7ff fed4 	bl	8000cf0 <usDelay>
 8000f48:	2100      	movs	r1, #0
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff14 	bl	8000d78 <EN_SET>
 8000f50:	2064      	movs	r0, #100	@ 0x64
 8000f52:	f7ff fecd 	bl	8000cf0 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000f56:	2228      	movs	r2, #40	@ 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff55 	bl	8000e0a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000f60:	2300      	movs	r3, #0
 8000f62:	2200      	movs	r2, #0
 8000f64:	2101      	movs	r1, #1
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f86d 	bl	8001046 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f859 	bl	8001024 <Alcd_Clear>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
 8000f86:	4613      	mov	r3, r2
 8000f88:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	7e9a      	ldrb	r2, [r3, #26]
 8000f92:	78bb      	ldrb	r3, [r7, #2]
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff2f 	bl	8000e0a <Alcd_SendByte>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]
 8000fc6:	e00b      	b.n	8000fe0 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ff18 	bl	8000e0a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	7dfa      	ldrb	r2, [r7, #23]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3ef      	bcc.n	8000fc8 <Alcd_Put_n+0x14>
	}
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	72fb      	strb	r3, [r7, #11]
 8001000:	4613      	mov	r3, r2
 8001002:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8001004:	7aba      	ldrb	r2, [r7, #10]
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	4619      	mov	r1, r3
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff ffb5 	bl	8000f7a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8001010:	7e3b      	ldrb	r3, [r7, #24]
 8001012:	461a      	mov	r2, r3
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffcc 	bl	8000fb4 <Alcd_Put_n>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 800102c:	2201      	movs	r2, #1
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff feea 	bl	8000e0a <Alcd_SendByte>
	usDelay(2000);
 8001036:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800103a:	f7ff fe59 	bl	8000cf0 <usDelay>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	4608      	mov	r0, r1
 8001050:	4611      	mov	r1, r2
 8001052:	461a      	mov	r2, r3
 8001054:	4603      	mov	r3, r0
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	460b      	mov	r3, r1
 800105a:	70bb      	strb	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7f9b      	ldrb	r3, [r3, #30]
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7f9b      	ldrb	r3, [r3, #30]
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 800108e:	787b      	ldrb	r3, [r7, #1]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7f9b      	ldrb	r3, [r3, #30]
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7f9b      	ldrb	r3, [r3, #30]
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7f9b      	ldrb	r3, [r3, #30]
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	2100      	movs	r1, #0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fea3 	bl	8000e0a <Alcd_SendByte>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	int len = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 80010d8:	e002      	b.n	80010e0 <Str_Len+0x14>
		len++;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f6      	bne.n	80010da <Str_Len+0xe>
	}
	return len;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <Keypad_GetInputs>:
 */

#include "Matrix_Keypad.h"

/// @brief Reads the input status from the input port
static uint16_t Keypad_GetInputs(Matrix_Keypad_t *keypad) {
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	uint16_t Input = keypad->IntputPort->IDR & keypad->IP_Mask;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8b1b      	ldrh	r3, [r3, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	81fb      	strh	r3, [r7, #14]
	return (Input >> keypad->InputStartingPin);
 8001110:	89fa      	ldrh	r2, [r7, #14]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	fa42 f303 	asr.w	r3, r2, r3
 800111a:	b29b      	uxth	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <Keypad_SetOutputs>:

///@brief Write the status of output ports
static void Keypad_SetOutputs(Matrix_Keypad_t *keypad, uint16_t OutputStat) {
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	807b      	strh	r3, [r7, #2]
	//turn off the pins
	keypad->OutputPort->BRR |= keypad->OP_Mask;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	8b5b      	ldrh	r3, [r3, #26]
 800113c:	4619      	mov	r1, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	430a      	orrs	r2, r1
 8001144:	615a      	str	r2, [r3, #20]
	//turn on only the needed ones according to the required output
	keypad->OutputPort->BSRR |= (OutputStat << keypad->OutputStartingPin);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	8879      	ldrh	r1, [r7, #2]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	4619      	mov	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	430a      	orrs	r2, r1
 800115e:	611a      	str	r2, [r3, #16]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <Keypad_Delay>:

/// @fn void Keypad_Delay(uint32_t)
/// @brief
/// Halts the program execution for a certain time
/// @param delay_ms delay value in milliseconds
static void Keypad_Delay(uint32_t delay_ms) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f91a 	bl	80013ac <HAL_Delay>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Keypad_Refresh>:

void Keypad_Refresh(Matrix_Keypad_t *keypad) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
// temporary variable to store the new status of keys
	uint32_t TempKeys = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
	uint16_t OutputStat = 1 << (keypad->Rows - 1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	817b      	strh	r3, [r7, #10]

	uint16_t x = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	813b      	strh	r3, [r7, #8]
	do {

		TempKeys <<= keypad->Columns;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4093      	lsls	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
		// send the output status to the hardware
		Keypad_SetOutputs(keypad, OutputStat);
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffb9 	bl	8001126 <Keypad_SetOutputs>
		Keypad_Delay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffd8 	bl	800116a <Keypad_Delay>
		// read the input status from the hardware

		TempKeys |= Keypad_GetInputs(keypad);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff9c 	bl	80010f8 <Keypad_GetInputs>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
		OutputStat >>= 1;
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	817b      	strh	r3, [r7, #10]
		x++;
 80011d0:	893b      	ldrh	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	813b      	strh	r3, [r7, #8]
	} while (x < keypad->Rows);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	893b      	ldrh	r3, [r7, #8]
 80011de:	4293      	cmp	r3, r2
 80011e0:	d3dd      	bcc.n	800119e <Keypad_Refresh+0x1e>

	keypad->KeysStatus = TempKeys;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Keypad_Init>:

void Keypad_Init(Matrix_Keypad_t *keypad) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef config;

//put a logic 1 in every position where an input pin is selected
	uint16_t Pins = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	84fb      	strh	r3, [r7, #38]	@ 0x26

//configure the columns gpio pins as inputs
//enable pull down resistors to eliminate the use of external ones
	for (int x = 0; x < keypad->Columns; x++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	e00f      	b.n	8001222 <Keypad_Init+0x32>
		Pins |= (1 << (x + keypad->InputStartingPin));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	4413      	add	r3, r2
 800120a:	2201      	movs	r2, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	b21a      	sxth	r2, r3
 8001212:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Columns; x++) {
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	3301      	adds	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	461a      	mov	r2, r3
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	4293      	cmp	r3, r2
 800122c:	dbe9      	blt.n	8001202 <Keypad_Init+0x12>
	}
//Load the input pin Mask
	keypad->IP_Mask = Pins;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001232:	831a      	strh	r2, [r3, #24]

	config.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
	config.Pull = GPIO_PULLDOWN;
 8001238:	2302      	movs	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
	config.Pin = Pins;
 800123c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800123e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f107 020c 	add.w	r2, r7, #12
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f9b6 	bl	80015bc <HAL_GPIO_Init>

//configure the rows gpio pins as outputs
	Pins = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	e00f      	b.n	800127a <Keypad_Init+0x8a>
		Pins |= (1 << (x + keypad->OutputStartingPin));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	4413      	add	r3, r2
 8001262:	2201      	movs	r2, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	b21a      	sxth	r2, r3
 800126a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	3301      	adds	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4293      	cmp	r3, r2
 8001284:	dbe9      	blt.n	800125a <Keypad_Init+0x6a>
	}

//Load the output pin Mask
	keypad->OP_Mask = Pins;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800128a:	835a      	strh	r2, [r3, #26]

	config.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
	config.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
	config.Pin = Pins;
 8001294:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001296:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f98a 	bl	80015bc <HAL_GPIO_Init>

//turn off all the outputs
	Keypad_SetOutputs(keypad, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff3b 	bl	8001126 <Keypad_SetOutputs>
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(Matrix_Keypad_t *keypad, uint8_t key) {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
	return (keypad->KeysStatus & (1 << key)) ? 1 : 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	78fa      	ldrb	r2, [r7, #3]
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f92b 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fa76 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f935 	bl	80015a2 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f90b 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000003c 	.word	0x2000003c
 800136c:	20000044 	.word	0x20000044
 8001370:	20000040 	.word	0x20000040

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a03      	ldr	r2, [pc, #12]	@ (8001394 <HAL_IncTick+0x20>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000044 	.word	0x20000044
 8001394:	20000190 	.word	0x20000190

08001398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	@ (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000190 	.word	0x20000190

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fff0 	bl	8001398 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffe0 	bl	8001398 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000044 	.word	0x20000044

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	@ (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	@ (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	@ 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff90 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff49 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff5e 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff90 	bl	80014ac <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5f 	bl	8001458 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffb0 	bl	8001510 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b08b      	sub	sp, #44	@ 0x2c
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	e169      	b.n	80018a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d0:	2201      	movs	r2, #1
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 8158 	bne.w	800189e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a9a      	ldr	r2, [pc, #616]	@ (800185c <HAL_GPIO_Init+0x2a0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d05e      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 80015f8:	4a98      	ldr	r2, [pc, #608]	@ (800185c <HAL_GPIO_Init+0x2a0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d875      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 80015fe:	4a98      	ldr	r2, [pc, #608]	@ (8001860 <HAL_GPIO_Init+0x2a4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d058      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001604:	4a96      	ldr	r2, [pc, #600]	@ (8001860 <HAL_GPIO_Init+0x2a4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d86f      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 800160a:	4a96      	ldr	r2, [pc, #600]	@ (8001864 <HAL_GPIO_Init+0x2a8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d052      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001610:	4a94      	ldr	r2, [pc, #592]	@ (8001864 <HAL_GPIO_Init+0x2a8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d869      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001616:	4a94      	ldr	r2, [pc, #592]	@ (8001868 <HAL_GPIO_Init+0x2ac>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d04c      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 800161c:	4a92      	ldr	r2, [pc, #584]	@ (8001868 <HAL_GPIO_Init+0x2ac>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d863      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001622:	4a92      	ldr	r2, [pc, #584]	@ (800186c <HAL_GPIO_Init+0x2b0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d046      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
 8001628:	4a90      	ldr	r2, [pc, #576]	@ (800186c <HAL_GPIO_Init+0x2b0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d85d      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d82a      	bhi.n	8001688 <HAL_GPIO_Init+0xcc>
 8001632:	2b12      	cmp	r3, #18
 8001634:	d859      	bhi.n	80016ea <HAL_GPIO_Init+0x12e>
 8001636:	a201      	add	r2, pc, #4	@ (adr r2, 800163c <HAL_GPIO_Init+0x80>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	080016b7 	.word	0x080016b7
 8001640:	08001691 	.word	0x08001691
 8001644:	080016a3 	.word	0x080016a3
 8001648:	080016e5 	.word	0x080016e5
 800164c:	080016eb 	.word	0x080016eb
 8001650:	080016eb 	.word	0x080016eb
 8001654:	080016eb 	.word	0x080016eb
 8001658:	080016eb 	.word	0x080016eb
 800165c:	080016eb 	.word	0x080016eb
 8001660:	080016eb 	.word	0x080016eb
 8001664:	080016eb 	.word	0x080016eb
 8001668:	080016eb 	.word	0x080016eb
 800166c:	080016eb 	.word	0x080016eb
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016eb 	.word	0x080016eb
 8001678:	080016eb 	.word	0x080016eb
 800167c:	080016eb 	.word	0x080016eb
 8001680:	08001699 	.word	0x08001699
 8001684:	080016ad 	.word	0x080016ad
 8001688:	4a79      	ldr	r2, [pc, #484]	@ (8001870 <HAL_GPIO_Init+0x2b4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800168e:	e02c      	b.n	80016ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	623b      	str	r3, [r7, #32]
          break;
 8001696:	e029      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	3304      	adds	r3, #4
 800169e:	623b      	str	r3, [r7, #32]
          break;
 80016a0:	e024      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3308      	adds	r3, #8
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e01f      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	330c      	adds	r3, #12
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e01a      	b.n	80016ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016be:	2304      	movs	r3, #4
 80016c0:	623b      	str	r3, [r7, #32]
          break;
 80016c2:	e013      	b.n	80016ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016cc:	2308      	movs	r3, #8
 80016ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	611a      	str	r2, [r3, #16]
          break;
 80016d6:	e009      	b.n	80016ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	615a      	str	r2, [r3, #20]
          break;
 80016e2:	e003      	b.n	80016ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x130>
          break;
 80016ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2bff      	cmp	r3, #255	@ 0xff
 80016f0:	d801      	bhi.n	80016f6 <HAL_GPIO_Init+0x13a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_Init+0x13e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2bff      	cmp	r3, #255	@ 0xff
 8001700:	d802      	bhi.n	8001708 <HAL_GPIO_Init+0x14c>
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x152>
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	3b08      	subs	r3, #8
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	210f      	movs	r1, #15
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	6a39      	ldr	r1, [r7, #32]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80b1 	beq.w	800189e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800173c:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <HAL_GPIO_Init+0x2b8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <HAL_GPIO_Init+0x2b8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b4a      	ldr	r3, [pc, #296]	@ (8001874 <HAL_GPIO_Init+0x2b8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001754:	4a48      	ldr	r2, [pc, #288]	@ (8001878 <HAL_GPIO_Init+0x2bc>)
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a40      	ldr	r2, [pc, #256]	@ (800187c <HAL_GPIO_Init+0x2c0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d013      	beq.n	80017a8 <HAL_GPIO_Init+0x1ec>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3f      	ldr	r2, [pc, #252]	@ (8001880 <HAL_GPIO_Init+0x2c4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00d      	beq.n	80017a4 <HAL_GPIO_Init+0x1e8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3e      	ldr	r2, [pc, #248]	@ (8001884 <HAL_GPIO_Init+0x2c8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <HAL_GPIO_Init+0x1e4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3d      	ldr	r2, [pc, #244]	@ (8001888 <HAL_GPIO_Init+0x2cc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d101      	bne.n	800179c <HAL_GPIO_Init+0x1e0>
 8001798:	2303      	movs	r3, #3
 800179a:	e006      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 800179c:	2304      	movs	r3, #4
 800179e:	e004      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_GPIO_Init+0x1ee>
 80017a8:	2300      	movs	r3, #0
 80017aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4093      	lsls	r3, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ba:	492f      	ldr	r1, [pc, #188]	@ (8001878 <HAL_GPIO_Init+0x2bc>)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	492c      	ldr	r1, [pc, #176]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017e2:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4928      	ldr	r1, [pc, #160]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4922      	ldr	r1, [pc, #136]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	491e      	ldr	r1, [pc, #120]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001814:	4013      	ands	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4918      	ldr	r1, [pc, #96]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4914      	ldr	r1, [pc, #80]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d021      	beq.n	8001890 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	490e      	ldr	r1, [pc, #56]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e021      	b.n	800189e <HAL_GPIO_Init+0x2e2>
 800185a:	bf00      	nop
 800185c:	10320000 	.word	0x10320000
 8001860:	10310000 	.word	0x10310000
 8001864:	10220000 	.word	0x10220000
 8001868:	10210000 	.word	0x10210000
 800186c:	10120000 	.word	0x10120000
 8001870:	10110000 	.word	0x10110000
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40011000 	.word	0x40011000
 8001888:	40011400 	.word	0x40011400
 800188c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	43db      	mvns	r3, r3
 8001898:	4909      	ldr	r1, [pc, #36]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 800189a:	4013      	ands	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f47f ae8e 	bne.w	80015d0 <HAL_GPIO_Init+0x14>
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	372c      	adds	r7, #44	@ 0x2c
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e12b      	b.n	8001b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7fe ff9c 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2224      	movs	r2, #36	@ 0x24
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001958:	f002 f8b6 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a81      	ldr	r2, [pc, #516]	@ (8001b68 <HAL_I2C_Init+0x274>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d807      	bhi.n	8001978 <HAL_I2C_Init+0x84>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a80      	ldr	r2, [pc, #512]	@ (8001b6c <HAL_I2C_Init+0x278>)
 800196c:	4293      	cmp	r3, r2
 800196e:	bf94      	ite	ls
 8001970:	2301      	movls	r3, #1
 8001972:	2300      	movhi	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e006      	b.n	8001986 <HAL_I2C_Init+0x92>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b70 <HAL_I2C_Init+0x27c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0e7      	b.n	8001b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4a78      	ldr	r2, [pc, #480]	@ (8001b74 <HAL_I2C_Init+0x280>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9b      	lsrs	r3, r3, #18
 8001998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001b68 <HAL_I2C_Init+0x274>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d802      	bhi.n	80019c8 <HAL_I2C_Init+0xd4>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	e009      	b.n	80019dc <HAL_I2C_Init+0xe8>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	4a69      	ldr	r2, [pc, #420]	@ (8001b78 <HAL_I2C_Init+0x284>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	3301      	adds	r3, #1
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	495c      	ldr	r1, [pc, #368]	@ (8001b68 <HAL_I2C_Init+0x274>)
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d819      	bhi.n	8001a30 <HAL_I2C_Init+0x13c>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e59      	subs	r1, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0a:	1c59      	adds	r1, r3, #1
 8001a0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a10:	400b      	ands	r3, r1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <HAL_I2C_Init+0x138>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e59      	subs	r1, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2a:	e051      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e04f      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_I2C_Init+0x168>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e58      	subs	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e012      	b.n	8001a82 <HAL_I2C_Init+0x18e>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	0099      	lsls	r1, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Init+0x196>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e022      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10e      	bne.n	8001ab0 <HAL_I2C_Init+0x1bc>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1e58      	subs	r0, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	440b      	add	r3, r1
 8001aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aae:	e00f      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	0099      	lsls	r1, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	6809      	ldr	r1, [r1, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001afe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6911      	ldr	r1, [r2, #16]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68d2      	ldr	r2, [r2, #12]
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	000186a0 	.word	0x000186a0
 8001b6c:	001e847f 	.word	0x001e847f
 8001b70:	003d08ff 	.word	0x003d08ff
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	10624dd3 	.word	0x10624dd3

08001b7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	461a      	mov	r2, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	817b      	strh	r3, [r7, #10]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fc02 	bl	8001398 <HAL_GetTick>
 8001b94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	f040 80e0 	bne.w	8001d64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2319      	movs	r3, #25
 8001baa:	2201      	movs	r2, #1
 8001bac:	4970      	ldr	r1, [pc, #448]	@ (8001d70 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f001 f98a 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0d3      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x50>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0cc      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d007      	beq.n	8001bf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2221      	movs	r2, #33	@ 0x21
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	893a      	ldrh	r2, [r7, #8]
 8001c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a50      	ldr	r2, [pc, #320]	@ (8001d74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c34:	8979      	ldrh	r1, [r7, #10]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6a3a      	ldr	r2, [r7, #32]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fe76 	bl	800292c <I2C_MasterRequestWrite>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e08d      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c60:	e066      	b.n	8001d30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f001 fa48 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00d      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d107      	bne.n	8001c8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06b      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d11b      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x188>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d017      	beq.n	8001d04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	6a39      	ldr	r1, [r7, #32]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f001 fa3f 	bl	800318c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00d      	beq.n	8001d30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d107      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e01a      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d194      	bne.n	8001c62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	00100002 	.word	0x00100002
 8001d74:	ffff0000 	.word	0xffff0000

08001d78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	@ 0x30
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	817b      	strh	r3, [r7, #10]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff fb02 	bl	8001398 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	f040 824b 	bne.w	800223a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2319      	movs	r3, #25
 8001daa:	2201      	movs	r2, #1
 8001dac:	497f      	ldr	r1, [pc, #508]	@ (8001fac <HAL_I2C_Master_Receive+0x234>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f001 f88a 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e23e      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2C_Master_Receive+0x54>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e237      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d007      	beq.n	8001df2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2222      	movs	r2, #34	@ 0x22
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	893a      	ldrh	r2, [r7, #8]
 8001e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb0 <HAL_I2C_Master_Receive+0x238>)
 8001e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fdf8 	bl	8002a30 <I2C_MasterRequestRead>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1f8      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d113      	bne.n	8001e7a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e1cc      	b.n	8002214 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d11e      	bne.n	8001ec0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e92:	b672      	cpsid	i
}
 8001e94:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ebc:	b662      	cpsie	i
}
 8001ebe:	e035      	b.n	8001f2c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d11e      	bne.n	8001f06 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f02:	b662      	cpsie	i
}
 8001f04:	e012      	b.n	8001f2c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f2c:	e172      	b.n	8002214 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	f200 811f 	bhi.w	8002176 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d123      	bne.n	8001f88 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f001 f969 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e173      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f86:	e145      	b.n	8002214 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d152      	bne.n	8002036 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	2200      	movs	r2, #0
 8001f98:	4906      	ldr	r1, [pc, #24]	@ (8001fb4 <HAL_I2C_Master_Receive+0x23c>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 ff94 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e148      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
 8001faa:	bf00      	nop
 8001fac:	00100002 	.word	0x00100002
 8001fb0:	ffff0000 	.word	0xffff0000
 8001fb4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ffe:	b662      	cpsie	i
}
 8002000:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002034:	e0ee      	b.n	8002214 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203c:	2200      	movs	r2, #0
 800203e:	4981      	ldr	r1, [pc, #516]	@ (8002244 <HAL_I2C_Master_Receive+0x4cc>)
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 ff41 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0f5      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800205e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002060:	b672      	cpsid	i
}
 8002062:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002096:	4b6c      	ldr	r3, [pc, #432]	@ (8002248 <HAL_I2C_Master_Receive+0x4d0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	4a6b      	ldr	r2, [pc, #428]	@ (800224c <HAL_I2C_Master_Receive+0x4d4>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0a1a      	lsrs	r2, r3, #8
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00da      	lsls	r2, r3, #3
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d118      	bne.n	80020ee <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f043 0220 	orr.w	r2, r3, #32
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020de:	b662      	cpsie	i
}
 80020e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0a6      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d1d9      	bne.n	80020b0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800210a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800213e:	b662      	cpsie	i
}
 8002140:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002174:	e04e      	b.n	8002214 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002178:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f001 f84e 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e058      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d124      	bne.n	8002214 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021e0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f ae88 	bne.w	8001f2e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	00010004 	.word	0x00010004
 8002248:	2000003c 	.word	0x2000003c
 800224c:	14f8b589 	.word	0x14f8b589

08002250 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	817b      	strh	r3, [r7, #10]
 8002262:	460b      	mov	r3, r1
 8002264:	813b      	strh	r3, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800226a:	f7ff f895 	bl	8001398 <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b20      	cmp	r3, #32
 800227a:	f040 80d9 	bne.w	8002430 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2319      	movs	r3, #25
 8002284:	2201      	movs	r2, #1
 8002286:	496d      	ldr	r1, [pc, #436]	@ (800243c <HAL_I2C_Mem_Write+0x1ec>)
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fe1d 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
 8002296:	e0cc      	b.n	8002432 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_I2C_Mem_Write+0x56>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0c5      	b.n	8002432 <HAL_I2C_Mem_Write+0x1e2>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d007      	beq.n	80022cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2221      	movs	r2, #33	@ 0x21
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2240      	movs	r2, #64	@ 0x40
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a4d      	ldr	r2, [pc, #308]	@ (8002440 <HAL_I2C_Mem_Write+0x1f0>)
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800230e:	88f8      	ldrh	r0, [r7, #6]
 8002310:	893a      	ldrh	r2, [r7, #8]
 8002312:	8979      	ldrh	r1, [r7, #10]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4603      	mov	r3, r0
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fc54 	bl	8002bcc <I2C_RequestMemoryWrite>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d052      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e081      	b.n	8002432 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fee2 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	2b04      	cmp	r3, #4
 8002344:	d107      	bne.n	8002356 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11b      	bne.n	80023d0 <HAL_I2C_Mem_Write+0x180>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1aa      	bne.n	800232e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fed5 	bl	800318c <I2C_WaitOnBTFFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d107      	bne.n	8002400 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e016      	b.n	8002432 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	00100002 	.word	0x00100002
 8002440:	ffff0000 	.word	0xffff0000

08002444 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	@ 0x30
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	817b      	strh	r3, [r7, #10]
 8002456:	460b      	mov	r3, r1
 8002458:	813b      	strh	r3, [r7, #8]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002462:	f7fe ff99 	bl	8001398 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b20      	cmp	r3, #32
 8002472:	f040 8250 	bne.w	8002916 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2319      	movs	r3, #25
 800247c:	2201      	movs	r2, #1
 800247e:	4982      	ldr	r1, [pc, #520]	@ (8002688 <HAL_I2C_Mem_Read+0x244>)
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fd21 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800248c:	2302      	movs	r3, #2
 800248e:	e243      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_I2C_Mem_Read+0x5a>
 800249a:	2302      	movs	r3, #2
 800249c:	e23c      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d007      	beq.n	80024c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2222      	movs	r2, #34	@ 0x22
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a62      	ldr	r2, [pc, #392]	@ (800268c <HAL_I2C_Mem_Read+0x248>)
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002506:	88f8      	ldrh	r0, [r7, #6]
 8002508:	893a      	ldrh	r2, [r7, #8]
 800250a:	8979      	ldrh	r1, [r7, #10]
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4603      	mov	r3, r0
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fbee 	bl	8002cf8 <I2C_RequestMemoryRead>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1f8      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	d113      	bne.n	8002556 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e1cc      	b.n	80028f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	2b01      	cmp	r3, #1
 800255c:	d11e      	bne.n	800259c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800256e:	b672      	cpsid	i
}
 8002570:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002598:	b662      	cpsie	i
}
 800259a:	e035      	b.n	8002608 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d11e      	bne.n	80025e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025de:	b662      	cpsie	i
}
 80025e0:	e012      	b.n	8002608 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002608:	e172      	b.n	80028f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	2b03      	cmp	r3, #3
 8002610:	f200 811f 	bhi.w	8002852 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	2b01      	cmp	r3, #1
 800261a:	d123      	bne.n	8002664 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fdfb 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e173      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002662:	e145      	b.n	80028f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	2b02      	cmp	r3, #2
 800266a:	d152      	bne.n	8002712 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002672:	2200      	movs	r2, #0
 8002674:	4906      	ldr	r1, [pc, #24]	@ (8002690 <HAL_I2C_Mem_Read+0x24c>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fc26 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e148      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
 8002686:	bf00      	nop
 8002688:	00100002 	.word	0x00100002
 800268c:	ffff0000 	.word	0xffff0000
 8002690:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026da:	b662      	cpsie	i
}
 80026dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002710:	e0ee      	b.n	80028f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002718:	2200      	movs	r2, #0
 800271a:	4981      	ldr	r1, [pc, #516]	@ (8002920 <HAL_I2C_Mem_Read+0x4dc>)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fbd3 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0f5      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002772:	4b6c      	ldr	r3, [pc, #432]	@ (8002924 <HAL_I2C_Mem_Read+0x4e0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	08db      	lsrs	r3, r3, #3
 8002778:	4a6b      	ldr	r2, [pc, #428]	@ (8002928 <HAL_I2C_Mem_Read+0x4e4>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a1a      	lsrs	r2, r3, #8
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00da      	lsls	r2, r3, #3
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	3b01      	subs	r3, #1
 8002790:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d118      	bne.n	80027ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027ba:	b662      	cpsie	i
}
 80027bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0a6      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d1d9      	bne.n	800278c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800281a:	b662      	cpsie	i
}
 800281c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002850:	e04e      	b.n	80028f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002854:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fce0 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e058      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d124      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f ae88 	bne.w	800260a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	@ 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00010004 	.word	0x00010004
 8002924:	2000003c 	.word	0x2000003c
 8002928:	14f8b589 	.word	0x14f8b589

0800292c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	460b      	mov	r3, r1
 800293a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d006      	beq.n	8002956 <I2C_MasterRequestWrite+0x2a>
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d003      	beq.n	8002956 <I2C_MasterRequestWrite+0x2a>
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002954:	d108      	bne.n	8002968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e00b      	b.n	8002980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	2b12      	cmp	r3, #18
 800296e:	d107      	bne.n	8002980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800297e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fa9b 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a6:	d103      	bne.n	80029b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e035      	b.n	8002a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029bc:	d108      	bne.n	80029d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	e01b      	b.n	8002a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029d0:	897b      	ldrh	r3, [r7, #10]
 80029d2:	11db      	asrs	r3, r3, #7
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0306 	and.w	r3, r3, #6
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f063 030f 	orn	r3, r3, #15
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	490e      	ldr	r1, [pc, #56]	@ (8002a28 <I2C_MasterRequestWrite+0xfc>)
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fae4 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e010      	b.n	8002a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4907      	ldr	r1, [pc, #28]	@ (8002a2c <I2C_MasterRequestWrite+0x100>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fad4 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	00010008 	.word	0x00010008
 8002a2c:	00010002 	.word	0x00010002

08002a30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d006      	beq.n	8002a6a <I2C_MasterRequestRead+0x3a>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d003      	beq.n	8002a6a <I2C_MasterRequestRead+0x3a>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a68:	d108      	bne.n	8002a7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e00b      	b.n	8002a94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	2b11      	cmp	r3, #17
 8002a82:	d107      	bne.n	8002a94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fa11 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aba:	d103      	bne.n	8002ac4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e079      	b.n	8002bbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ad0:	d108      	bne.n	8002ae4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e05f      	b.n	8002ba4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ae4:	897b      	ldrh	r3, [r7, #10]
 8002ae6:	11db      	asrs	r3, r3, #7
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0306 	and.w	r3, r3, #6
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f063 030f 	orn	r3, r3, #15
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4930      	ldr	r1, [pc, #192]	@ (8002bc4 <I2C_MasterRequestRead+0x194>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fa5a 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e054      	b.n	8002bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4929      	ldr	r1, [pc, #164]	@ (8002bc8 <I2C_MasterRequestRead+0x198>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa4a 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e044      	b.n	8002bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f9af 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b7e:	d103      	bne.n	8002b88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e017      	b.n	8002bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b8c:	897b      	ldrh	r3, [r7, #10]
 8002b8e:	11db      	asrs	r3, r3, #7
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f003 0306 	and.w	r3, r3, #6
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f063 030e 	orn	r3, r3, #14
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4907      	ldr	r1, [pc, #28]	@ (8002bc8 <I2C_MasterRequestRead+0x198>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fa06 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	00010008 	.word	0x00010008
 8002bc8:	00010002 	.word	0x00010002

08002bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	817b      	strh	r3, [r7, #10]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f960 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1c:	d103      	bne.n	8002c26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e05f      	b.n	8002cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	492d      	ldr	r1, [pc, #180]	@ (8002cf4 <I2C_RequestMemoryWrite+0x128>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f9bb 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e04c      	b.n	8002cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	6a39      	ldr	r1, [r7, #32]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fa46 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d107      	bne.n	8002c8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e02b      	b.n	8002cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c98:	893b      	ldrh	r3, [r7, #8]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e021      	b.n	8002ce8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ca4:	893b      	ldrh	r3, [r7, #8]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa20 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e005      	b.n	8002cea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cde:	893b      	ldrh	r3, [r7, #8]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	00010002 	.word	0x00010002

08002cf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f8c2 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d58:	d103      	bne.n	8002d62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0aa      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	4952      	ldr	r1, [pc, #328]	@ (8002ec4 <I2C_RequestMemoryRead+0x1cc>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f91d 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e097      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f9a8 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e076      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	e021      	b.n	8002e24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002de0:	893b      	ldrh	r3, [r7, #8]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f982 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d107      	bne.n	8002e16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e050      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e26:	6a39      	ldr	r1, [r7, #32]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f967 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d107      	bne.n	8002e4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e035      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f82b 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e86:	d103      	bne.n	8002e90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e013      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e94:	897b      	ldrh	r3, [r7, #10]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	4906      	ldr	r1, [pc, #24]	@ (8002ec4 <I2C_RequestMemoryRead+0x1cc>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f886 	bl	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00010002 	.word	0x00010002

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e048      	b.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d044      	beq.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fe fa59 	bl	8001398 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d139      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10d      	bne.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	e00c      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e023      	b.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d10d      	bne.n	8002f92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	e00c      	b.n	8002fac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d093      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fca:	e071      	b.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d123      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f043 0204 	orr.w	r2, r3, #4
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e067      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d041      	beq.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7fe f9b4 	bl	8001398 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d136      	bne.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10c      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4013      	ands	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e00b      	b.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	43da      	mvns	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e021      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10c      	bne.n	80030d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e00b      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af6d 	bne.w	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	e034      	b.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f8e3 	bl	80032d6 <I2C_IsAcknowledgeFailed>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e034      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d028      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe f939 	bl	8001398 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d11d      	bne.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003142:	2b80      	cmp	r3, #128	@ 0x80
 8003144:	d016      	beq.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e007      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d1c3      	bne.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003198:	e034      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f89b 	bl	80032d6 <I2C_IsAcknowledgeFailed>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e034      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d028      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fe f8f1 	bl	8001398 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11d      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d016      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d1c3      	bne.n	800319a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003228:	e049      	b.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d119      	bne.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e030      	b.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7fe f894 	bl	8001398 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11d      	bne.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d016      	beq.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e007      	b.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d1ae      	bne.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ec:	d11b      	bne.n	8003326 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f043 0204 	orr.w	r2, r3, #4
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
	...

08003334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e272      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8087 	beq.w	8003462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003354:	4b92      	ldr	r3, [pc, #584]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d00c      	beq.n	800337a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003360:	4b8f      	ldr	r3, [pc, #572]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d112      	bne.n	8003392 <HAL_RCC_OscConfig+0x5e>
 800336c:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003378:	d10b      	bne.n	8003392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337a:	4b89      	ldr	r3, [pc, #548]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d06c      	beq.n	8003460 <HAL_RCC_OscConfig+0x12c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d168      	bne.n	8003460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e24c      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x76>
 800339c:	4b80      	ldr	r3, [pc, #512]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a7f      	ldr	r2, [pc, #508]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e02e      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x98>
 80033b2:	4b7b      	ldr	r3, [pc, #492]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7a      	ldr	r2, [pc, #488]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b78      	ldr	r3, [pc, #480]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a77      	ldr	r2, [pc, #476]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0xbc>
 80033d6:	4b72      	ldr	r3, [pc, #456]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a71      	ldr	r2, [pc, #452]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b6f      	ldr	r3, [pc, #444]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6e      	ldr	r2, [pc, #440]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xd4>
 80033f0:	4b6b      	ldr	r3, [pc, #428]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6a      	ldr	r2, [pc, #424]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b68      	ldr	r3, [pc, #416]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a67      	ldr	r2, [pc, #412]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fd ffc2 	bl	8001398 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fd ffbe 	bl	8001398 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	@ 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e200      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b5d      	ldr	r3, [pc, #372]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0xe4>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd ffae 	bl	8001398 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fd ffaa 	bl	8001398 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1ec      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x10c>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346e:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800347a:	4b49      	ldr	r3, [pc, #292]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d11c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x18c>
 8003486:	4b46      	ldr	r3, [pc, #280]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x176>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e1c0      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4939      	ldr	r1, [pc, #228]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c8:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <HAL_RCC_OscConfig+0x270>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fd ff63 	bl	8001398 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fd ff5f 	bl	8001398 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e1a1      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	4b2d      	ldr	r3, [pc, #180]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4927      	ldr	r1, [pc, #156]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b26      	ldr	r3, [pc, #152]	@ (80035a4 <HAL_RCC_OscConfig+0x270>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd ff42 	bl	8001398 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7fd ff3e 	bl	8001398 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e180      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03a      	beq.n	80035b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d019      	beq.n	800357e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b17      	ldr	r3, [pc, #92]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7fd ff22 	bl	8001398 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fd ff1e 	bl	8001398 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e160      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003576:	2001      	movs	r0, #1
 8003578:	f000 faba 	bl	8003af0 <RCC_Delay>
 800357c:	e01c      	b.n	80035b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_RCC_OscConfig+0x274>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fd ff08 	bl	8001398 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358a:	e00f      	b.n	80035ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358c:	f7fd ff04 	bl	8001398 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d908      	bls.n	80035ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e146      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	42420000 	.word	0x42420000
 80035a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ac:	4b92      	ldr	r3, [pc, #584]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e9      	bne.n	800358c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80a6 	beq.w	8003712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b8b      	ldr	r3, [pc, #556]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10d      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b88      	ldr	r3, [pc, #544]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a87      	ldr	r2, [pc, #540]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]
 80035e2:	4b85      	ldr	r3, [pc, #532]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f2:	4b82      	ldr	r3, [pc, #520]	@ (80037fc <HAL_RCC_OscConfig+0x4c8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fe:	4b7f      	ldr	r3, [pc, #508]	@ (80037fc <HAL_RCC_OscConfig+0x4c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7e      	ldr	r2, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0x4c8>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360a:	f7fd fec5 	bl	8001398 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fd fec1 	bl	8001398 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b64      	cmp	r3, #100	@ 0x64
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e103      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	4b75      	ldr	r3, [pc, #468]	@ (80037fc <HAL_RCC_OscConfig+0x4c8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x312>
 8003638:	4b6f      	ldr	r3, [pc, #444]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a6e      	ldr	r2, [pc, #440]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	e02d      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x334>
 800364e:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a69      	ldr	r2, [pc, #420]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6213      	str	r3, [r2, #32]
 800365a:	4b67      	ldr	r3, [pc, #412]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a66      	ldr	r2, [pc, #408]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	e01c      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x356>
 8003670:	4b61      	ldr	r3, [pc, #388]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a60      	ldr	r2, [pc, #384]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	4b5e      	ldr	r3, [pc, #376]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a5d      	ldr	r2, [pc, #372]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e00b      	b.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 800368a:	4b5b      	ldr	r3, [pc, #364]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a5a      	ldr	r2, [pc, #360]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	4b58      	ldr	r3, [pc, #352]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a57      	ldr	r2, [pc, #348]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fd fe75 	bl	8001398 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd fe71 	bl	8001398 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0b1      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b4b      	ldr	r3, [pc, #300]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCC_OscConfig+0x37e>
 80036d4:	e014      	b.n	8003700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fd fe5f 	bl	8001398 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd fe5b 	bl	8001398 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e09b      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	4b40      	ldr	r3, [pc, #256]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b3c      	ldr	r3, [pc, #240]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a3b      	ldr	r2, [pc, #236]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8087 	beq.w	800382a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371c:	4b36      	ldr	r3, [pc, #216]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d061      	beq.n	80037ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d146      	bne.n	80037be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b33      	ldr	r3, [pc, #204]	@ (8003800 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd fe2f 	bl	8001398 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fd fe2b 	bl	8001398 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e06d      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003750:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	d108      	bne.n	8003778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003766:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4921      	ldr	r1, [pc, #132]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003778:	4b1f      	ldr	r3, [pc, #124]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a19      	ldr	r1, [r3, #32]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	430b      	orrs	r3, r1
 800378a:	491b      	ldr	r1, [pc, #108]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003790:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <HAL_RCC_OscConfig+0x4cc>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7fd fdff 	bl	8001398 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7fd fdfb 	bl	8001398 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e03d      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x46a>
 80037bc:	e035      	b.n	800382a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <HAL_RCC_OscConfig+0x4cc>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fde8 	bl	8001398 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fde4 	bl	8001398 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e026      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x498>
 80037ea:	e01e      	b.n	800382a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e019      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
 8003800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_RCC_OscConfig+0x500>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	429a      	cmp	r2, r3
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d0      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b67      	ldr	r3, [pc, #412]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0207 	bic.w	r2, r3, #7
 8003862:	4965      	ldr	r1, [pc, #404]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a58      	ldr	r2, [pc, #352]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800389e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e073      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06b      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b39      	ldr	r3, [pc, #228]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4936      	ldr	r1, [pc, #216]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd fd36 	bl	8001398 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fd32 	bl	8001398 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e053      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d210      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4922      	ldr	r1, [pc, #136]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1cc>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <HAL_RCC_ClockConfig+0x1d0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd fc94 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08004ea0 	.word	0x08004ea0
 8003a04:	2000003c 	.word	0x2000003c
 8003a08:	20000040 	.word	0x20000040

08003a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a26:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x30>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x36>
 8003a3a:	e027      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a3e:	613b      	str	r3, [r7, #16]
      break;
 8003a40:	e027      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a4c:	5cd3      	ldrb	r3, [r2, r3]
 8003a4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d010      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a5a:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	0c5b      	lsrs	r3, r3, #17
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	4a11      	ldr	r2, [pc, #68]	@ (8003aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a6e:	fb03 f202 	mul.w	r2, r3, r2
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e004      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	613b      	str	r3, [r7, #16]
      break;
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8e:	613b      	str	r3, [r7, #16]
      break;
 8003a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a92:	693b      	ldr	r3, [r7, #16]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	007a1200 	.word	0x007a1200
 8003aa8:	08004eb8 	.word	0x08004eb8
 8003aac:	08004ec8 	.word	0x08004ec8
 8003ab0:	003d0900 	.word	0x003d0900

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b02      	ldr	r3, [pc, #8]	@ (8003ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	2000003c 	.word	0x2000003c

08003ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003acc:	f7ff fff2 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	@ (8003aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08004eb0 	.word	0x08004eb0

08003af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <RCC_Delay+0x34>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <RCC_Delay+0x38>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0a5b      	lsrs	r3, r3, #9
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b0c:	bf00      	nop
  }
  while (Delay --);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	60fa      	str	r2, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <RCC_Delay+0x1c>
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	2000003c 	.word	0x2000003c
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d001      	beq.n	8003b44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a18      	ldr	r2, [pc, #96]	@ (8003bb4 <HAL_TIM_Base_Start+0x88>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_TIM_Base_Start+0x48>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d009      	beq.n	8003b74 <HAL_TIM_Base_Start+0x48>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a14      	ldr	r2, [pc, #80]	@ (8003bb8 <HAL_TIM_Base_Start+0x8c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_TIM_Base_Start+0x48>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <HAL_TIM_Base_Start+0x90>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d111      	bne.n	8003b98 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d010      	beq.n	8003ba8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b96:	e007      	b.n	8003ba8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800

08003bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e041      	b.n	8003c56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fc fe76 	bl	80008d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f000 f992 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_TIM_PWM_Start+0x24>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e022      	b.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d109      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x3e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	bf14      	ite	ne
 8003c96:	2301      	movne	r3, #1
 8003c98:	2300      	moveq	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	e015      	b.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d109      	bne.n	8003cb8 <HAL_TIM_PWM_Start+0x58>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e008      	b.n	8003cca <HAL_TIM_PWM_Start+0x6a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e05e      	b.n	8003d90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x82>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce0:	e013      	b.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x92>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0xa2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d00:	e003      	b.n	8003d0a <HAL_TIM_PWM_Start+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fafe 	bl	8004314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d98 <HAL_TIM_PWM_Start+0x138>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d107      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <HAL_TIM_PWM_Start+0x138>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_TIM_PWM_Start+0xfa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d009      	beq.n	8003d5a <HAL_TIM_PWM_Start+0xfa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a14      	ldr	r2, [pc, #80]	@ (8003d9c <HAL_TIM_PWM_Start+0x13c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIM_PWM_Start+0xfa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a12      	ldr	r2, [pc, #72]	@ (8003da0 <HAL_TIM_PWM_Start+0x140>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d111      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	d010      	beq.n	8003d8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7c:	e007      	b.n	8003d8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e0ae      	b.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	f200 809f 	bhi.w	8003f10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003e0d 	.word	0x08003e0d
 8003ddc:	08003f11 	.word	0x08003f11
 8003de0:	08003f11 	.word	0x08003f11
 8003de4:	08003f11 	.word	0x08003f11
 8003de8:	08003e4d 	.word	0x08003e4d
 8003dec:	08003f11 	.word	0x08003f11
 8003df0:	08003f11 	.word	0x08003f11
 8003df4:	08003f11 	.word	0x08003f11
 8003df8:	08003e8f 	.word	0x08003e8f
 8003dfc:	08003f11 	.word	0x08003f11
 8003e00:	08003f11 	.word	0x08003f11
 8003e04:	08003f11 	.word	0x08003f11
 8003e08:	08003ecf 	.word	0x08003ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f8f6 	bl	8004004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0208 	orr.w	r2, r2, #8
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0204 	bic.w	r2, r2, #4
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	619a      	str	r2, [r3, #24]
      break;
 8003e4a:	e064      	b.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f93c 	bl	80040d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6999      	ldr	r1, [r3, #24]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	619a      	str	r2, [r3, #24]
      break;
 8003e8c:	e043      	b.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f985 	bl	80041a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0208 	orr.w	r2, r2, #8
 8003ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0204 	bic.w	r2, r2, #4
 8003eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69d9      	ldr	r1, [r3, #28]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	61da      	str	r2, [r3, #28]
      break;
 8003ecc:	e023      	b.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f9cf 	bl	8004278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	021a      	lsls	r2, r3, #8
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	61da      	str	r2, [r3, #28]
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
      break;
 8003f14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <TIM_Base_SetConfig+0xd0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ffc <TIM_Base_SetConfig+0xd4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2b      	ldr	r2, [pc, #172]	@ (8004000 <TIM_Base_SetConfig+0xd8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <TIM_Base_SetConfig+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ffc <TIM_Base_SetConfig+0xd4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1e      	ldr	r2, [pc, #120]	@ (8004000 <TIM_Base_SetConfig+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <TIM_Base_SetConfig+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800

08004004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f023 0201 	bic.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0302 	bic.w	r3, r3, #2
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <TIM_OC1_SetConfig+0xc8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10c      	bne.n	800407a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0308 	bic.w	r3, r3, #8
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <TIM_OC1_SetConfig+0xc8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00

080040d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 0210 	bic.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <TIM_OC2_SetConfig+0xd0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10d      	bne.n	800414c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <TIM_OC2_SetConfig+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d113      	bne.n	800417c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800415a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00

080041a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004274 <TIM_OC3_SetConfig+0xd0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10d      	bne.n	800421e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800421c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <TIM_OC3_SetConfig+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d113      	bne.n	800424e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800422c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	621a      	str	r2, [r3, #32]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	031b      	lsls	r3, r3, #12
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004310 <TIM_OC4_SetConfig+0x98>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d109      	bne.n	80042ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	40012c00 	.word	0x40012c00

08004314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2201      	movs	r2, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	43db      	mvns	r3, r3
 8004336:	401a      	ands	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e046      	b.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a16      	ldr	r2, [pc, #88]	@ (800440c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c0:	d009      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a10      	ldr	r2, [pc, #64]	@ (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10c      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800

08004418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004430:	2302      	movs	r3, #2
 8004432:	e03d      	b.n	80044b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
	...

080044bc <sniprintf>:
 80044bc:	b40c      	push	{r2, r3}
 80044be:	b530      	push	{r4, r5, lr}
 80044c0:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <sniprintf+0x64>)
 80044c2:	1e0c      	subs	r4, r1, #0
 80044c4:	681d      	ldr	r5, [r3, #0]
 80044c6:	b09d      	sub	sp, #116	@ 0x74
 80044c8:	da08      	bge.n	80044dc <sniprintf+0x20>
 80044ca:	238b      	movs	r3, #139	@ 0x8b
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	b01d      	add	sp, #116	@ 0x74
 80044d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044d8:	b002      	add	sp, #8
 80044da:	4770      	bx	lr
 80044dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044e4:	bf0c      	ite	eq
 80044e6:	4623      	moveq	r3, r4
 80044e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044f4:	9002      	str	r0, [sp, #8]
 80044f6:	9006      	str	r0, [sp, #24]
 80044f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044fc:	4628      	mov	r0, r5
 80044fe:	ab21      	add	r3, sp, #132	@ 0x84
 8004500:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004502:	a902      	add	r1, sp, #8
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	f000 f993 	bl	8004830 <_svfiprintf_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	bfbc      	itt	lt
 800450e:	238b      	movlt	r3, #139	@ 0x8b
 8004510:	602b      	strlt	r3, [r5, #0]
 8004512:	2c00      	cmp	r4, #0
 8004514:	d0dd      	beq.n	80044d2 <sniprintf+0x16>
 8004516:	2200      	movs	r2, #0
 8004518:	9b02      	ldr	r3, [sp, #8]
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e7d9      	b.n	80044d2 <sniprintf+0x16>
 800451e:	bf00      	nop
 8004520:	20000048 	.word	0x20000048

08004524 <memset>:
 8004524:	4603      	mov	r3, r0
 8004526:	4402      	add	r2, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <__errno>:
 8004534:	4b01      	ldr	r3, [pc, #4]	@ (800453c <__errno+0x8>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000048 	.word	0x20000048

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	2600      	movs	r6, #0
 8004544:	4d0c      	ldr	r5, [pc, #48]	@ (8004578 <__libc_init_array+0x38>)
 8004546:	4c0d      	ldr	r4, [pc, #52]	@ (800457c <__libc_init_array+0x3c>)
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	42a6      	cmp	r6, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	f000 fc78 	bl	8004e44 <_init>
 8004554:	2600      	movs	r6, #0
 8004556:	4d0a      	ldr	r5, [pc, #40]	@ (8004580 <__libc_init_array+0x40>)
 8004558:	4c0a      	ldr	r4, [pc, #40]	@ (8004584 <__libc_init_array+0x44>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	42a6      	cmp	r6, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f855 3b04 	ldr.w	r3, [r5], #4
 8004568:	4798      	blx	r3
 800456a:	3601      	adds	r6, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004572:	4798      	blx	r3
 8004574:	3601      	adds	r6, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	08004f08 	.word	0x08004f08
 800457c:	08004f08 	.word	0x08004f08
 8004580:	08004f08 	.word	0x08004f08
 8004584:	08004f0c 	.word	0x08004f0c

08004588 <__retarget_lock_acquire_recursive>:
 8004588:	4770      	bx	lr

0800458a <__retarget_lock_release_recursive>:
 800458a:	4770      	bx	lr

0800458c <_free_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4605      	mov	r5, r0
 8004590:	2900      	cmp	r1, #0
 8004592:	d040      	beq.n	8004616 <_free_r+0x8a>
 8004594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004598:	1f0c      	subs	r4, r1, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	bfb8      	it	lt
 800459e:	18e4      	addlt	r4, r4, r3
 80045a0:	f000 f8de 	bl	8004760 <__malloc_lock>
 80045a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <_free_r+0x8c>)
 80045a6:	6813      	ldr	r3, [r2, #0]
 80045a8:	b933      	cbnz	r3, 80045b8 <_free_r+0x2c>
 80045aa:	6063      	str	r3, [r4, #4]
 80045ac:	6014      	str	r4, [r2, #0]
 80045ae:	4628      	mov	r0, r5
 80045b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045b4:	f000 b8da 	b.w	800476c <__malloc_unlock>
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	d908      	bls.n	80045ce <_free_r+0x42>
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	1821      	adds	r1, r4, r0
 80045c0:	428b      	cmp	r3, r1
 80045c2:	bf01      	itttt	eq
 80045c4:	6819      	ldreq	r1, [r3, #0]
 80045c6:	685b      	ldreq	r3, [r3, #4]
 80045c8:	1809      	addeq	r1, r1, r0
 80045ca:	6021      	streq	r1, [r4, #0]
 80045cc:	e7ed      	b.n	80045aa <_free_r+0x1e>
 80045ce:	461a      	mov	r2, r3
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b10b      	cbz	r3, 80045d8 <_free_r+0x4c>
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d9fa      	bls.n	80045ce <_free_r+0x42>
 80045d8:	6811      	ldr	r1, [r2, #0]
 80045da:	1850      	adds	r0, r2, r1
 80045dc:	42a0      	cmp	r0, r4
 80045de:	d10b      	bne.n	80045f8 <_free_r+0x6c>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	4401      	add	r1, r0
 80045e4:	1850      	adds	r0, r2, r1
 80045e6:	4283      	cmp	r3, r0
 80045e8:	6011      	str	r1, [r2, #0]
 80045ea:	d1e0      	bne.n	80045ae <_free_r+0x22>
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4408      	add	r0, r1
 80045f2:	6010      	str	r0, [r2, #0]
 80045f4:	6053      	str	r3, [r2, #4]
 80045f6:	e7da      	b.n	80045ae <_free_r+0x22>
 80045f8:	d902      	bls.n	8004600 <_free_r+0x74>
 80045fa:	230c      	movs	r3, #12
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	e7d6      	b.n	80045ae <_free_r+0x22>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	1821      	adds	r1, r4, r0
 8004604:	428b      	cmp	r3, r1
 8004606:	bf01      	itttt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	1809      	addeq	r1, r1, r0
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	6054      	str	r4, [r2, #4]
 8004614:	e7cb      	b.n	80045ae <_free_r+0x22>
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	200002d8 	.word	0x200002d8

0800461c <sbrk_aligned>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4e0f      	ldr	r6, [pc, #60]	@ (800465c <sbrk_aligned+0x40>)
 8004620:	460c      	mov	r4, r1
 8004622:	6831      	ldr	r1, [r6, #0]
 8004624:	4605      	mov	r5, r0
 8004626:	b911      	cbnz	r1, 800462e <sbrk_aligned+0x12>
 8004628:	f000 fbaa 	bl	8004d80 <_sbrk_r>
 800462c:	6030      	str	r0, [r6, #0]
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 fba5 	bl	8004d80 <_sbrk_r>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	d103      	bne.n	8004642 <sbrk_aligned+0x26>
 800463a:	f04f 34ff 	mov.w	r4, #4294967295
 800463e:	4620      	mov	r0, r4
 8004640:	bd70      	pop	{r4, r5, r6, pc}
 8004642:	1cc4      	adds	r4, r0, #3
 8004644:	f024 0403 	bic.w	r4, r4, #3
 8004648:	42a0      	cmp	r0, r4
 800464a:	d0f8      	beq.n	800463e <sbrk_aligned+0x22>
 800464c:	1a21      	subs	r1, r4, r0
 800464e:	4628      	mov	r0, r5
 8004650:	f000 fb96 	bl	8004d80 <_sbrk_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d1f2      	bne.n	800463e <sbrk_aligned+0x22>
 8004658:	e7ef      	b.n	800463a <sbrk_aligned+0x1e>
 800465a:	bf00      	nop
 800465c:	200002d4 	.word	0x200002d4

08004660 <_malloc_r>:
 8004660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004664:	1ccd      	adds	r5, r1, #3
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	2d00      	cmp	r5, #0
 8004674:	4606      	mov	r6, r0
 8004676:	db01      	blt.n	800467c <_malloc_r+0x1c>
 8004678:	42a9      	cmp	r1, r5
 800467a:	d904      	bls.n	8004686 <_malloc_r+0x26>
 800467c:	230c      	movs	r3, #12
 800467e:	6033      	str	r3, [r6, #0]
 8004680:	2000      	movs	r0, #0
 8004682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800475c <_malloc_r+0xfc>
 800468a:	f000 f869 	bl	8004760 <__malloc_lock>
 800468e:	f8d8 3000 	ldr.w	r3, [r8]
 8004692:	461c      	mov	r4, r3
 8004694:	bb44      	cbnz	r4, 80046e8 <_malloc_r+0x88>
 8004696:	4629      	mov	r1, r5
 8004698:	4630      	mov	r0, r6
 800469a:	f7ff ffbf 	bl	800461c <sbrk_aligned>
 800469e:	1c43      	adds	r3, r0, #1
 80046a0:	4604      	mov	r4, r0
 80046a2:	d158      	bne.n	8004756 <_malloc_r+0xf6>
 80046a4:	f8d8 4000 	ldr.w	r4, [r8]
 80046a8:	4627      	mov	r7, r4
 80046aa:	2f00      	cmp	r7, #0
 80046ac:	d143      	bne.n	8004736 <_malloc_r+0xd6>
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d04b      	beq.n	800474a <_malloc_r+0xea>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	4639      	mov	r1, r7
 80046b6:	4630      	mov	r0, r6
 80046b8:	eb04 0903 	add.w	r9, r4, r3
 80046bc:	f000 fb60 	bl	8004d80 <_sbrk_r>
 80046c0:	4581      	cmp	r9, r0
 80046c2:	d142      	bne.n	800474a <_malloc_r+0xea>
 80046c4:	6821      	ldr	r1, [r4, #0]
 80046c6:	4630      	mov	r0, r6
 80046c8:	1a6d      	subs	r5, r5, r1
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7ff ffa6 	bl	800461c <sbrk_aligned>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d03a      	beq.n	800474a <_malloc_r+0xea>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	442b      	add	r3, r5
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	f8d8 3000 	ldr.w	r3, [r8]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	bb62      	cbnz	r2, 800473c <_malloc_r+0xdc>
 80046e2:	f8c8 7000 	str.w	r7, [r8]
 80046e6:	e00f      	b.n	8004708 <_malloc_r+0xa8>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	1b52      	subs	r2, r2, r5
 80046ec:	d420      	bmi.n	8004730 <_malloc_r+0xd0>
 80046ee:	2a0b      	cmp	r2, #11
 80046f0:	d917      	bls.n	8004722 <_malloc_r+0xc2>
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	bf18      	it	ne
 80046fa:	6059      	strne	r1, [r3, #4]
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	bf08      	it	eq
 8004700:	f8c8 1000 	streq.w	r1, [r8]
 8004704:	5162      	str	r2, [r4, r5]
 8004706:	604b      	str	r3, [r1, #4]
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f82f 	bl	800476c <__malloc_unlock>
 800470e:	f104 000b 	add.w	r0, r4, #11
 8004712:	1d23      	adds	r3, r4, #4
 8004714:	f020 0007 	bic.w	r0, r0, #7
 8004718:	1ac2      	subs	r2, r0, r3
 800471a:	bf1c      	itt	ne
 800471c:	1a1b      	subne	r3, r3, r0
 800471e:	50a3      	strne	r3, [r4, r2]
 8004720:	e7af      	b.n	8004682 <_malloc_r+0x22>
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	42a3      	cmp	r3, r4
 8004726:	bf0c      	ite	eq
 8004728:	f8c8 2000 	streq.w	r2, [r8]
 800472c:	605a      	strne	r2, [r3, #4]
 800472e:	e7eb      	b.n	8004708 <_malloc_r+0xa8>
 8004730:	4623      	mov	r3, r4
 8004732:	6864      	ldr	r4, [r4, #4]
 8004734:	e7ae      	b.n	8004694 <_malloc_r+0x34>
 8004736:	463c      	mov	r4, r7
 8004738:	687f      	ldr	r7, [r7, #4]
 800473a:	e7b6      	b.n	80046aa <_malloc_r+0x4a>
 800473c:	461a      	mov	r2, r3
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	42a3      	cmp	r3, r4
 8004742:	d1fb      	bne.n	800473c <_malloc_r+0xdc>
 8004744:	2300      	movs	r3, #0
 8004746:	6053      	str	r3, [r2, #4]
 8004748:	e7de      	b.n	8004708 <_malloc_r+0xa8>
 800474a:	230c      	movs	r3, #12
 800474c:	4630      	mov	r0, r6
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	f000 f80c 	bl	800476c <__malloc_unlock>
 8004754:	e794      	b.n	8004680 <_malloc_r+0x20>
 8004756:	6005      	str	r5, [r0, #0]
 8004758:	e7d6      	b.n	8004708 <_malloc_r+0xa8>
 800475a:	bf00      	nop
 800475c:	200002d8 	.word	0x200002d8

08004760 <__malloc_lock>:
 8004760:	4801      	ldr	r0, [pc, #4]	@ (8004768 <__malloc_lock+0x8>)
 8004762:	f7ff bf11 	b.w	8004588 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	200002d0 	.word	0x200002d0

0800476c <__malloc_unlock>:
 800476c:	4801      	ldr	r0, [pc, #4]	@ (8004774 <__malloc_unlock+0x8>)
 800476e:	f7ff bf0c 	b.w	800458a <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	200002d0 	.word	0x200002d0

08004778 <__ssputs_r>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	461f      	mov	r7, r3
 800477e:	688e      	ldr	r6, [r1, #8]
 8004780:	4682      	mov	sl, r0
 8004782:	42be      	cmp	r6, r7
 8004784:	460c      	mov	r4, r1
 8004786:	4690      	mov	r8, r2
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	d82d      	bhi.n	80047e8 <__ssputs_r+0x70>
 800478c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004794:	d026      	beq.n	80047e4 <__ssputs_r+0x6c>
 8004796:	6965      	ldr	r5, [r4, #20]
 8004798:	6909      	ldr	r1, [r1, #16]
 800479a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800479e:	eba3 0901 	sub.w	r9, r3, r1
 80047a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047a6:	1c7b      	adds	r3, r7, #1
 80047a8:	444b      	add	r3, r9
 80047aa:	106d      	asrs	r5, r5, #1
 80047ac:	429d      	cmp	r5, r3
 80047ae:	bf38      	it	cc
 80047b0:	461d      	movcc	r5, r3
 80047b2:	0553      	lsls	r3, r2, #21
 80047b4:	d527      	bpl.n	8004806 <__ssputs_r+0x8e>
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7ff ff52 	bl	8004660 <_malloc_r>
 80047bc:	4606      	mov	r6, r0
 80047be:	b360      	cbz	r0, 800481a <__ssputs_r+0xa2>
 80047c0:	464a      	mov	r2, r9
 80047c2:	6921      	ldr	r1, [r4, #16]
 80047c4:	f000 fafa 	bl	8004dbc <memcpy>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	6126      	str	r6, [r4, #16]
 80047d6:	444e      	add	r6, r9
 80047d8:	6026      	str	r6, [r4, #0]
 80047da:	463e      	mov	r6, r7
 80047dc:	6165      	str	r5, [r4, #20]
 80047de:	eba5 0509 	sub.w	r5, r5, r9
 80047e2:	60a5      	str	r5, [r4, #8]
 80047e4:	42be      	cmp	r6, r7
 80047e6:	d900      	bls.n	80047ea <__ssputs_r+0x72>
 80047e8:	463e      	mov	r6, r7
 80047ea:	4632      	mov	r2, r6
 80047ec:	4641      	mov	r1, r8
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	f000 faac 	bl	8004d4c <memmove>
 80047f4:	2000      	movs	r0, #0
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	1b9b      	subs	r3, r3, r6
 80047fa:	60a3      	str	r3, [r4, #8]
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	4433      	add	r3, r6
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004806:	462a      	mov	r2, r5
 8004808:	f000 fae6 	bl	8004dd8 <_realloc_r>
 800480c:	4606      	mov	r6, r0
 800480e:	2800      	cmp	r0, #0
 8004810:	d1e0      	bne.n	80047d4 <__ssputs_r+0x5c>
 8004812:	4650      	mov	r0, sl
 8004814:	6921      	ldr	r1, [r4, #16]
 8004816:	f7ff feb9 	bl	800458c <_free_r>
 800481a:	230c      	movs	r3, #12
 800481c:	f8ca 3000 	str.w	r3, [sl]
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	e7e9      	b.n	8004802 <__ssputs_r+0x8a>
	...

08004830 <_svfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	4698      	mov	r8, r3
 8004836:	898b      	ldrh	r3, [r1, #12]
 8004838:	4607      	mov	r7, r0
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	460d      	mov	r5, r1
 800483e:	4614      	mov	r4, r2
 8004840:	b09d      	sub	sp, #116	@ 0x74
 8004842:	d510      	bpl.n	8004866 <_svfiprintf_r+0x36>
 8004844:	690b      	ldr	r3, [r1, #16]
 8004846:	b973      	cbnz	r3, 8004866 <_svfiprintf_r+0x36>
 8004848:	2140      	movs	r1, #64	@ 0x40
 800484a:	f7ff ff09 	bl	8004660 <_malloc_r>
 800484e:	6028      	str	r0, [r5, #0]
 8004850:	6128      	str	r0, [r5, #16]
 8004852:	b930      	cbnz	r0, 8004862 <_svfiprintf_r+0x32>
 8004854:	230c      	movs	r3, #12
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	b01d      	add	sp, #116	@ 0x74
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	2340      	movs	r3, #64	@ 0x40
 8004864:	616b      	str	r3, [r5, #20]
 8004866:	2300      	movs	r3, #0
 8004868:	9309      	str	r3, [sp, #36]	@ 0x24
 800486a:	2320      	movs	r3, #32
 800486c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004870:	2330      	movs	r3, #48	@ 0x30
 8004872:	f04f 0901 	mov.w	r9, #1
 8004876:	f8cd 800c 	str.w	r8, [sp, #12]
 800487a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a14 <_svfiprintf_r+0x1e4>
 800487e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004882:	4623      	mov	r3, r4
 8004884:	469a      	mov	sl, r3
 8004886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800488a:	b10a      	cbz	r2, 8004890 <_svfiprintf_r+0x60>
 800488c:	2a25      	cmp	r2, #37	@ 0x25
 800488e:	d1f9      	bne.n	8004884 <_svfiprintf_r+0x54>
 8004890:	ebba 0b04 	subs.w	fp, sl, r4
 8004894:	d00b      	beq.n	80048ae <_svfiprintf_r+0x7e>
 8004896:	465b      	mov	r3, fp
 8004898:	4622      	mov	r2, r4
 800489a:	4629      	mov	r1, r5
 800489c:	4638      	mov	r0, r7
 800489e:	f7ff ff6b 	bl	8004778 <__ssputs_r>
 80048a2:	3001      	adds	r0, #1
 80048a4:	f000 80a7 	beq.w	80049f6 <_svfiprintf_r+0x1c6>
 80048a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048aa:	445a      	add	r2, fp
 80048ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80048ae:	f89a 3000 	ldrb.w	r3, [sl]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 809f 	beq.w	80049f6 <_svfiprintf_r+0x1c6>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c2:	f10a 0a01 	add.w	sl, sl, #1
 80048c6:	9304      	str	r3, [sp, #16]
 80048c8:	9307      	str	r3, [sp, #28]
 80048ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80048d0:	4654      	mov	r4, sl
 80048d2:	2205      	movs	r2, #5
 80048d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d8:	484e      	ldr	r0, [pc, #312]	@ (8004a14 <_svfiprintf_r+0x1e4>)
 80048da:	f000 fa61 	bl	8004da0 <memchr>
 80048de:	9a04      	ldr	r2, [sp, #16]
 80048e0:	b9d8      	cbnz	r0, 800491a <_svfiprintf_r+0xea>
 80048e2:	06d0      	lsls	r0, r2, #27
 80048e4:	bf44      	itt	mi
 80048e6:	2320      	movmi	r3, #32
 80048e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ec:	0711      	lsls	r1, r2, #28
 80048ee:	bf44      	itt	mi
 80048f0:	232b      	movmi	r3, #43	@ 0x2b
 80048f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048f6:	f89a 3000 	ldrb.w	r3, [sl]
 80048fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fc:	d015      	beq.n	800492a <_svfiprintf_r+0xfa>
 80048fe:	4654      	mov	r4, sl
 8004900:	2000      	movs	r0, #0
 8004902:	f04f 0c0a 	mov.w	ip, #10
 8004906:	9a07      	ldr	r2, [sp, #28]
 8004908:	4621      	mov	r1, r4
 800490a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800490e:	3b30      	subs	r3, #48	@ 0x30
 8004910:	2b09      	cmp	r3, #9
 8004912:	d94b      	bls.n	80049ac <_svfiprintf_r+0x17c>
 8004914:	b1b0      	cbz	r0, 8004944 <_svfiprintf_r+0x114>
 8004916:	9207      	str	r2, [sp, #28]
 8004918:	e014      	b.n	8004944 <_svfiprintf_r+0x114>
 800491a:	eba0 0308 	sub.w	r3, r0, r8
 800491e:	fa09 f303 	lsl.w	r3, r9, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	46a2      	mov	sl, r4
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	e7d2      	b.n	80048d0 <_svfiprintf_r+0xa0>
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	1d19      	adds	r1, r3, #4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	9103      	str	r1, [sp, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	bfbb      	ittet	lt
 8004936:	425b      	neglt	r3, r3
 8004938:	f042 0202 	orrlt.w	r2, r2, #2
 800493c:	9307      	strge	r3, [sp, #28]
 800493e:	9307      	strlt	r3, [sp, #28]
 8004940:	bfb8      	it	lt
 8004942:	9204      	strlt	r2, [sp, #16]
 8004944:	7823      	ldrb	r3, [r4, #0]
 8004946:	2b2e      	cmp	r3, #46	@ 0x2e
 8004948:	d10a      	bne.n	8004960 <_svfiprintf_r+0x130>
 800494a:	7863      	ldrb	r3, [r4, #1]
 800494c:	2b2a      	cmp	r3, #42	@ 0x2a
 800494e:	d132      	bne.n	80049b6 <_svfiprintf_r+0x186>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	3402      	adds	r4, #2
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	9203      	str	r2, [sp, #12]
 800495a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a18 <_svfiprintf_r+0x1e8>
 8004964:	2203      	movs	r2, #3
 8004966:	4650      	mov	r0, sl
 8004968:	7821      	ldrb	r1, [r4, #0]
 800496a:	f000 fa19 	bl	8004da0 <memchr>
 800496e:	b138      	cbz	r0, 8004980 <_svfiprintf_r+0x150>
 8004970:	2240      	movs	r2, #64	@ 0x40
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	eba0 000a 	sub.w	r0, r0, sl
 8004978:	4082      	lsls	r2, r0
 800497a:	4313      	orrs	r3, r2
 800497c:	3401      	adds	r4, #1
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004984:	2206      	movs	r2, #6
 8004986:	4825      	ldr	r0, [pc, #148]	@ (8004a1c <_svfiprintf_r+0x1ec>)
 8004988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800498c:	f000 fa08 	bl	8004da0 <memchr>
 8004990:	2800      	cmp	r0, #0
 8004992:	d036      	beq.n	8004a02 <_svfiprintf_r+0x1d2>
 8004994:	4b22      	ldr	r3, [pc, #136]	@ (8004a20 <_svfiprintf_r+0x1f0>)
 8004996:	bb1b      	cbnz	r3, 80049e0 <_svfiprintf_r+0x1b0>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	3307      	adds	r3, #7
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	3308      	adds	r3, #8
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a6:	4433      	add	r3, r6
 80049a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049aa:	e76a      	b.n	8004882 <_svfiprintf_r+0x52>
 80049ac:	460c      	mov	r4, r1
 80049ae:	2001      	movs	r0, #1
 80049b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b4:	e7a8      	b.n	8004908 <_svfiprintf_r+0xd8>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f04f 0c0a 	mov.w	ip, #10
 80049bc:	4619      	mov	r1, r3
 80049be:	3401      	adds	r4, #1
 80049c0:	9305      	str	r3, [sp, #20]
 80049c2:	4620      	mov	r0, r4
 80049c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c8:	3a30      	subs	r2, #48	@ 0x30
 80049ca:	2a09      	cmp	r2, #9
 80049cc:	d903      	bls.n	80049d6 <_svfiprintf_r+0x1a6>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0c6      	beq.n	8004960 <_svfiprintf_r+0x130>
 80049d2:	9105      	str	r1, [sp, #20]
 80049d4:	e7c4      	b.n	8004960 <_svfiprintf_r+0x130>
 80049d6:	4604      	mov	r4, r0
 80049d8:	2301      	movs	r3, #1
 80049da:	fb0c 2101 	mla	r1, ip, r1, r2
 80049de:	e7f0      	b.n	80049c2 <_svfiprintf_r+0x192>
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4638      	mov	r0, r7
 80049e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <_svfiprintf_r+0x1f4>)
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	f3af 8000 	nop.w
 80049f0:	1c42      	adds	r2, r0, #1
 80049f2:	4606      	mov	r6, r0
 80049f4:	d1d6      	bne.n	80049a4 <_svfiprintf_r+0x174>
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	065b      	lsls	r3, r3, #25
 80049fa:	f53f af2d 	bmi.w	8004858 <_svfiprintf_r+0x28>
 80049fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a00:	e72c      	b.n	800485c <_svfiprintf_r+0x2c>
 8004a02:	ab03      	add	r3, sp, #12
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	462a      	mov	r2, r5
 8004a08:	4638      	mov	r0, r7
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <_svfiprintf_r+0x1f4>)
 8004a0c:	a904      	add	r1, sp, #16
 8004a0e:	f000 f87d 	bl	8004b0c <_printf_i>
 8004a12:	e7ed      	b.n	80049f0 <_svfiprintf_r+0x1c0>
 8004a14:	08004eca 	.word	0x08004eca
 8004a18:	08004ed0 	.word	0x08004ed0
 8004a1c:	08004ed4 	.word	0x08004ed4
 8004a20:	00000000 	.word	0x00000000
 8004a24:	08004779 	.word	0x08004779

08004a28 <_printf_common>:
 8004a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	4616      	mov	r6, r2
 8004a2e:	4698      	mov	r8, r3
 8004a30:	688a      	ldr	r2, [r1, #8]
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	4607      	mov	r7, r0
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bfb8      	it	lt
 8004a3a:	4613      	movlt	r3, r2
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a42:	460c      	mov	r4, r1
 8004a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a48:	b10a      	cbz	r2, 8004a4e <_printf_common+0x26>
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	0699      	lsls	r1, r3, #26
 8004a52:	bf42      	ittt	mi
 8004a54:	6833      	ldrmi	r3, [r6, #0]
 8004a56:	3302      	addmi	r3, #2
 8004a58:	6033      	strmi	r3, [r6, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	f015 0506 	ands.w	r5, r5, #6
 8004a60:	d106      	bne.n	8004a70 <_printf_common+0x48>
 8004a62:	f104 0a19 	add.w	sl, r4, #25
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	6832      	ldr	r2, [r6, #0]
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dc2b      	bgt.n	8004ac8 <_printf_common+0xa0>
 8004a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	3b00      	subs	r3, #0
 8004a78:	bf18      	it	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	0692      	lsls	r2, r2, #26
 8004a7e:	d430      	bmi.n	8004ae2 <_printf_common+0xba>
 8004a80:	4641      	mov	r1, r8
 8004a82:	4638      	mov	r0, r7
 8004a84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a88:	47c8      	blx	r9
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d023      	beq.n	8004ad6 <_printf_common+0xae>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	6922      	ldr	r2, [r4, #16]
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	bf14      	ite	ne
 8004a9a:	2500      	movne	r5, #0
 8004a9c:	6833      	ldreq	r3, [r6, #0]
 8004a9e:	f04f 0600 	mov.w	r6, #0
 8004aa2:	bf08      	it	eq
 8004aa4:	68e5      	ldreq	r5, [r4, #12]
 8004aa6:	f104 041a 	add.w	r4, r4, #26
 8004aaa:	bf08      	it	eq
 8004aac:	1aed      	subeq	r5, r5, r3
 8004aae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ab2:	bf08      	it	eq
 8004ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bfc4      	itt	gt
 8004abc:	1a9b      	subgt	r3, r3, r2
 8004abe:	18ed      	addgt	r5, r5, r3
 8004ac0:	42b5      	cmp	r5, r6
 8004ac2:	d11a      	bne.n	8004afa <_printf_common+0xd2>
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e008      	b.n	8004ada <_printf_common+0xb2>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4652      	mov	r2, sl
 8004acc:	4641      	mov	r1, r8
 8004ace:	4638      	mov	r0, r7
 8004ad0:	47c8      	blx	r9
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d103      	bne.n	8004ade <_printf_common+0xb6>
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ade:	3501      	adds	r5, #1
 8004ae0:	e7c1      	b.n	8004a66 <_printf_common+0x3e>
 8004ae2:	2030      	movs	r0, #48	@ 0x30
 8004ae4:	18e1      	adds	r1, r4, r3
 8004ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004af0:	4422      	add	r2, r4
 8004af2:	3302      	adds	r3, #2
 8004af4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004af8:	e7c2      	b.n	8004a80 <_printf_common+0x58>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4622      	mov	r2, r4
 8004afe:	4641      	mov	r1, r8
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c8      	blx	r9
 8004b04:	3001      	adds	r0, #1
 8004b06:	d0e6      	beq.n	8004ad6 <_printf_common+0xae>
 8004b08:	3601      	adds	r6, #1
 8004b0a:	e7d9      	b.n	8004ac0 <_printf_common+0x98>

08004b0c <_printf_i>:
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	7e0f      	ldrb	r7, [r1, #24]
 8004b12:	4691      	mov	r9, r2
 8004b14:	2f78      	cmp	r7, #120	@ 0x78
 8004b16:	4680      	mov	r8, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	469a      	mov	sl, r3
 8004b1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b22:	d807      	bhi.n	8004b34 <_printf_i+0x28>
 8004b24:	2f62      	cmp	r7, #98	@ 0x62
 8004b26:	d80a      	bhi.n	8004b3e <_printf_i+0x32>
 8004b28:	2f00      	cmp	r7, #0
 8004b2a:	f000 80d3 	beq.w	8004cd4 <_printf_i+0x1c8>
 8004b2e:	2f58      	cmp	r7, #88	@ 0x58
 8004b30:	f000 80ba 	beq.w	8004ca8 <_printf_i+0x19c>
 8004b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b3c:	e03a      	b.n	8004bb4 <_printf_i+0xa8>
 8004b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b42:	2b15      	cmp	r3, #21
 8004b44:	d8f6      	bhi.n	8004b34 <_printf_i+0x28>
 8004b46:	a101      	add	r1, pc, #4	@ (adr r1, 8004b4c <_printf_i+0x40>)
 8004b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004b35 	.word	0x08004b35
 8004b58:	08004b35 	.word	0x08004b35
 8004b5c:	08004b35 	.word	0x08004b35
 8004b60:	08004b35 	.word	0x08004b35
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b35 	.word	0x08004b35
 8004b6c:	08004b35 	.word	0x08004b35
 8004b70:	08004b35 	.word	0x08004b35
 8004b74:	08004b35 	.word	0x08004b35
 8004b78:	08004cbb 	.word	0x08004cbb
 8004b7c:	08004be3 	.word	0x08004be3
 8004b80:	08004c75 	.word	0x08004c75
 8004b84:	08004b35 	.word	0x08004b35
 8004b88:	08004b35 	.word	0x08004b35
 8004b8c:	08004cdd 	.word	0x08004cdd
 8004b90:	08004b35 	.word	0x08004b35
 8004b94:	08004be3 	.word	0x08004be3
 8004b98:	08004b35 	.word	0x08004b35
 8004b9c:	08004b35 	.word	0x08004b35
 8004ba0:	08004c7d 	.word	0x08004c7d
 8004ba4:	6833      	ldr	r3, [r6, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6032      	str	r2, [r6, #0]
 8004bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e09e      	b.n	8004cf6 <_printf_i+0x1ea>
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	1d19      	adds	r1, r3, #4
 8004bbe:	6031      	str	r1, [r6, #0]
 8004bc0:	0606      	lsls	r6, r0, #24
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_i+0xbc>
 8004bc4:	681d      	ldr	r5, [r3, #0]
 8004bc6:	e003      	b.n	8004bd0 <_printf_i+0xc4>
 8004bc8:	0645      	lsls	r5, r0, #25
 8004bca:	d5fb      	bpl.n	8004bc4 <_printf_i+0xb8>
 8004bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	da03      	bge.n	8004bdc <_printf_i+0xd0>
 8004bd4:	232d      	movs	r3, #45	@ 0x2d
 8004bd6:	426d      	negs	r5, r5
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	230a      	movs	r3, #10
 8004bde:	4859      	ldr	r0, [pc, #356]	@ (8004d44 <_printf_i+0x238>)
 8004be0:	e011      	b.n	8004c06 <_printf_i+0xfa>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	0608      	lsls	r0, r1, #24
 8004be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bec:	d402      	bmi.n	8004bf4 <_printf_i+0xe8>
 8004bee:	0649      	lsls	r1, r1, #25
 8004bf0:	bf48      	it	mi
 8004bf2:	b2ad      	uxthmi	r5, r5
 8004bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bf6:	6033      	str	r3, [r6, #0]
 8004bf8:	bf14      	ite	ne
 8004bfa:	230a      	movne	r3, #10
 8004bfc:	2308      	moveq	r3, #8
 8004bfe:	4851      	ldr	r0, [pc, #324]	@ (8004d44 <_printf_i+0x238>)
 8004c00:	2100      	movs	r1, #0
 8004c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c06:	6866      	ldr	r6, [r4, #4]
 8004c08:	2e00      	cmp	r6, #0
 8004c0a:	bfa8      	it	ge
 8004c0c:	6821      	ldrge	r1, [r4, #0]
 8004c0e:	60a6      	str	r6, [r4, #8]
 8004c10:	bfa4      	itt	ge
 8004c12:	f021 0104 	bicge.w	r1, r1, #4
 8004c16:	6021      	strge	r1, [r4, #0]
 8004c18:	b90d      	cbnz	r5, 8004c1e <_printf_i+0x112>
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	d04b      	beq.n	8004cb6 <_printf_i+0x1aa>
 8004c1e:	4616      	mov	r6, r2
 8004c20:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c24:	fb03 5711 	mls	r7, r3, r1, r5
 8004c28:	5dc7      	ldrb	r7, [r0, r7]
 8004c2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c2e:	462f      	mov	r7, r5
 8004c30:	42bb      	cmp	r3, r7
 8004c32:	460d      	mov	r5, r1
 8004c34:	d9f4      	bls.n	8004c20 <_printf_i+0x114>
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d10b      	bne.n	8004c52 <_printf_i+0x146>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	07df      	lsls	r7, r3, #31
 8004c3e:	d508      	bpl.n	8004c52 <_printf_i+0x146>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	6861      	ldr	r1, [r4, #4]
 8004c44:	4299      	cmp	r1, r3
 8004c46:	bfde      	ittt	le
 8004c48:	2330      	movle	r3, #48	@ 0x30
 8004c4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c52:	1b92      	subs	r2, r2, r6
 8004c54:	6122      	str	r2, [r4, #16]
 8004c56:	464b      	mov	r3, r9
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	f8cd a000 	str.w	sl, [sp]
 8004c60:	aa03      	add	r2, sp, #12
 8004c62:	f7ff fee1 	bl	8004a28 <_printf_common>
 8004c66:	3001      	adds	r0, #1
 8004c68:	d14a      	bne.n	8004d00 <_printf_i+0x1f4>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	b004      	add	sp, #16
 8004c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	f043 0320 	orr.w	r3, r3, #32
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	2778      	movs	r7, #120	@ 0x78
 8004c7e:	4832      	ldr	r0, [pc, #200]	@ (8004d48 <_printf_i+0x23c>)
 8004c80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	6831      	ldr	r1, [r6, #0]
 8004c88:	061f      	lsls	r7, r3, #24
 8004c8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c8e:	d402      	bmi.n	8004c96 <_printf_i+0x18a>
 8004c90:	065f      	lsls	r7, r3, #25
 8004c92:	bf48      	it	mi
 8004c94:	b2ad      	uxthmi	r5, r5
 8004c96:	6031      	str	r1, [r6, #0]
 8004c98:	07d9      	lsls	r1, r3, #31
 8004c9a:	bf44      	itt	mi
 8004c9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca0:	6023      	strmi	r3, [r4, #0]
 8004ca2:	b11d      	cbz	r5, 8004cac <_printf_i+0x1a0>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	e7ab      	b.n	8004c00 <_printf_i+0xf4>
 8004ca8:	4826      	ldr	r0, [pc, #152]	@ (8004d44 <_printf_i+0x238>)
 8004caa:	e7e9      	b.n	8004c80 <_printf_i+0x174>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	f023 0320 	bic.w	r3, r3, #32
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	e7f6      	b.n	8004ca4 <_printf_i+0x198>
 8004cb6:	4616      	mov	r6, r2
 8004cb8:	e7bd      	b.n	8004c36 <_printf_i+0x12a>
 8004cba:	6833      	ldr	r3, [r6, #0]
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	1d18      	adds	r0, r3, #4
 8004cc0:	6961      	ldr	r1, [r4, #20]
 8004cc2:	6030      	str	r0, [r6, #0]
 8004cc4:	062e      	lsls	r6, r5, #24
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	d501      	bpl.n	8004cce <_printf_i+0x1c2>
 8004cca:	6019      	str	r1, [r3, #0]
 8004ccc:	e002      	b.n	8004cd4 <_printf_i+0x1c8>
 8004cce:	0668      	lsls	r0, r5, #25
 8004cd0:	d5fb      	bpl.n	8004cca <_printf_i+0x1be>
 8004cd2:	8019      	strh	r1, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4616      	mov	r6, r2
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	e7bc      	b.n	8004c56 <_printf_i+0x14a>
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	1d1a      	adds	r2, r3, #4
 8004ce2:	6032      	str	r2, [r6, #0]
 8004ce4:	681e      	ldr	r6, [r3, #0]
 8004ce6:	6862      	ldr	r2, [r4, #4]
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f859 	bl	8004da0 <memchr>
 8004cee:	b108      	cbz	r0, 8004cf4 <_printf_i+0x1e8>
 8004cf0:	1b80      	subs	r0, r0, r6
 8004cf2:	6060      	str	r0, [r4, #4]
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cfe:	e7aa      	b.n	8004c56 <_printf_i+0x14a>
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	47d0      	blx	sl
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0ad      	beq.n	8004c6a <_printf_i+0x15e>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	079b      	lsls	r3, r3, #30
 8004d12:	d413      	bmi.n	8004d3c <_printf_i+0x230>
 8004d14:	68e0      	ldr	r0, [r4, #12]
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	bfb8      	it	lt
 8004d1c:	4618      	movlt	r0, r3
 8004d1e:	e7a6      	b.n	8004c6e <_printf_i+0x162>
 8004d20:	2301      	movs	r3, #1
 8004d22:	4632      	mov	r2, r6
 8004d24:	4649      	mov	r1, r9
 8004d26:	4640      	mov	r0, r8
 8004d28:	47d0      	blx	sl
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d09d      	beq.n	8004c6a <_printf_i+0x15e>
 8004d2e:	3501      	adds	r5, #1
 8004d30:	68e3      	ldr	r3, [r4, #12]
 8004d32:	9903      	ldr	r1, [sp, #12]
 8004d34:	1a5b      	subs	r3, r3, r1
 8004d36:	42ab      	cmp	r3, r5
 8004d38:	dcf2      	bgt.n	8004d20 <_printf_i+0x214>
 8004d3a:	e7eb      	b.n	8004d14 <_printf_i+0x208>
 8004d3c:	2500      	movs	r5, #0
 8004d3e:	f104 0619 	add.w	r6, r4, #25
 8004d42:	e7f5      	b.n	8004d30 <_printf_i+0x224>
 8004d44:	08004edb 	.word	0x08004edb
 8004d48:	08004eec 	.word	0x08004eec

08004d4c <memmove>:
 8004d4c:	4288      	cmp	r0, r1
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	eb01 0402 	add.w	r4, r1, r2
 8004d54:	d902      	bls.n	8004d5c <memmove+0x10>
 8004d56:	4284      	cmp	r4, r0
 8004d58:	4623      	mov	r3, r4
 8004d5a:	d807      	bhi.n	8004d6c <memmove+0x20>
 8004d5c:	1e43      	subs	r3, r0, #1
 8004d5e:	42a1      	cmp	r1, r4
 8004d60:	d008      	beq.n	8004d74 <memmove+0x28>
 8004d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d6a:	e7f8      	b.n	8004d5e <memmove+0x12>
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	4402      	add	r2, r0
 8004d70:	428a      	cmp	r2, r1
 8004d72:	d100      	bne.n	8004d76 <memmove+0x2a>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d7e:	e7f7      	b.n	8004d70 <memmove+0x24>

08004d80 <_sbrk_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	2300      	movs	r3, #0
 8004d84:	4d05      	ldr	r5, [pc, #20]	@ (8004d9c <_sbrk_r+0x1c>)
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fb fe22 	bl	80009d4 <_sbrk>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_sbrk_r+0x1a>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_sbrk_r+0x1a>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	200002cc 	.word	0x200002cc

08004da0 <memchr>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	b2c9      	uxtb	r1, r1
 8004da6:	4402      	add	r2, r0
 8004da8:	4293      	cmp	r3, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	d101      	bne.n	8004db2 <memchr+0x12>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e003      	b.n	8004dba <memchr+0x1a>
 8004db2:	7804      	ldrb	r4, [r0, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	428c      	cmp	r4, r1
 8004db8:	d1f6      	bne.n	8004da8 <memchr+0x8>
 8004dba:	bd10      	pop	{r4, pc}

08004dbc <memcpy>:
 8004dbc:	440a      	add	r2, r1
 8004dbe:	4291      	cmp	r1, r2
 8004dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dc4:	d100      	bne.n	8004dc8 <memcpy+0xc>
 8004dc6:	4770      	bx	lr
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dd4:	d1f9      	bne.n	8004dca <memcpy+0xe>
 8004dd6:	bd10      	pop	{r4, pc}

08004dd8 <_realloc_r>:
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	4680      	mov	r8, r0
 8004dde:	4615      	mov	r5, r2
 8004de0:	460c      	mov	r4, r1
 8004de2:	b921      	cbnz	r1, 8004dee <_realloc_r+0x16>
 8004de4:	4611      	mov	r1, r2
 8004de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	f7ff bc39 	b.w	8004660 <_malloc_r>
 8004dee:	b92a      	cbnz	r2, 8004dfc <_realloc_r+0x24>
 8004df0:	f7ff fbcc 	bl	800458c <_free_r>
 8004df4:	2400      	movs	r4, #0
 8004df6:	4620      	mov	r0, r4
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	f000 f81a 	bl	8004e34 <_malloc_usable_size_r>
 8004e00:	4285      	cmp	r5, r0
 8004e02:	4606      	mov	r6, r0
 8004e04:	d802      	bhi.n	8004e0c <_realloc_r+0x34>
 8004e06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e0a:	d8f4      	bhi.n	8004df6 <_realloc_r+0x1e>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f7ff fc26 	bl	8004660 <_malloc_r>
 8004e14:	4607      	mov	r7, r0
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d0ec      	beq.n	8004df4 <_realloc_r+0x1c>
 8004e1a:	42b5      	cmp	r5, r6
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	4621      	mov	r1, r4
 8004e20:	bf28      	it	cs
 8004e22:	4632      	movcs	r2, r6
 8004e24:	f7ff ffca 	bl	8004dbc <memcpy>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f7ff fbae 	bl	800458c <_free_r>
 8004e30:	463c      	mov	r4, r7
 8004e32:	e7e0      	b.n	8004df6 <_realloc_r+0x1e>

08004e34 <_malloc_usable_size_r>:
 8004e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e38:	1f18      	subs	r0, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfbc      	itt	lt
 8004e3e:	580b      	ldrlt	r3, [r1, r0]
 8004e40:	18c0      	addlt	r0, r0, r3
 8004e42:	4770      	bx	lr

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

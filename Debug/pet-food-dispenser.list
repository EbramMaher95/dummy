
pet-food-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbe8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800bcf4  0800bcf4  0000ccf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c09c  0800c09c  0000e098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c09c  0800c09c  0000d09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0a4  0800c0a4  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0a4  0800c0a4  0000d0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0a8  0800c0a8  0000d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800c0ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000098  0800c144  0000e098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800c144  0000e2dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdbc  00000000  00000000  0000e0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210a  00000000  00000000  0001ae7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0001cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a93  00000000  00000000  0001dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186f5  00000000  00000000  0001e7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013326  00000000  00000000  00036eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac87  00000000  00000000  0004a1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  000d4ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d8d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bcdc 	.word	0x0800bcdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	0800bcdc 	.word	0x0800bcdc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b09c      	sub	sp, #112	@ 0x70
 8000174:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000176:	f007 ff7b 	bl	8008070 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800017a:	f006 ff5d 	bl	8007038 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800017e:	f007 f853 	bl	8007228 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000182:	f006 ffcd 	bl	8007120 <MX_TIM1_Init>
	MX_I2C2_Init();
 8000186:	f006 ff9d 	bl	80070c4 <MX_I2C2_Init>
	//initialize device drivers
	//first we initialize the lcd to display the updates
	//the LCD will be connected to: --> can be found in line 32 in the main.c file
	//A0,1,2,3 --> Data pins
	//A4:RS, A5:EN
	Alcd_Init(&lcd, 2, 16);
 800018a:	2210      	movs	r2, #16
 800018c:	2102      	movs	r1, #2
 800018e:	48ba      	ldr	r0, [pc, #744]	@ (8000478 <main+0x308>)
 8000190:	f007 fd38 	bl	8007c04 <Alcd_Init>

	//clear display
	Alcd_Clear(&lcd);
 8000194:	48b8      	ldr	r0, [pc, #736]	@ (8000478 <main+0x308>)
 8000196:	f007 fe09 	bl	8007dac <Alcd_Clear>

	Keypad_Init(&kp);
 800019a:	48b8      	ldr	r0, [pc, #736]	@ (800047c <main+0x30c>)
 800019c:	f007 feec 	bl	8007f78 <Keypad_Init>

	//initialize the RTC
	Ds1307_init(&CLK, &hi2c2);
 80001a0:	49b7      	ldr	r1, [pc, #732]	@ (8000480 <main+0x310>)
 80001a2:	48b8      	ldr	r0, [pc, #736]	@ (8000484 <main+0x314>)
 80001a4:	f007 fad6 	bl	8007754 <Ds1307_init>

	//initialize the eeprom
	eeprom24c32_init(&memory, &hi2c2);
 80001a8:	49b5      	ldr	r1, [pc, #724]	@ (8000480 <main+0x310>)
 80001aa:	48b7      	ldr	r0, [pc, #732]	@ (8000488 <main+0x318>)
 80001ac:	f007 f9fe 	bl	80075ac <eeprom24c32_init>

	//to initiate the base (counter)
	HAL_TIM_Base_Start(&htim1);
 80001b0:	48b6      	ldr	r0, [pc, #728]	@ (800048c <main+0x31c>)
 80001b2:	f00a fb7f 	bl	800a8b4 <HAL_TIM_Base_Start>

	//enable the OC pin (PWM pin)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001b6:	2100      	movs	r1, #0
 80001b8:	48b4      	ldr	r0, [pc, #720]	@ (800048c <main+0x31c>)
 80001ba:	f00a fc15 	bl	800a9e8 <HAL_TIM_PWM_Start>

	//to change the duty cycle -> CCR
	//range is from 999 to 1999 (according to calculations)

	//the servo is set at 0 degree upon starting
	TIM1->CCR1 = 999;
 80001be:	4bb4      	ldr	r3, [pc, #720]	@ (8000490 <main+0x320>)
 80001c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001c4:	635a      	str	r2, [r3, #52]	@ 0x34

	//a flag if button is pressed
	uint8_t password_comp_flag, error_code, delay_flag;
	int8_t status;
	password_comp_flag = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	error_code = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	uint8_t dose_h, dose_m, dose_s, dose_num;

	//finite state machine section
	uint32_t current_tick;

	uint32_t dosing_tick = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	653b      	str	r3, [r7, #80]	@ 0x50

	// a string to save the RTC time
	char timeString[50];

	/*password section*/
	char menu_pass[] = "1234";
 80001dc:	4aad      	ldr	r2, [pc, #692]	@ (8000494 <main+0x324>)
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e6:	6018      	str	r0, [r3, #0]
 80001e8:	3304      	adds	r3, #4
 80001ea:	7019      	strb	r1, [r3, #0]
	char entered_password[5] = ""; // User input buffer (4 digits + null terminator)
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	2300      	movs	r3, #0
 80001f2:	743b      	strb	r3, [r7, #16]
	char time_date_buffer[5];
	uint16_t buffer;
	uint8_t input_index = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	general_delay = HAL_GetTick() + 250;
 80001fa:	f007 ff91 	bl	8008120 <HAL_GetTick>
 80001fe:	4603      	mov	r3, r0
 8000200:	33fa      	adds	r3, #250	@ 0xfa
 8000202:	65fb      	str	r3, [r7, #92]	@ 0x5c
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//get the current tick number
		current_tick = HAL_GetTick();
 8000204:	f007 ff8c 	bl	8008120 <HAL_GetTick>
 8000208:	6638      	str	r0, [r7, #96]	@ 0x60

		//in idle mode -> button flag is 0 and status is zero
		while ((status == 0) && (error_code == 0)
 800020a:	e124      	b.n	8000456 <main+0x2e6>
				&& (current_tick >= general_delay)) {

			//get the current tick number
			current_tick = HAL_GetTick();
 800020c:	f007 ff88 	bl	8008120 <HAL_GetTick>
 8000210:	6638      	str	r0, [r7, #96]	@ 0x60

			//displaying the time and date
			//the lcd will display the time
			// Read time from DS1307
			if (Ds1307_read(&CLK) == DS1307_OK) //in case reading is ok
 8000212:	489c      	ldr	r0, [pc, #624]	@ (8000484 <main+0x314>)
 8000214:	f007 fb6e 	bl	80078f4 <Ds1307_read>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 80db 	bne.w	80003d6 <main+0x266>
					{

				//check if the time format is 24h or 12h
				//in case of 12h
				if (CLK.format == 1) {
 8000220:	4b98      	ldr	r3, [pc, #608]	@ (8000484 <main+0x314>)
 8000222:	7c5b      	ldrb	r3, [r3, #17]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	f000 8084 	beq.w	8000338 <main+0x1c8>

					// display the time
					Alcd_Clear(&lcd);
 8000230:	4891      	ldr	r0, [pc, #580]	@ (8000478 <main+0x308>)
 8000232:	f007 fdbb 	bl	8007dac <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000236:	2300      	movs	r3, #0
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	488e      	ldr	r0, [pc, #568]	@ (8000478 <main+0x308>)
 800023e:	f007 fdc6 	bl	8007dce <Alcd_Display_Control>
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 8000242:	4b90      	ldr	r3, [pc, #576]	@ (8000484 <main+0x314>)
 8000244:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000246:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 8000248:	4b8e      	ldr	r3, [pc, #568]	@ (8000484 <main+0x314>)
 800024a:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 800024c:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 800024e:	4b8d      	ldr	r3, [pc, #564]	@ (8000484 <main+0x314>)
 8000250:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000252:	f107 001c 	add.w	r0, r7, #28
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	9200      	str	r2, [sp, #0]
 800025a:	460b      	mov	r3, r1
 800025c:	4a8e      	ldr	r2, [pc, #568]	@ (8000498 <main+0x328>)
 800025e:	2132      	movs	r1, #50	@ 0x32
 8000260:	f00b f878 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff79 	bl	8000160 <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b2db      	uxtb	r3, r3
 8000272:	f107 021c 	add.w	r2, r7, #28
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	4613      	mov	r3, r2
 800027a:	2200      	movs	r2, #0
 800027c:	2101      	movs	r1, #1
 800027e:	487e      	ldr	r0, [pc, #504]	@ (8000478 <main+0x308>)
 8000280:	f007 fd7b 	bl	8007d7a <Alcd_PutAt_n>

					//check for PM or AM
					//in case: AM
					if (CLK.AM_PM == 0) {
 8000284:	4b7f      	ldr	r3, [pc, #508]	@ (8000484 <main+0x314>)
 8000286:	7c5b      	ldrb	r3, [r3, #17]
 8000288:	f003 0302 	and.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d10c      	bne.n	80002ac <main+0x13c>
						Alcd_PutAt(&lcd, 1, 9, "AM");
 8000292:	4882      	ldr	r0, [pc, #520]	@ (800049c <main+0x32c>)
 8000294:	f007 fdde 	bl	8007e54 <Str_Len>
 8000298:	4603      	mov	r3, r0
 800029a:	b2db      	uxtb	r3, r3
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	4b7f      	ldr	r3, [pc, #508]	@ (800049c <main+0x32c>)
 80002a0:	2209      	movs	r2, #9
 80002a2:	2101      	movs	r1, #1
 80002a4:	4874      	ldr	r0, [pc, #464]	@ (8000478 <main+0x308>)
 80002a6:	f007 fd68 	bl	8007d7a <Alcd_PutAt_n>
 80002aa:	e00b      	b.n	80002c4 <main+0x154>

					} else {
						Alcd_PutAt(&lcd, 1, 9, "PM");
 80002ac:	487c      	ldr	r0, [pc, #496]	@ (80004a0 <main+0x330>)
 80002ae:	f007 fdd1 	bl	8007e54 <Str_Len>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	4b79      	ldr	r3, [pc, #484]	@ (80004a0 <main+0x330>)
 80002ba:	2209      	movs	r2, #9
 80002bc:	2101      	movs	r1, #1
 80002be:	486e      	ldr	r0, [pc, #440]	@ (8000478 <main+0x308>)
 80002c0:	f007 fd5b 	bl	8007d7a <Alcd_PutAt_n>

					}

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 80002c4:	4b6f      	ldr	r3, [pc, #444]	@ (8000484 <main+0x314>)
 80002c6:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80002c8:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 80002ca:	4b6e      	ldr	r3, [pc, #440]	@ (8000484 <main+0x314>)
 80002cc:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80002ce:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 80002d0:	4b6c      	ldr	r3, [pc, #432]	@ (8000484 <main+0x314>)
 80002d2:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 80002d4:	f107 001c 	add.w	r0, r7, #28
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	9200      	str	r2, [sp, #0]
 80002dc:	460b      	mov	r3, r1
 80002de:	4a71      	ldr	r2, [pc, #452]	@ (80004a4 <main+0x334>)
 80002e0:	2132      	movs	r1, #50	@ 0x32
 80002e2:	f00b f837 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 80002e6:	f107 031c 	add.w	r3, r7, #28
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff38 	bl	8000160 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f107 021c 	add.w	r2, r7, #28
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	4613      	mov	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	485d      	ldr	r0, [pc, #372]	@ (8000478 <main+0x308>)
 8000302:	f007 fd3a 	bl	8007d7a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 8000306:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800030a:	f107 001c 	add.w	r0, r7, #28
 800030e:	4a66      	ldr	r2, [pc, #408]	@ (80004a8 <main+0x338>)
 8000310:	2132      	movs	r1, #50	@ 0x32
 8000312:	f00b f81f 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000316:	f107 031c 	add.w	r3, r7, #28
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff20 	bl	8000160 <strlen>
 8000320:	4603      	mov	r3, r0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f107 021c 	add.w	r2, r7, #28
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	4613      	mov	r3, r2
 800032c:	220e      	movs	r2, #14
 800032e:	2100      	movs	r1, #0
 8000330:	4851      	ldr	r0, [pc, #324]	@ (8000478 <main+0x308>)
 8000332:	f007 fd22 	bl	8007d7a <Alcd_PutAt_n>
 8000336:	e060      	b.n	80003fa <main+0x28a>

				//in case of 24 format
				else {

					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 8000338:	4b52      	ldr	r3, [pc, #328]	@ (8000484 <main+0x314>)
 800033a:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 800033c:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 800033e:	4b51      	ldr	r3, [pc, #324]	@ (8000484 <main+0x314>)
 8000340:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000342:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 8000344:	4b4f      	ldr	r3, [pc, #316]	@ (8000484 <main+0x314>)
 8000346:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 8000348:	f107 001c 	add.w	r0, r7, #28
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	460b      	mov	r3, r1
 8000352:	4a51      	ldr	r2, [pc, #324]	@ (8000498 <main+0x328>)
 8000354:	2132      	movs	r1, #50	@ 0x32
 8000356:	f00a fffd 	bl	800b354 <sniprintf>

					// display the time
					Alcd_Clear(&lcd);
 800035a:	4847      	ldr	r0, [pc, #284]	@ (8000478 <main+0x308>)
 800035c:	f007 fd26 	bl	8007dac <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000360:	2300      	movs	r3, #0
 8000362:	2200      	movs	r2, #0
 8000364:	2101      	movs	r1, #1
 8000366:	4844      	ldr	r0, [pc, #272]	@ (8000478 <main+0x308>)
 8000368:	f007 fd31 	bl	8007dce <Alcd_Display_Control>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff fef5 	bl	8000160 <strlen>
 8000376:	4603      	mov	r3, r0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	f107 021c 	add.w	r2, r7, #28
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	4613      	mov	r3, r2
 8000382:	2200      	movs	r2, #0
 8000384:	2101      	movs	r1, #1
 8000386:	483c      	ldr	r0, [pc, #240]	@ (8000478 <main+0x308>)
 8000388:	f007 fcf7 	bl	8007d7a <Alcd_PutAt_n>

					Alcd_PutAt(&lcd, 0, 0, "Time");
 800038c:	4847      	ldr	r0, [pc, #284]	@ (80004ac <main+0x33c>)
 800038e:	f007 fd61 	bl	8007e54 <Str_Len>
 8000392:	4603      	mov	r3, r0
 8000394:	b2db      	uxtb	r3, r3
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	4b44      	ldr	r3, [pc, #272]	@ (80004ac <main+0x33c>)
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	4836      	ldr	r0, [pc, #216]	@ (8000478 <main+0x308>)
 80003a0:	f007 fceb 	bl	8007d7a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80003a4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80003a8:	f107 001c 	add.w	r0, r7, #28
 80003ac:	4a3e      	ldr	r2, [pc, #248]	@ (80004a8 <main+0x338>)
 80003ae:	2132      	movs	r1, #50	@ 0x32
 80003b0:	f00a ffd0 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80003b4:	f107 031c 	add.w	r3, r7, #28
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff fed1 	bl	8000160 <strlen>
 80003be:	4603      	mov	r3, r0
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f107 021c 	add.w	r2, r7, #28
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	4613      	mov	r3, r2
 80003ca:	220e      	movs	r2, #14
 80003cc:	2100      	movs	r1, #0
 80003ce:	482a      	ldr	r0, [pc, #168]	@ (8000478 <main+0x308>)
 80003d0:	f007 fcd3 	bl	8007d7a <Alcd_PutAt_n>
 80003d4:	e011      	b.n	80003fa <main+0x28a>

				}

			} else {

				 Alcd_Clear(&lcd);
 80003d6:	4828      	ldr	r0, [pc, #160]	@ (8000478 <main+0x308>)
 80003d8:	f007 fce8 	bl	8007dac <Alcd_Clear>
				 Alcd_PutAt(&lcd, 0, 0, "RTC failure");
 80003dc:	4834      	ldr	r0, [pc, #208]	@ (80004b0 <main+0x340>)
 80003de:	f007 fd39 	bl	8007e54 <Str_Len>
 80003e2:	4603      	mov	r3, r0
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	4b31      	ldr	r3, [pc, #196]	@ (80004b0 <main+0x340>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	4822      	ldr	r0, [pc, #136]	@ (8000478 <main+0x308>)
 80003f0:	f007 fcc3 	bl	8007d7a <Alcd_PutAt_n>
				 error_code = 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

			}
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80003fa:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80003fe:	f107 001c 	add.w	r0, r7, #28
 8000402:	4a29      	ldr	r2, [pc, #164]	@ (80004a8 <main+0x338>)
 8000404:	2132      	movs	r1, #50	@ 0x32
 8000406:	f00a ffa5 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fea6 	bl	8000160 <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b2db      	uxtb	r3, r3
 8000418:	f107 021c 	add.w	r2, r7, #28
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	4613      	mov	r3, r2
 8000420:	220e      	movs	r2, #14
 8000422:	2100      	movs	r1, #0
 8000424:	4814      	ldr	r0, [pc, #80]	@ (8000478 <main+0x308>)
 8000426:	f007 fca8 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800042a:	4814      	ldr	r0, [pc, #80]	@ (800047c <main+0x30c>)
 800042c:	f007 fd6c 	bl	8007f08 <Keypad_Refresh>

			//in case menu is pressed -> move to state10
			if (Keypad_Get_Key(&kp, kp_button_save_menu)
 8000430:	210c      	movs	r1, #12
 8000432:	4812      	ldr	r0, [pc, #72]	@ (800047c <main+0x30c>)
 8000434:	f007 fe04 	bl	8008040 <Keypad_Get_Key>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d006      	beq.n	800044c <main+0x2dc>
					&& (current_tick >= general_delay)) {
 800043e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000442:	429a      	cmp	r2, r3
 8000444:	d302      	bcc.n	800044c <main+0x2dc>
				status = 10;
 8000446:	230a      	movs	r3, #10
 8000448:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800044c:	f007 fe68 	bl	8008120 <HAL_GetTick>
 8000450:	4603      	mov	r3, r0
 8000452:	33fa      	adds	r3, #250	@ 0xfa
 8000454:	65fb      	str	r3, [r7, #92]	@ 0x5c
				&& (current_tick >= general_delay)) {
 8000456:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8097 	bne.w	800058e <main+0x41e>
		while ((status == 0) && (error_code == 0)
 8000460:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000464:	2b00      	cmp	r3, #0
 8000466:	f040 8092 	bne.w	800058e <main+0x41e>
				&& (current_tick >= general_delay)) {
 800046a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800046c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800046e:	429a      	cmp	r2, r3
 8000470:	f4bf aecc 	bcs.w	800020c <main+0x9c>

		}

		//status 10 -> main menu
		while ((status == 10) && (current_tick >= general_delay)) {
 8000474:	e08b      	b.n	800058e <main+0x41e>
 8000476:	bf00      	nop
 8000478:	2000001c 	.word	0x2000001c
 800047c:	20000000 	.word	0x20000000
 8000480:	200000b4 	.word	0x200000b4
 8000484:	20000150 	.word	0x20000150
 8000488:	20000168 	.word	0x20000168
 800048c:	20000108 	.word	0x20000108
 8000490:	40012c00 	.word	0x40012c00
 8000494:	0800bf34 	.word	0x0800bf34
 8000498:	0800bcf4 	.word	0x0800bcf4
 800049c:	0800bd04 	.word	0x0800bd04
 80004a0:	0800bd08 	.word	0x0800bd08
 80004a4:	0800bd0c 	.word	0x0800bd0c
 80004a8:	0800bd1c 	.word	0x0800bd1c
 80004ac:	0800bd24 	.word	0x0800bd24
 80004b0:	0800bd2c 	.word	0x0800bd2c

			//get the current tick number
			current_tick = HAL_GetTick();
 80004b4:	f007 fe34 	bl	8008120 <HAL_GetTick>
 80004b8:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80004ba:	489b      	ldr	r0, [pc, #620]	@ (8000728 <main+0x5b8>)
 80004bc:	f007 fc76 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: view");
 80004c0:	489a      	ldr	r0, [pc, #616]	@ (800072c <main+0x5bc>)
 80004c2:	f007 fcc7 	bl	8007e54 <Str_Len>
 80004c6:	4603      	mov	r3, r0
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	4b97      	ldr	r3, [pc, #604]	@ (800072c <main+0x5bc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	4895      	ldr	r0, [pc, #596]	@ (8000728 <main+0x5b8>)
 80004d4:	f007 fc51 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: edit");
 80004d8:	4895      	ldr	r0, [pc, #596]	@ (8000730 <main+0x5c0>)
 80004da:	f007 fcbb 	bl	8007e54 <Str_Len>
 80004de:	4603      	mov	r3, r0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4b92      	ldr	r3, [pc, #584]	@ (8000730 <main+0x5c0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	488f      	ldr	r0, [pc, #572]	@ (8000728 <main+0x5b8>)
 80004ec:	f007 fc45 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80004f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80004f4:	f107 001c 	add.w	r0, r7, #28
 80004f8:	4a8e      	ldr	r2, [pc, #568]	@ (8000734 <main+0x5c4>)
 80004fa:	2132      	movs	r1, #50	@ 0x32
 80004fc:	f00a ff2a 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe2b 	bl	8000160 <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f107 021c 	add.w	r2, r7, #28
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4613      	mov	r3, r2
 8000516:	220e      	movs	r2, #14
 8000518:	2100      	movs	r1, #0
 800051a:	4883      	ldr	r0, [pc, #524]	@ (8000728 <main+0x5b8>)
 800051c:	f007 fc2d 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8000520:	4885      	ldr	r0, [pc, #532]	@ (8000738 <main+0x5c8>)
 8000522:	f007 fcf1 	bl	8007f08 <Keypad_Refresh>

			//in case 1 is selected -> view menu (status 11)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8000526:	2100      	movs	r1, #0
 8000528:	4883      	ldr	r0, [pc, #524]	@ (8000738 <main+0x5c8>)
 800052a:	f007 fd89 	bl	8008040 <Keypad_Get_Key>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d007      	beq.n	8000544 <main+0x3d4>
					&& (current_tick >= general_delay)) {
 8000534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000538:	429a      	cmp	r2, r3
 800053a:	d303      	bcc.n	8000544 <main+0x3d4>

				status = 11;
 800053c:	230b      	movs	r3, #11
 800053e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000542:	e01f      	b.n	8000584 <main+0x414>

			}

			//2 is selected -> edit menu (status 20)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000544:	2101      	movs	r1, #1
 8000546:	487c      	ldr	r0, [pc, #496]	@ (8000738 <main+0x5c8>)
 8000548:	f007 fd7a 	bl	8008040 <Keypad_Get_Key>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00a      	beq.n	8000568 <main+0x3f8>
					&& (current_tick >= general_delay)) {
 8000552:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000554:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000556:	429a      	cmp	r2, r3
 8000558:	d306      	bcc.n	8000568 <main+0x3f8>

				//ask the user for password
				Alcd_Clear(&lcd);
 800055a:	4873      	ldr	r0, [pc, #460]	@ (8000728 <main+0x5b8>)
 800055c:	f007 fc26 	bl	8007dac <Alcd_Clear>
				status = 20;
 8000560:	2314      	movs	r3, #20
 8000562:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000566:	e00d      	b.n	8000584 <main+0x414>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000568:	210e      	movs	r1, #14
 800056a:	4873      	ldr	r0, [pc, #460]	@ (8000738 <main+0x5c8>)
 800056c:	f007 fd68 	bl	8008040 <Keypad_Get_Key>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d006      	beq.n	8000584 <main+0x414>
					&& (current_tick >= general_delay)) {
 8000576:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800057a:	429a      	cmp	r2, r3
 800057c:	d302      	bcc.n	8000584 <main+0x414>

				status = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8000584:	f007 fdcc 	bl	8008120 <HAL_GetTick>
 8000588:	4603      	mov	r3, r0
 800058a:	33fa      	adds	r3, #250	@ 0xfa
 800058c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 10) && (current_tick >= general_delay)) {
 800058e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000592:	2b0a      	cmp	r3, #10
 8000594:	d16e      	bne.n	8000674 <main+0x504>
 8000596:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800059a:	429a      	cmp	r2, r3
 800059c:	d28a      	bcs.n	80004b4 <main+0x344>
		}

		//status 11 -> view menu
		while ((status == 11) && (current_tick >= general_delay)) {
 800059e:	e069      	b.n	8000674 <main+0x504>

			//get the current tick number
			current_tick = HAL_GetTick();
 80005a0:	f007 fdbe 	bl	8008120 <HAL_GetTick>
 80005a4:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80005a6:	4860      	ldr	r0, [pc, #384]	@ (8000728 <main+0x5b8>)
 80005a8:	f007 fc00 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: date");
 80005ac:	4863      	ldr	r0, [pc, #396]	@ (800073c <main+0x5cc>)
 80005ae:	f007 fc51 	bl	8007e54 <Str_Len>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	4b60      	ldr	r3, [pc, #384]	@ (800073c <main+0x5cc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	485a      	ldr	r0, [pc, #360]	@ (8000728 <main+0x5b8>)
 80005c0:	f007 fbdb 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: parameters");
 80005c4:	485e      	ldr	r0, [pc, #376]	@ (8000740 <main+0x5d0>)
 80005c6:	f007 fc45 	bl	8007e54 <Str_Len>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000740 <main+0x5d0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	4854      	ldr	r0, [pc, #336]	@ (8000728 <main+0x5b8>)
 80005d8:	f007 fbcf 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80005dc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80005e0:	f107 001c 	add.w	r0, r7, #28
 80005e4:	4a53      	ldr	r2, [pc, #332]	@ (8000734 <main+0x5c4>)
 80005e6:	2132      	movs	r1, #50	@ 0x32
 80005e8:	f00a feb4 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdb5 	bl	8000160 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f107 021c 	add.w	r2, r7, #28
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4613      	mov	r3, r2
 8000602:	220e      	movs	r2, #14
 8000604:	2100      	movs	r1, #0
 8000606:	4848      	ldr	r0, [pc, #288]	@ (8000728 <main+0x5b8>)
 8000608:	f007 fbb7 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800060c:	484a      	ldr	r0, [pc, #296]	@ (8000738 <main+0x5c8>)
 800060e:	f007 fc7b 	bl	8007f08 <Keypad_Refresh>

			//in case 1 is selected -> view date (status 13)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8000612:	2100      	movs	r1, #0
 8000614:	4848      	ldr	r0, [pc, #288]	@ (8000738 <main+0x5c8>)
 8000616:	f007 fd13 	bl	8008040 <Keypad_Get_Key>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <main+0x4c0>
					&& (current_tick >= general_delay)) {
 8000620:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000624:	429a      	cmp	r2, r3
 8000626:	d303      	bcc.n	8000630 <main+0x4c0>

				status = 13;
 8000628:	230d      	movs	r3, #13
 800062a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800062e:	e01c      	b.n	800066a <main+0x4fa>

			}

			//2 is selected -> view parameters (status 14)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000630:	2101      	movs	r1, #1
 8000632:	4841      	ldr	r0, [pc, #260]	@ (8000738 <main+0x5c8>)
 8000634:	f007 fd04 	bl	8008040 <Keypad_Get_Key>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <main+0x4de>
					&& (current_tick >= general_delay)) {
 800063e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000642:	429a      	cmp	r2, r3
 8000644:	d303      	bcc.n	800064e <main+0x4de>

				status = 14;
 8000646:	230e      	movs	r3, #14
 8000648:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800064c:	e00d      	b.n	800066a <main+0x4fa>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800064e:	210e      	movs	r1, #14
 8000650:	4839      	ldr	r0, [pc, #228]	@ (8000738 <main+0x5c8>)
 8000652:	f007 fcf5 	bl	8008040 <Keypad_Get_Key>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <main+0x4fa>
					&& (current_tick >= general_delay)) {
 800065c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800065e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000660:	429a      	cmp	r2, r3
 8000662:	d302      	bcc.n	800066a <main+0x4fa>

				//back to previous menu
				status = 10;
 8000664:	230a      	movs	r3, #10
 8000666:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800066a:	f007 fd59 	bl	8008120 <HAL_GetTick>
 800066e:	4603      	mov	r3, r0
 8000670:	33fa      	adds	r3, #250	@ 0xfa
 8000672:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 11) && (current_tick >= general_delay)) {
 8000674:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000678:	2b0b      	cmp	r3, #11
 800067a:	f040 8153 	bne.w	8000924 <main+0x7b4>
 800067e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000682:	429a      	cmp	r2, r3
 8000684:	d28c      	bcs.n	80005a0 <main+0x430>
		}

		//view the time and date -> status 13
		while ((status == 13) && (current_tick >= general_delay)) {
 8000686:	e14d      	b.n	8000924 <main+0x7b4>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000688:	f007 fd4a 	bl	8008120 <HAL_GetTick>
 800068c:	6638      	str	r0, [r7, #96]	@ 0x60

			//displaying the time and date
			//the lcd will display the time
			// Read time from DS1307
			if (Ds1307_read(&CLK) == DS1307_OK) //in case reading is ok
 800068e:	482d      	ldr	r0, [pc, #180]	@ (8000744 <main+0x5d4>)
 8000690:	f007 f930 	bl	80078f4 <Ds1307_read>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	f040 8104 	bne.w	80008a4 <main+0x734>
					{

				//check if the time format is 24h or 12h
				//in case of 12h
				if (CLK.format == 1) {
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <main+0x5d4>)
 800069e:	7c5b      	ldrb	r3, [r3, #17]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8098 	beq.w	80007dc <main+0x66c>

					// display the time
					Alcd_Clear(&lcd);
 80006ac:	481e      	ldr	r0, [pc, #120]	@ (8000728 <main+0x5b8>)
 80006ae:	f007 fb7d 	bl	8007dac <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	481b      	ldr	r0, [pc, #108]	@ (8000728 <main+0x5b8>)
 80006ba:	f007 fb88 	bl	8007dce <Alcd_Display_Control>
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <main+0x5d4>)
 80006c0:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80006c2:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <main+0x5d4>)
 80006c6:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80006c8:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <main+0x5d4>)
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80006ce:	f107 001c 	add.w	r0, r7, #28
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	9200      	str	r2, [sp, #0]
 80006d6:	460b      	mov	r3, r1
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <main+0x5d8>)
 80006da:	2132      	movs	r1, #50	@ 0x32
 80006dc:	f00a fe3a 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd3b 	bl	8000160 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f107 021c 	add.w	r2, r7, #28
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4613      	mov	r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	480b      	ldr	r0, [pc, #44]	@ (8000728 <main+0x5b8>)
 80006fc:	f007 fb3d 	bl	8007d7a <Alcd_PutAt_n>

					//check for PM or AM
					//in case: AM
					if (CLK.AM_PM == 0) {
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <main+0x5d4>)
 8000702:	7c5b      	ldrb	r3, [r3, #17]
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d120      	bne.n	8000750 <main+0x5e0>
						Alcd_PutAt(&lcd, 1, 9, "AM");
 800070e:	480f      	ldr	r0, [pc, #60]	@ (800074c <main+0x5dc>)
 8000710:	f007 fba0 	bl	8007e54 <Str_Len>
 8000714:	4603      	mov	r3, r0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <main+0x5dc>)
 800071c:	2209      	movs	r2, #9
 800071e:	2101      	movs	r1, #1
 8000720:	4801      	ldr	r0, [pc, #4]	@ (8000728 <main+0x5b8>)
 8000722:	f007 fb2a 	bl	8007d7a <Alcd_PutAt_n>
 8000726:	e01f      	b.n	8000768 <main+0x5f8>
 8000728:	2000001c 	.word	0x2000001c
 800072c:	0800bd38 	.word	0x0800bd38
 8000730:	0800bd40 	.word	0x0800bd40
 8000734:	0800bd1c 	.word	0x0800bd1c
 8000738:	20000000 	.word	0x20000000
 800073c:	0800bd48 	.word	0x0800bd48
 8000740:	0800bd50 	.word	0x0800bd50
 8000744:	20000150 	.word	0x20000150
 8000748:	0800bcf4 	.word	0x0800bcf4
 800074c:	0800bd04 	.word	0x0800bd04

					} else {
						Alcd_PutAt(&lcd, 1, 9, "PM");
 8000750:	48b7      	ldr	r0, [pc, #732]	@ (8000a30 <main+0x8c0>)
 8000752:	f007 fb7f 	bl	8007e54 <Str_Len>
 8000756:	4603      	mov	r3, r0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4bb4      	ldr	r3, [pc, #720]	@ (8000a30 <main+0x8c0>)
 800075e:	2209      	movs	r2, #9
 8000760:	2101      	movs	r1, #1
 8000762:	48b4      	ldr	r0, [pc, #720]	@ (8000a34 <main+0x8c4>)
 8000764:	f007 fb09 	bl	8007d7a <Alcd_PutAt_n>

					}

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 8000768:	4bb3      	ldr	r3, [pc, #716]	@ (8000a38 <main+0x8c8>)
 800076a:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800076c:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 800076e:	4bb2      	ldr	r3, [pc, #712]	@ (8000a38 <main+0x8c8>)
 8000770:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000772:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 8000774:	4bb0      	ldr	r3, [pc, #704]	@ (8000a38 <main+0x8c8>)
 8000776:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000778:	f107 001c 	add.w	r0, r7, #28
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9200      	str	r2, [sp, #0]
 8000780:	460b      	mov	r3, r1
 8000782:	4aae      	ldr	r2, [pc, #696]	@ (8000a3c <main+0x8cc>)
 8000784:	2132      	movs	r1, #50	@ 0x32
 8000786:	f00a fde5 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fce6 	bl	8000160 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f107 021c 	add.w	r2, r7, #28
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	4613      	mov	r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	48a3      	ldr	r0, [pc, #652]	@ (8000a34 <main+0x8c4>)
 80007a6:	f007 fae8 	bl	8007d7a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 80007aa:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80007ae:	f107 001c 	add.w	r0, r7, #28
 80007b2:	4aa3      	ldr	r2, [pc, #652]	@ (8000a40 <main+0x8d0>)
 80007b4:	2132      	movs	r1, #50	@ 0x32
 80007b6:	f00a fdcd 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fcce 	bl	8000160 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f107 021c 	add.w	r2, r7, #28
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	4613      	mov	r3, r2
 80007d0:	220e      	movs	r2, #14
 80007d2:	2100      	movs	r1, #0
 80007d4:	4897      	ldr	r0, [pc, #604]	@ (8000a34 <main+0x8c4>)
 80007d6:	f007 fad0 	bl	8007d7a <Alcd_PutAt_n>
 80007da:	e075      	b.n	80008c8 <main+0x758>

				//in case of 24 format
				else {

					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
							CLK.hour, CLK.min, CLK.sec);
 80007dc:	4b96      	ldr	r3, [pc, #600]	@ (8000a38 <main+0x8c8>)
 80007de:	7a9b      	ldrb	r3, [r3, #10]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80007e0:	4619      	mov	r1, r3
							CLK.hour, CLK.min, CLK.sec);
 80007e2:	4b95      	ldr	r3, [pc, #596]	@ (8000a38 <main+0x8c8>)
 80007e4:	7a5b      	ldrb	r3, [r3, #9]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80007e6:	461a      	mov	r2, r3
							CLK.hour, CLK.min, CLK.sec);
 80007e8:	4b93      	ldr	r3, [pc, #588]	@ (8000a38 <main+0x8c8>)
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
					snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d",
 80007ec:	f107 001c 	add.w	r0, r7, #28
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	460b      	mov	r3, r1
 80007f6:	4a93      	ldr	r2, [pc, #588]	@ (8000a44 <main+0x8d4>)
 80007f8:	2132      	movs	r1, #50	@ 0x32
 80007fa:	f00a fdab 	bl	800b354 <sniprintf>

					// display the time
					Alcd_Clear(&lcd);
 80007fe:	488d      	ldr	r0, [pc, #564]	@ (8000a34 <main+0x8c4>)
 8000800:	f007 fad4 	bl	8007dac <Alcd_Clear>
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8000804:	2300      	movs	r3, #0
 8000806:	2200      	movs	r2, #0
 8000808:	2101      	movs	r1, #1
 800080a:	488a      	ldr	r0, [pc, #552]	@ (8000a34 <main+0x8c4>)
 800080c:	f007 fadf 	bl	8007dce <Alcd_Display_Control>
					Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fca3 	bl	8000160 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f107 021c 	add.w	r2, r7, #28
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	4613      	mov	r3, r2
 8000826:	2200      	movs	r2, #0
 8000828:	2101      	movs	r1, #1
 800082a:	4882      	ldr	r0, [pc, #520]	@ (8000a34 <main+0x8c4>)
 800082c:	f007 faa5 	bl	8007d7a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
							CLK.date, CLK.month, CLK.year);
 8000830:	4b81      	ldr	r3, [pc, #516]	@ (8000a38 <main+0x8c8>)
 8000832:	7b1b      	ldrb	r3, [r3, #12]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000834:	4619      	mov	r1, r3
							CLK.date, CLK.month, CLK.year);
 8000836:	4b80      	ldr	r3, [pc, #512]	@ (8000a38 <main+0x8c8>)
 8000838:	7b5b      	ldrb	r3, [r3, #13]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 800083a:	461a      	mov	r2, r3
							CLK.date, CLK.month, CLK.year);
 800083c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a38 <main+0x8c8>)
 800083e:	89db      	ldrh	r3, [r3, #14]
					snprintf(timeString, sizeof(timeString), "%02d-%02d-%04d",
 8000840:	f107 001c 	add.w	r0, r7, #28
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	460b      	mov	r3, r1
 800084a:	4a7c      	ldr	r2, [pc, #496]	@ (8000a3c <main+0x8cc>)
 800084c:	2132      	movs	r1, #50	@ 0x32
 800084e:	f00a fd81 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 0, timeString, strlen(timeString));
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fc82 	bl	8000160 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	f107 021c 	add.w	r2, r7, #28
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	4871      	ldr	r0, [pc, #452]	@ (8000a34 <main+0x8c4>)
 800086e:	f007 fa84 	bl	8007d7a <Alcd_PutAt_n>

					snprintf(timeString, sizeof(timeString), "%02d", status);
 8000872:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000876:	f107 001c 	add.w	r0, r7, #28
 800087a:	4a71      	ldr	r2, [pc, #452]	@ (8000a40 <main+0x8d0>)
 800087c:	2132      	movs	r1, #50	@ 0x32
 800087e:	f00a fd69 	bl	800b354 <sniprintf>
					Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fc6a 	bl	8000160 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f107 021c 	add.w	r2, r7, #28
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	4613      	mov	r3, r2
 8000898:	220e      	movs	r2, #14
 800089a:	2100      	movs	r1, #0
 800089c:	4865      	ldr	r0, [pc, #404]	@ (8000a34 <main+0x8c4>)
 800089e:	f007 fa6c 	bl	8007d7a <Alcd_PutAt_n>
 80008a2:	e011      	b.n	80008c8 <main+0x758>

				}

			} else {
				Alcd_Clear(&lcd);
 80008a4:	4863      	ldr	r0, [pc, #396]	@ (8000a34 <main+0x8c4>)
 80008a6:	f007 fa81 	bl	8007dac <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "RTC failure");
 80008aa:	4867      	ldr	r0, [pc, #412]	@ (8000a48 <main+0x8d8>)
 80008ac:	f007 fad2 	bl	8007e54 <Str_Len>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4b64      	ldr	r3, [pc, #400]	@ (8000a48 <main+0x8d8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	485d      	ldr	r0, [pc, #372]	@ (8000a34 <main+0x8c4>)
 80008be:	f007 fa5c 	bl	8007d7a <Alcd_PutAt_n>
				error_code = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
			}
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80008c8:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80008cc:	f107 001c 	add.w	r0, r7, #28
 80008d0:	4a5b      	ldr	r2, [pc, #364]	@ (8000a40 <main+0x8d0>)
 80008d2:	2132      	movs	r1, #50	@ 0x32
 80008d4:	f00a fd3e 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc3f 	bl	8000160 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f107 021c 	add.w	r2, r7, #28
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	220e      	movs	r2, #14
 80008f0:	2100      	movs	r1, #0
 80008f2:	4850      	ldr	r0, [pc, #320]	@ (8000a34 <main+0x8c4>)
 80008f4:	f007 fa41 	bl	8007d7a <Alcd_PutAt_n>

			//check if back is selected
			Keypad_Refresh(&kp);
 80008f8:	4854      	ldr	r0, [pc, #336]	@ (8000a4c <main+0x8dc>)
 80008fa:	f007 fb05 	bl	8007f08 <Keypad_Refresh>
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80008fe:	210e      	movs	r1, #14
 8000900:	4852      	ldr	r0, [pc, #328]	@ (8000a4c <main+0x8dc>)
 8000902:	f007 fb9d 	bl	8008040 <Keypad_Get_Key>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d006      	beq.n	800091a <main+0x7aa>
					&& (current_tick >= general_delay)) {
 800090c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800090e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000910:	429a      	cmp	r2, r3
 8000912:	d302      	bcc.n	800091a <main+0x7aa>

				//back to previous menu
				status = 11;
 8000914:	230b      	movs	r3, #11
 8000916:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 800091a:	f007 fc01 	bl	8008120 <HAL_GetTick>
 800091e:	4603      	mov	r3, r0
 8000920:	33fa      	adds	r3, #250	@ 0xfa
 8000922:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 13) && (current_tick >= general_delay)) {
 8000924:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000928:	2b0d      	cmp	r3, #13
 800092a:	d177      	bne.n	8000a1c <main+0x8ac>
 800092c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800092e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000930:	429a      	cmp	r2, r3
 8000932:	f4bf aea9 	bcs.w	8000688 <main+0x518>
		}

		//view the time parameters -> status 14
		while ((status == 14) && (current_tick >= general_delay)) {
 8000936:	e071      	b.n	8000a1c <main+0x8ac>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000938:	f007 fbf2 	bl	8008120 <HAL_GetTick>
 800093c:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 800093e:	483d      	ldr	r0, [pc, #244]	@ (8000a34 <main+0x8c4>)
 8000940:	f007 fa34 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "Dose @");
 8000944:	4842      	ldr	r0, [pc, #264]	@ (8000a50 <main+0x8e0>)
 8000946:	f007 fa85 	bl	8007e54 <Str_Len>
 800094a:	4603      	mov	r3, r0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	4b3f      	ldr	r3, [pc, #252]	@ (8000a50 <main+0x8e0>)
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	4837      	ldr	r0, [pc, #220]	@ (8000a34 <main+0x8c4>)
 8000958:	f007 fa0f 	bl	8007d7a <Alcd_PutAt_n>

			//reading dosing hours
			eeprom24c32_read(&memory, &dose_h, dosing_time_hours);
 800095c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <main+0x8e4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 035a 	add.w	r3, r7, #90	@ 0x5a
 8000966:	4619      	mov	r1, r3
 8000968:	483a      	ldr	r0, [pc, #232]	@ (8000a54 <main+0x8e4>)
 800096a:	f006 fe55 	bl	8007618 <eeprom24c32_read>

			//reading dosing minutes
			eeprom24c32_read(&memory, &dose_m, dosing_time_minutes);
 800096e:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <main+0x8e4>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0359 	add.w	r3, r7, #89	@ 0x59
 8000978:	4619      	mov	r1, r3
 800097a:	4836      	ldr	r0, [pc, #216]	@ (8000a54 <main+0x8e4>)
 800097c:	f006 fe4c 	bl	8007618 <eeprom24c32_read>

			//reading dosing seconds
			eeprom24c32_read(&memory, &dose_s, dosing_time_seconds);
 8000980:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <main+0x8e4>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	b29a      	uxth	r2, r3
 8000986:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800098a:	4619      	mov	r1, r3
 800098c:	4831      	ldr	r0, [pc, #196]	@ (8000a54 <main+0x8e4>)
 800098e:	f006 fe43 	bl	8007618 <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d", dose_h,
 8000992:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8000996:	4619      	mov	r1, r3
 8000998:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800099c:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80009a0:	f107 001c 	add.w	r0, r7, #28
 80009a4:	9201      	str	r2, [sp, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	460b      	mov	r3, r1
 80009aa:	4a26      	ldr	r2, [pc, #152]	@ (8000a44 <main+0x8d4>)
 80009ac:	2132      	movs	r1, #50	@ 0x32
 80009ae:	f00a fcd1 	bl	800b354 <sniprintf>
					dose_m, dose_s);
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fbd2 	bl	8000160 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f107 021c 	add.w	r2, r7, #28
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	4613      	mov	r3, r2
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	4819      	ldr	r0, [pc, #100]	@ (8000a34 <main+0x8c4>)
 80009ce:	f007 f9d4 	bl	8007d7a <Alcd_PutAt_n>

			//check if back or next is selected
			Keypad_Refresh(&kp);
 80009d2:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <main+0x8dc>)
 80009d4:	f007 fa98 	bl	8007f08 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80009d8:	210e      	movs	r1, #14
 80009da:	481c      	ldr	r0, [pc, #112]	@ (8000a4c <main+0x8dc>)
 80009dc:	f007 fb30 	bl	8008040 <Keypad_Get_Key>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d007      	beq.n	80009f6 <main+0x886>
					&& (current_tick >= general_delay)) {
 80009e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80009e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d303      	bcc.n	80009f6 <main+0x886>

				//back to previous menu
				status = 11;
 80009ee:	230b      	movs	r3, #11
 80009f0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80009f4:	e00d      	b.n	8000a12 <main+0x8a2>

			}

			//in case next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 80009f6:	2103      	movs	r1, #3
 80009f8:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <main+0x8dc>)
 80009fa:	f007 fb21 	bl	8008040 <Keypad_Get_Key>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <main+0x8a2>
					&& (current_tick >= general_delay)) {
 8000a04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d302      	bcc.n	8000a12 <main+0x8a2>

				//back to display no of doses -> status 15
				status = 15;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8000a12:	f007 fb85 	bl	8008120 <HAL_GetTick>
 8000a16:	4603      	mov	r3, r0
 8000a18:	33fa      	adds	r3, #250	@ 0xfa
 8000a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 14) && (current_tick >= general_delay)) {
 8000a1c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000a20:	2b0e      	cmp	r3, #14
 8000a22:	d170      	bne.n	8000b06 <main+0x996>
 8000a24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d285      	bcs.n	8000938 <main+0x7c8>
		}

		//view the no. of doses -> status 15
		while ((status == 15) && (current_tick >= general_delay)) {
 8000a2c:	e06b      	b.n	8000b06 <main+0x996>
 8000a2e:	bf00      	nop
 8000a30:	0800bd08 	.word	0x0800bd08
 8000a34:	2000001c 	.word	0x2000001c
 8000a38:	20000150 	.word	0x20000150
 8000a3c:	0800bd0c 	.word	0x0800bd0c
 8000a40:	0800bd1c 	.word	0x0800bd1c
 8000a44:	0800bcf4 	.word	0x0800bcf4
 8000a48:	0800bd2c 	.word	0x0800bd2c
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	0800bd60 	.word	0x0800bd60
 8000a54:	20000168 	.word	0x20000168

			//get the current tick number
			current_tick = HAL_GetTick();
 8000a58:	f007 fb62 	bl	8008120 <HAL_GetTick>
 8000a5c:	6638      	str	r0, [r7, #96]	@ 0x60
			//clear the lcd
			Alcd_Clear(&lcd);
 8000a5e:	48c2      	ldr	r0, [pc, #776]	@ (8000d68 <main+0xbf8>)
 8000a60:	f007 f9a4 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "doses no.");
 8000a64:	48c1      	ldr	r0, [pc, #772]	@ (8000d6c <main+0xbfc>)
 8000a66:	f007 f9f5 	bl	8007e54 <Str_Len>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4bbe      	ldr	r3, [pc, #760]	@ (8000d6c <main+0xbfc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	48bc      	ldr	r0, [pc, #752]	@ (8000d68 <main+0xbf8>)
 8000a78:	f007 f97f 	bl	8007d7a <Alcd_PutAt_n>

			//reading dosing hours
			eeprom24c32_read(&memory, &dose_num, doses_number);
 8000a7c:	4bbc      	ldr	r3, [pc, #752]	@ (8000d70 <main+0xc00>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	f107 0357 	add.w	r3, r7, #87	@ 0x57
 8000a86:	4619      	mov	r1, r3
 8000a88:	48b9      	ldr	r0, [pc, #740]	@ (8000d70 <main+0xc00>)
 8000a8a:	f006 fdc5 	bl	8007618 <eeprom24c32_read>

			snprintf(timeString, sizeof(timeString), "%02d", dose_num);
 8000a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a92:	f107 001c 	add.w	r0, r7, #28
 8000a96:	4ab7      	ldr	r2, [pc, #732]	@ (8000d74 <main+0xc04>)
 8000a98:	2132      	movs	r1, #50	@ 0x32
 8000a9a:	f00a fc5b 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fb5c 	bl	8000160 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f107 021c 	add.w	r2, r7, #28
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	48ab      	ldr	r0, [pc, #684]	@ (8000d68 <main+0xbf8>)
 8000aba:	f007 f95e 	bl	8007d7a <Alcd_PutAt_n>

			//check if back or next is selected
			Keypad_Refresh(&kp);
 8000abe:	48ae      	ldr	r0, [pc, #696]	@ (8000d78 <main+0xc08>)
 8000ac0:	f007 fa22 	bl	8007f08 <Keypad_Refresh>
			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000ac4:	210e      	movs	r1, #14
 8000ac6:	48ac      	ldr	r0, [pc, #688]	@ (8000d78 <main+0xc08>)
 8000ac8:	f007 faba 	bl	8008040 <Keypad_Get_Key>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <main+0x970>
					&& (current_tick >= general_delay)) {
 8000ad2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d302      	bcc.n	8000ae0 <main+0x970>

				//back to previous menu
				status = 11;
 8000ada:	230b      	movs	r3, #11
 8000adc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//in case previous button is selected
			if (Keypad_Get_Key(&kp, kp_button_previous)
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	48a5      	ldr	r0, [pc, #660]	@ (8000d78 <main+0xc08>)
 8000ae4:	f007 faac 	bl	8008040 <Keypad_Get_Key>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <main+0x98c>
					&& (current_tick >= general_delay)) {
 8000aee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d302      	bcc.n	8000afc <main+0x98c>

				//back to previous menu
				status = 14;
 8000af6:	230e      	movs	r3, #14
 8000af8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8000afc:	f007 fb10 	bl	8008120 <HAL_GetTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	33fa      	adds	r3, #250	@ 0xfa
 8000b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 15) && (current_tick >= general_delay)) {
 8000b06:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f040 83b0 	bne.w	8001270 <main+0x1100>
 8000b10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d29f      	bcs.n	8000a58 <main+0x8e8>
		}

		//edit menu -> status 20
		while ((status == 20) && (current_tick >= general_delay)) {
 8000b18:	e3aa      	b.n	8001270 <main+0x1100>

			//get the current tick number
			current_tick = HAL_GetTick();
 8000b1a:	f007 fb01 	bl	8008120 <HAL_GetTick>
 8000b1e:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_PutAt(&lcd, 0, 0, "Password:");
 8000b20:	4896      	ldr	r0, [pc, #600]	@ (8000d7c <main+0xc0c>)
 8000b22:	f007 f997 	bl	8007e54 <Str_Len>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	4b93      	ldr	r3, [pc, #588]	@ (8000d7c <main+0xc0c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	488d      	ldr	r0, [pc, #564]	@ (8000d68 <main+0xbf8>)
 8000b34:	f007 f921 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8000b38:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000b3c:	f107 001c 	add.w	r0, r7, #28
 8000b40:	4a8c      	ldr	r2, [pc, #560]	@ (8000d74 <main+0xc04>)
 8000b42:	2132      	movs	r1, #50	@ 0x32
 8000b44:	f00a fc06 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fb07 	bl	8000160 <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	f107 021c 	add.w	r2, r7, #28
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	220e      	movs	r2, #14
 8000b60:	2100      	movs	r1, #0
 8000b62:	4881      	ldr	r0, [pc, #516]	@ (8000d68 <main+0xbf8>)
 8000b64:	f007 f909 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8000b68:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2101      	movs	r1, #1
 8000b70:	487d      	ldr	r0, [pc, #500]	@ (8000d68 <main+0xbf8>)
 8000b72:	f007 f8c6 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8000b76:	2301      	movs	r3, #1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	487a      	ldr	r0, [pc, #488]	@ (8000d68 <main+0xbf8>)
 8000b7e:	f007 f926 	bl	8007dce <Alcd_Display_Control>

			Keypad_Refresh(&kp);
 8000b82:	487d      	ldr	r0, [pc, #500]	@ (8000d78 <main+0xc08>)
 8000b84:	f007 f9c0 	bl	8007f08 <Keypad_Refresh>

			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8000b88:	210e      	movs	r1, #14
 8000b8a:	487b      	ldr	r0, [pc, #492]	@ (8000d78 <main+0xc08>)
 8000b8c:	f007 fa58 	bl	8008040 <Keypad_Get_Key>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00a      	beq.n	8000bac <main+0xa3c>
					&& (current_tick >= general_delay)) {
 8000b96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d306      	bcc.n	8000bac <main+0xa3c>

				input_index = 0;  // Reset input index
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

				//back to previous menu
				status = 11;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000baa:	e361      	b.n	8001270 <main+0x1100>

			}

			//if 0 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8000bac:	210d      	movs	r1, #13
 8000bae:	4872      	ldr	r0, [pc, #456]	@ (8000d78 <main+0xc08>)
 8000bb0:	f007 fa46 	bl	8008040 <Keypad_Get_Key>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d042      	beq.n	8000c40 <main+0xad0>
					&& (current_tick >= general_delay)) {
 8000bba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d33e      	bcc.n	8000c40 <main+0xad0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4867      	ldr	r0, [pc, #412]	@ (8000d68 <main+0xbf8>)
 8000bca:	f007 f900 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000bce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d827      	bhi.n	8000c26 <main+0xab6>
					entered_password[input_index] = '0';
 8000bd6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000bda:	3368      	adds	r3, #104	@ 0x68
 8000bdc:	443b      	add	r3, r7
 8000bde:	2230      	movs	r2, #48	@ 0x30
 8000be0:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000be4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000be8:	3301      	adds	r3, #1
 8000bea:	3368      	adds	r3, #104	@ 0x68
 8000bec:	443b      	add	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000bf4:	4862      	ldr	r0, [pc, #392]	@ (8000d80 <main+0xc10>)
 8000bf6:	f007 f92d 	bl	8007e54 <Str_Len>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	4b5e      	ldr	r3, [pc, #376]	@ (8000d80 <main+0xc10>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	4857      	ldr	r0, [pc, #348]	@ (8000d68 <main+0xbf8>)
 8000c0a:	f007 f8b6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000c0e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c12:	3301      	adds	r3, #1
 8000c14:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000c18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4851      	ldr	r0, [pc, #324]	@ (8000d68 <main+0xbf8>)
 8000c22:	f007 f86e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000c26:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	484e      	ldr	r0, [pc, #312]	@ (8000d68 <main+0xbf8>)
 8000c30:	f007 f8cd 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000c34:	f007 fa74 	bl	8008120 <HAL_GetTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	33fa      	adds	r3, #250	@ 0xfa
 8000c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c3e:	e317      	b.n	8001270 <main+0x1100>
			}

			//if 1 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8000c40:	2100      	movs	r1, #0
 8000c42:	484d      	ldr	r0, [pc, #308]	@ (8000d78 <main+0xc08>)
 8000c44:	f007 f9fc 	bl	8008040 <Keypad_Get_Key>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d042      	beq.n	8000cd4 <main+0xb64>
					&& (current_tick >= general_delay)) {
 8000c4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d33e      	bcc.n	8000cd4 <main+0xb64>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000c56:	2300      	movs	r3, #0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4842      	ldr	r0, [pc, #264]	@ (8000d68 <main+0xbf8>)
 8000c5e:	f007 f8b6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000c62:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d827      	bhi.n	8000cba <main+0xb4a>
					entered_password[input_index] = '1';
 8000c6a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c6e:	3368      	adds	r3, #104	@ 0x68
 8000c70:	443b      	add	r3, r7
 8000c72:	2231      	movs	r2, #49	@ 0x31
 8000c74:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000c78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	3368      	adds	r3, #104	@ 0x68
 8000c80:	443b      	add	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000c88:	483d      	ldr	r0, [pc, #244]	@ (8000d80 <main+0xc10>)
 8000c8a:	f007 f8e3 	bl	8007e54 <Str_Len>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	4b39      	ldr	r3, [pc, #228]	@ (8000d80 <main+0xc10>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4832      	ldr	r0, [pc, #200]	@ (8000d68 <main+0xbf8>)
 8000c9e:	f007 f86c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000ca2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000cac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	482c      	ldr	r0, [pc, #176]	@ (8000d68 <main+0xbf8>)
 8000cb6:	f007 f824 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000cba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <main+0xbf8>)
 8000cc4:	f007 f883 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000cc8:	f007 fa2a 	bl	8008120 <HAL_GetTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	33fa      	adds	r3, #250	@ 0xfa
 8000cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000cd2:	e2cd      	b.n	8001270 <main+0x1100>
			}

			//if 2 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4828      	ldr	r0, [pc, #160]	@ (8000d78 <main+0xc08>)
 8000cd8:	f007 f9b2 	bl	8008040 <Keypad_Get_Key>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d050      	beq.n	8000d84 <main+0xc14>
					&& (current_tick >= general_delay)) {
 8000ce2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d34c      	bcc.n	8000d84 <main+0xc14>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000cea:	2300      	movs	r3, #0
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	481d      	ldr	r0, [pc, #116]	@ (8000d68 <main+0xbf8>)
 8000cf2:	f007 f86c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000cf6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d827      	bhi.n	8000d4e <main+0xbde>
					entered_password[input_index] = '2';
 8000cfe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d02:	3368      	adds	r3, #104	@ 0x68
 8000d04:	443b      	add	r3, r7
 8000d06:	2232      	movs	r2, #50	@ 0x32
 8000d08:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000d0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d10:	3301      	adds	r3, #1
 8000d12:	3368      	adds	r3, #104	@ 0x68
 8000d14:	443b      	add	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000d1c:	4818      	ldr	r0, [pc, #96]	@ (8000d80 <main+0xc10>)
 8000d1e:	f007 f899 	bl	8007e54 <Str_Len>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <main+0xc10>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <main+0xbf8>)
 8000d32:	f007 f822 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000d36:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000d40:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000d44:	461a      	mov	r2, r3
 8000d46:	2101      	movs	r1, #1
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <main+0xbf8>)
 8000d4a:	f006 ffda 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000d4e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000d52:	2301      	movs	r3, #1
 8000d54:	2101      	movs	r1, #1
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <main+0xbf8>)
 8000d58:	f007 f839 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000d5c:	f007 f9e0 	bl	8008120 <HAL_GetTick>
 8000d60:	4603      	mov	r3, r0
 8000d62:	33fa      	adds	r3, #250	@ 0xfa
 8000d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d66:	e283      	b.n	8001270 <main+0x1100>
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	0800bd68 	.word	0x0800bd68
 8000d70:	20000168 	.word	0x20000168
 8000d74:	0800bd1c 	.word	0x0800bd1c
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	0800bd74 	.word	0x0800bd74
 8000d80:	0800bd80 	.word	0x0800bd80
			}

			//if 3 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8000d84:	2102      	movs	r1, #2
 8000d86:	48b8      	ldr	r0, [pc, #736]	@ (8001068 <main+0xef8>)
 8000d88:	f007 f95a 	bl	8008040 <Keypad_Get_Key>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d042      	beq.n	8000e18 <main+0xca8>
					&& (current_tick >= general_delay)) {
 8000d92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d33e      	bcc.n	8000e18 <main+0xca8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2101      	movs	r1, #1
 8000da0:	48b2      	ldr	r0, [pc, #712]	@ (800106c <main+0xefc>)
 8000da2:	f007 f814 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000da6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d827      	bhi.n	8000dfe <main+0xc8e>
					entered_password[input_index] = '3';
 8000dae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000db2:	3368      	adds	r3, #104	@ 0x68
 8000db4:	443b      	add	r3, r7
 8000db6:	2233      	movs	r2, #51	@ 0x33
 8000db8:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000dbc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	3368      	adds	r3, #104	@ 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000dcc:	48a8      	ldr	r0, [pc, #672]	@ (8001070 <main+0xf00>)
 8000dce:	f007 f841 	bl	8007e54 <Str_Len>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4ba4      	ldr	r3, [pc, #656]	@ (8001070 <main+0xf00>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	48a2      	ldr	r0, [pc, #648]	@ (800106c <main+0xefc>)
 8000de2:	f006 ffca 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000de6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000dea:	3301      	adds	r3, #1
 8000dec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000df0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000df4:	461a      	mov	r2, r3
 8000df6:	2101      	movs	r1, #1
 8000df8:	489c      	ldr	r0, [pc, #624]	@ (800106c <main+0xefc>)
 8000dfa:	f006 ff82 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000dfe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000e02:	2301      	movs	r3, #1
 8000e04:	2101      	movs	r1, #1
 8000e06:	4899      	ldr	r0, [pc, #612]	@ (800106c <main+0xefc>)
 8000e08:	f006 ffe1 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000e0c:	f007 f988 	bl	8008120 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	33fa      	adds	r3, #250	@ 0xfa
 8000e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000e16:	e22b      	b.n	8001270 <main+0x1100>
			}
			//if 4 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4893      	ldr	r0, [pc, #588]	@ (8001068 <main+0xef8>)
 8000e1c:	f007 f910 	bl	8008040 <Keypad_Get_Key>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d042      	beq.n	8000eac <main+0xd3c>
					&& (current_tick >= general_delay)) {
 8000e26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d33e      	bcc.n	8000eac <main+0xd3c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2200      	movs	r2, #0
 8000e32:	2101      	movs	r1, #1
 8000e34:	488d      	ldr	r0, [pc, #564]	@ (800106c <main+0xefc>)
 8000e36:	f006 ffca 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000e3a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d827      	bhi.n	8000e92 <main+0xd22>
					entered_password[input_index] = '4';
 8000e42:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e46:	3368      	adds	r3, #104	@ 0x68
 8000e48:	443b      	add	r3, r7
 8000e4a:	2234      	movs	r2, #52	@ 0x34
 8000e4c:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000e50:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e54:	3301      	adds	r3, #1
 8000e56:	3368      	adds	r3, #104	@ 0x68
 8000e58:	443b      	add	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000e60:	4883      	ldr	r0, [pc, #524]	@ (8001070 <main+0xf00>)
 8000e62:	f006 fff7 	bl	8007e54 <Str_Len>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4b7f      	ldr	r3, [pc, #508]	@ (8001070 <main+0xf00>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	487d      	ldr	r0, [pc, #500]	@ (800106c <main+0xefc>)
 8000e76:	f006 ff80 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000e7a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000e84:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4877      	ldr	r0, [pc, #476]	@ (800106c <main+0xefc>)
 8000e8e:	f006 ff38 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000e92:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000e96:	2301      	movs	r3, #1
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4874      	ldr	r0, [pc, #464]	@ (800106c <main+0xefc>)
 8000e9c:	f006 ff97 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000ea0:	f007 f93e 	bl	8008120 <HAL_GetTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	33fa      	adds	r3, #250	@ 0xfa
 8000ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000eaa:	e1e1      	b.n	8001270 <main+0x1100>
			}

			//if 5 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8000eac:	2105      	movs	r1, #5
 8000eae:	486e      	ldr	r0, [pc, #440]	@ (8001068 <main+0xef8>)
 8000eb0:	f007 f8c6 	bl	8008040 <Keypad_Get_Key>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d042      	beq.n	8000f40 <main+0xdd0>
					&& (current_tick >= general_delay)) {
 8000eba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d33e      	bcc.n	8000f40 <main+0xdd0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4868      	ldr	r0, [pc, #416]	@ (800106c <main+0xefc>)
 8000eca:	f006 ff80 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000ece:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d827      	bhi.n	8000f26 <main+0xdb6>
					entered_password[input_index] = '5';
 8000ed6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000eda:	3368      	adds	r3, #104	@ 0x68
 8000edc:	443b      	add	r3, r7
 8000ede:	2235      	movs	r2, #53	@ 0x35
 8000ee0:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000ee4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ee8:	3301      	adds	r3, #1
 8000eea:	3368      	adds	r3, #104	@ 0x68
 8000eec:	443b      	add	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000ef4:	485e      	ldr	r0, [pc, #376]	@ (8001070 <main+0xf00>)
 8000ef6:	f006 ffad 	bl	8007e54 <Str_Len>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4b5a      	ldr	r3, [pc, #360]	@ (8001070 <main+0xf00>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	4858      	ldr	r0, [pc, #352]	@ (800106c <main+0xefc>)
 8000f0a:	f006 ff36 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000f0e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f12:	3301      	adds	r3, #1
 8000f14:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000f18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4852      	ldr	r0, [pc, #328]	@ (800106c <main+0xefc>)
 8000f22:	f006 feee 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000f26:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	484f      	ldr	r0, [pc, #316]	@ (800106c <main+0xefc>)
 8000f30:	f006 ff4d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000f34:	f007 f8f4 	bl	8008120 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	33fa      	adds	r3, #250	@ 0xfa
 8000f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f3e:	e197      	b.n	8001270 <main+0x1100>
			}

			//if 6 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8000f40:	2106      	movs	r1, #6
 8000f42:	4849      	ldr	r0, [pc, #292]	@ (8001068 <main+0xef8>)
 8000f44:	f007 f87c 	bl	8008040 <Keypad_Get_Key>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d042      	beq.n	8000fd4 <main+0xe64>
					&& (current_tick >= general_delay)) {
 8000f4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d33e      	bcc.n	8000fd4 <main+0xe64>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000f56:	2300      	movs	r3, #0
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4843      	ldr	r0, [pc, #268]	@ (800106c <main+0xefc>)
 8000f5e:	f006 ff36 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000f62:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d827      	bhi.n	8000fba <main+0xe4a>
					entered_password[input_index] = '6';
 8000f6a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f6e:	3368      	adds	r3, #104	@ 0x68
 8000f70:	443b      	add	r3, r7
 8000f72:	2236      	movs	r2, #54	@ 0x36
 8000f74:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8000f78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	3368      	adds	r3, #104	@ 0x68
 8000f80:	443b      	add	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8000f88:	4839      	ldr	r0, [pc, #228]	@ (8001070 <main+0xf00>)
 8000f8a:	f006 ff63 	bl	8007e54 <Str_Len>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <main+0xf00>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4833      	ldr	r0, [pc, #204]	@ (800106c <main+0xefc>)
 8000f9e:	f006 feec 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8000fa2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8000fac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	482d      	ldr	r0, [pc, #180]	@ (800106c <main+0xefc>)
 8000fb6:	f006 fea4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8000fba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	482a      	ldr	r0, [pc, #168]	@ (800106c <main+0xefc>)
 8000fc4:	f006 ff03 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8000fc8:	f007 f8aa 	bl	8008120 <HAL_GetTick>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	33fa      	adds	r3, #250	@ 0xfa
 8000fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fd2:	e14d      	b.n	8001270 <main+0x1100>
			}
			//if 7 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4824      	ldr	r0, [pc, #144]	@ (8001068 <main+0xef8>)
 8000fd8:	f007 f832 	bl	8008040 <Keypad_Get_Key>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d048      	beq.n	8001074 <main+0xf04>
					&& (current_tick >= general_delay)) {
 8000fe2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d344      	bcc.n	8001074 <main+0xf04>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8000fea:	2300      	movs	r3, #0
 8000fec:	2200      	movs	r2, #0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	481e      	ldr	r0, [pc, #120]	@ (800106c <main+0xefc>)
 8000ff2:	f006 feec 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8000ff6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d827      	bhi.n	800104e <main+0xede>
					entered_password[input_index] = '7';
 8000ffe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001002:	3368      	adds	r3, #104	@ 0x68
 8001004:	443b      	add	r3, r7
 8001006:	2237      	movs	r2, #55	@ 0x37
 8001008:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800100c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001010:	3301      	adds	r3, #1
 8001012:	3368      	adds	r3, #104	@ 0x68
 8001014:	443b      	add	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 800101c:	4814      	ldr	r0, [pc, #80]	@ (8001070 <main+0xf00>)
 800101e:	f006 ff19 	bl	8007e54 <Str_Len>
 8001022:	4603      	mov	r3, r0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <main+0xf00>)
 800102e:	2101      	movs	r1, #1
 8001030:	480e      	ldr	r0, [pc, #56]	@ (800106c <main+0xefc>)
 8001032:	f006 fea2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001036:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800103a:	3301      	adds	r3, #1
 800103c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001040:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001044:	461a      	mov	r2, r3
 8001046:	2101      	movs	r1, #1
 8001048:	4808      	ldr	r0, [pc, #32]	@ (800106c <main+0xefc>)
 800104a:	f006 fe5a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800104e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001052:	2301      	movs	r3, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <main+0xefc>)
 8001058:	f006 feb9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800105c:	f007 f860 	bl	8008120 <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	33fa      	adds	r3, #250	@ 0xfa
 8001064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001066:	e103      	b.n	8001270 <main+0x1100>
 8001068:	20000000 	.word	0x20000000
 800106c:	2000001c 	.word	0x2000001c
 8001070:	0800bd80 	.word	0x0800bd80
			}
			//if 8 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8001074:	2109      	movs	r1, #9
 8001076:	48b7      	ldr	r0, [pc, #732]	@ (8001354 <main+0x11e4>)
 8001078:	f006 ffe2 	bl	8008040 <Keypad_Get_Key>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d042      	beq.n	8001108 <main+0xf98>
					&& (current_tick >= general_delay)) {
 8001082:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001086:	429a      	cmp	r2, r3
 8001088:	d33e      	bcc.n	8001108 <main+0xf98>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800108a:	2300      	movs	r3, #0
 800108c:	2200      	movs	r2, #0
 800108e:	2101      	movs	r1, #1
 8001090:	48b1      	ldr	r0, [pc, #708]	@ (8001358 <main+0x11e8>)
 8001092:	f006 fe9c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 8001096:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800109a:	2b03      	cmp	r3, #3
 800109c:	d827      	bhi.n	80010ee <main+0xf7e>
					entered_password[input_index] = '8';
 800109e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80010a2:	3368      	adds	r3, #104	@ 0x68
 80010a4:	443b      	add	r3, r7
 80010a6:	2238      	movs	r2, #56	@ 0x38
 80010a8:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80010ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80010b0:	3301      	adds	r3, #1
 80010b2:	3368      	adds	r3, #104	@ 0x68
 80010b4:	443b      	add	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 80010bc:	48a7      	ldr	r0, [pc, #668]	@ (800135c <main+0x11ec>)
 80010be:	f006 fec9 	bl	8007e54 <Str_Len>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4ba3      	ldr	r3, [pc, #652]	@ (800135c <main+0x11ec>)
 80010ce:	2101      	movs	r1, #1
 80010d0:	48a1      	ldr	r0, [pc, #644]	@ (8001358 <main+0x11e8>)
 80010d2:	f006 fe52 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80010d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80010da:	3301      	adds	r3, #1
 80010dc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80010e0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80010e4:	461a      	mov	r2, r3
 80010e6:	2101      	movs	r1, #1
 80010e8:	489b      	ldr	r0, [pc, #620]	@ (8001358 <main+0x11e8>)
 80010ea:	f006 fe0a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80010ee:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80010f2:	2301      	movs	r3, #1
 80010f4:	2101      	movs	r1, #1
 80010f6:	4898      	ldr	r0, [pc, #608]	@ (8001358 <main+0x11e8>)
 80010f8:	f006 fe69 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80010fc:	f007 f810 	bl	8008120 <HAL_GetTick>
 8001100:	4603      	mov	r3, r0
 8001102:	33fa      	adds	r3, #250	@ 0xfa
 8001104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001106:	e0b3      	b.n	8001270 <main+0x1100>
			}
			//if 9 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8001108:	210a      	movs	r1, #10
 800110a:	4892      	ldr	r0, [pc, #584]	@ (8001354 <main+0x11e4>)
 800110c:	f006 ff98 	bl	8008040 <Keypad_Get_Key>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d042      	beq.n	800119c <main+0x102c>
					&& (current_tick >= general_delay)) {
 8001116:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800111a:	429a      	cmp	r2, r3
 800111c:	d33e      	bcc.n	800119c <main+0x102c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800111e:	2300      	movs	r3, #0
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	488c      	ldr	r0, [pc, #560]	@ (8001358 <main+0x11e8>)
 8001126:	f006 fe52 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 4) {
 800112a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800112e:	2b03      	cmp	r3, #3
 8001130:	d827      	bhi.n	8001182 <main+0x1012>
					entered_password[input_index] = '9';
 8001132:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001136:	3368      	adds	r3, #104	@ 0x68
 8001138:	443b      	add	r3, r7
 800113a:	2239      	movs	r2, #57	@ 0x39
 800113c:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8001140:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001144:	3301      	adds	r3, #1
 8001146:	3368      	adds	r3, #104	@ 0x68
 8001148:	443b      	add	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "*");
 8001150:	4882      	ldr	r0, [pc, #520]	@ (800135c <main+0x11ec>)
 8001152:	f006 fe7f 	bl	8007e54 <Str_Len>
 8001156:	4603      	mov	r3, r0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b7e      	ldr	r3, [pc, #504]	@ (800135c <main+0x11ec>)
 8001162:	2101      	movs	r1, #1
 8001164:	487c      	ldr	r0, [pc, #496]	@ (8001358 <main+0x11e8>)
 8001166:	f006 fe08 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800116a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800116e:	3301      	adds	r3, #1
 8001170:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001174:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001178:	461a      	mov	r2, r3
 800117a:	2101      	movs	r1, #1
 800117c:	4876      	ldr	r0, [pc, #472]	@ (8001358 <main+0x11e8>)
 800117e:	f006 fdc0 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001182:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001186:	2301      	movs	r3, #1
 8001188:	2101      	movs	r1, #1
 800118a:	4873      	ldr	r0, [pc, #460]	@ (8001358 <main+0x11e8>)
 800118c:	f006 fe1f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001190:	f006 ffc6 	bl	8008120 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	33fa      	adds	r3, #250	@ 0xfa
 8001198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800119a:	e069      	b.n	8001270 <main+0x1100>
			}

			//if yes is pressed
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 800119c:	210f      	movs	r1, #15
 800119e:	486d      	ldr	r0, [pc, #436]	@ (8001354 <main+0x11e4>)
 80011a0:	f006 ff4e 	bl	8008040 <Keypad_Get_Key>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d062      	beq.n	8001270 <main+0x1100>
					&& (current_tick >= general_delay)) {
 80011aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d35e      	bcc.n	8001270 <main+0x1100>
				// Compare entered password with the saved password (menu_pass)
				if (strcmp(entered_password, menu_pass) == 0) {
 80011b2:	f107 0214 	add.w	r2, r7, #20
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7fe ffc5 	bl	800014c <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d124      	bne.n	8001212 <main+0x10a2>

					// Password is correct, proceed to the next menu or operation
					Alcd_Clear(&lcd);
 80011c8:	4863      	ldr	r0, [pc, #396]	@ (8001358 <main+0x11e8>)
 80011ca:	f006 fdef 	bl	8007dac <Alcd_Clear>
					Alcd_PutAt(&lcd, 0, 0, "Access Granted");
 80011ce:	4864      	ldr	r0, [pc, #400]	@ (8001360 <main+0x11f0>)
 80011d0:	f006 fe40 	bl	8007e54 <Str_Len>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	4b61      	ldr	r3, [pc, #388]	@ (8001360 <main+0x11f0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	485d      	ldr	r0, [pc, #372]	@ (8001358 <main+0x11e8>)
 80011e2:	f006 fdca 	bl	8007d7a <Alcd_PutAt_n>
					//HAL_Delay(2000);

					//raise the password compare flag
					password_comp_flag = 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

					Alcd_Display_Control(&lcd, 1, 0, 0);
 80011ec:	2300      	movs	r3, #0
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	4859      	ldr	r0, [pc, #356]	@ (8001358 <main+0x11e8>)
 80011f4:	f006 fdeb 	bl	8007dce <Alcd_Display_Control>

					status = 21;
 80011f8:	2315      	movs	r3, #21
 80011fa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					input_index = 0; //reset the input index
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					general_delay = HAL_GetTick() + 1500;
 8001204:	f006 ff8c 	bl	8008120 <HAL_GetTick>
 8001208:	4603      	mov	r3, r0
 800120a:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800120e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001210:	e023      	b.n	800125a <main+0x10ea>
				}

				else {
					// Password is incorrect, display error message
					Alcd_Clear(&lcd);
 8001212:	4851      	ldr	r0, [pc, #324]	@ (8001358 <main+0x11e8>)
 8001214:	f006 fdca 	bl	8007dac <Alcd_Clear>
					Alcd_PutAt(&lcd, 0, 0, "Wrong Password");
 8001218:	4852      	ldr	r0, [pc, #328]	@ (8001364 <main+0x11f4>)
 800121a:	f006 fe1b 	bl	8007e54 <Str_Len>
 800121e:	4603      	mov	r3, r0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4b4f      	ldr	r3, [pc, #316]	@ (8001364 <main+0x11f4>)
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	484b      	ldr	r0, [pc, #300]	@ (8001358 <main+0x11e8>)
 800122c:	f006 fda5 	bl	8007d7a <Alcd_PutAt_n>

					//raise the password compare flag
					password_comp_flag = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

					input_index = 0; //reset the input index
 8001236:	2300      	movs	r3, #0
 8001238:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_Display_Control(&lcd, 1, 0, 0);
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	4845      	ldr	r0, [pc, #276]	@ (8001358 <main+0x11e8>)
 8001244:	f006 fdc3 	bl	8007dce <Alcd_Display_Control>

					status = 10;
 8001248:	230a      	movs	r3, #10
 800124a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1500;
 800124e:	f006 ff67 	bl	8008120 <HAL_GetTick>
 8001252:	4603      	mov	r3, r0
 8001254:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001258:	65fb      	str	r3, [r7, #92]	@ 0x5c

				}

				//create a delay
				if ((password_comp_flag == 1)
 800125a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800125e:	2b01      	cmp	r3, #1
 8001260:	d106      	bne.n	8001270 <main+0x1100>
						&& (current_tick >= general_delay)) {
 8001262:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001266:	429a      	cmp	r2, r3
 8001268:	d302      	bcc.n	8001270 <main+0x1100>

					password_comp_flag = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		while ((status == 20) && (current_tick >= general_delay)) {
 8001270:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001274:	2b14      	cmp	r3, #20
 8001276:	f040 8090 	bne.w	800139a <main+0x122a>
 800127a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800127c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800127e:	429a      	cmp	r2, r3
 8001280:	f4bf ac4b 	bcs.w	8000b1a <main+0x9aa>
			}

		}

		//view the edit menu -> status 21
		while ((status == 21) && (current_tick >= general_delay)) {
 8001284:	e089      	b.n	800139a <main+0x122a>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001286:	f006 ff4b 	bl	8008120 <HAL_GetTick>
 800128a:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 800128c:	4832      	ldr	r0, [pc, #200]	@ (8001358 <main+0x11e8>)
 800128e:	f006 fd8d 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: parameters");
 8001292:	4835      	ldr	r0, [pc, #212]	@ (8001368 <main+0x11f8>)
 8001294:	f006 fdde 	bl	8007e54 <Str_Len>
 8001298:	4603      	mov	r3, r0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <main+0x11f8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	482c      	ldr	r0, [pc, #176]	@ (8001358 <main+0x11e8>)
 80012a6:	f006 fd68 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: calibration");
 80012aa:	4830      	ldr	r0, [pc, #192]	@ (800136c <main+0x11fc>)
 80012ac:	f006 fdd2 	bl	8007e54 <Str_Len>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <main+0x11fc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	2101      	movs	r1, #1
 80012bc:	4826      	ldr	r0, [pc, #152]	@ (8001358 <main+0x11e8>)
 80012be:	f006 fd5c 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80012c2:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80012c6:	f107 001c 	add.w	r0, r7, #28
 80012ca:	4a29      	ldr	r2, [pc, #164]	@ (8001370 <main+0x1200>)
 80012cc:	2132      	movs	r1, #50	@ 0x32
 80012ce:	f00a f841 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff42 	bl	8000160 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f107 021c 	add.w	r2, r7, #28
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	4613      	mov	r3, r2
 80012e8:	220e      	movs	r2, #14
 80012ea:	2100      	movs	r1, #0
 80012ec:	481a      	ldr	r0, [pc, #104]	@ (8001358 <main+0x11e8>)
 80012ee:	f006 fd44 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80012f2:	4818      	ldr	r0, [pc, #96]	@ (8001354 <main+0x11e4>)
 80012f4:	f006 fe08 	bl	8007f08 <Keypad_Refresh>

			//in case 1 is selected -> edit parameters (status 23)
			if (Keypad_Get_Key(&kp, kp_button_1)
 80012f8:	2100      	movs	r1, #0
 80012fa:	4816      	ldr	r0, [pc, #88]	@ (8001354 <main+0x11e4>)
 80012fc:	f006 fea0 	bl	8008040 <Keypad_Get_Key>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <main+0x11a6>
					&& (current_tick >= general_delay)) {
 8001306:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130a:	429a      	cmp	r2, r3
 800130c:	d303      	bcc.n	8001316 <main+0x11a6>

				status = 23;
 800130e:	2317      	movs	r3, #23
 8001310:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001314:	e03c      	b.n	8001390 <main+0x1220>

			}

			//2 is selected -> calibrate dosing time (status 24)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8001316:	2101      	movs	r1, #1
 8001318:	480e      	ldr	r0, [pc, #56]	@ (8001354 <main+0x11e4>)
 800131a:	f006 fe91 	bl	8008040 <Keypad_Get_Key>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <main+0x11c4>
					&& (current_tick >= general_delay)) {
 8001324:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001328:	429a      	cmp	r2, r3
 800132a:	d303      	bcc.n	8001334 <main+0x11c4>

				status = 24;
 800132c:	2318      	movs	r3, #24
 800132e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001332:	e02d      	b.n	8001390 <main+0x1220>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8001334:	210e      	movs	r1, #14
 8001336:	4807      	ldr	r0, [pc, #28]	@ (8001354 <main+0x11e4>)
 8001338:	f006 fe82 	bl	8008040 <Keypad_Get_Key>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d018      	beq.n	8001374 <main+0x1204>
					&& (current_tick >= general_delay)) {
 8001342:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001346:	429a      	cmp	r2, r3
 8001348:	d314      	bcc.n	8001374 <main+0x1204>

				//back to previous menu
				status = 10;
 800134a:	230a      	movs	r3, #10
 800134c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001350:	e01e      	b.n	8001390 <main+0x1220>
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000
 8001358:	2000001c 	.word	0x2000001c
 800135c:	0800bd80 	.word	0x0800bd80
 8001360:	0800bd84 	.word	0x0800bd84
 8001364:	0800bd94 	.word	0x0800bd94
 8001368:	0800bda4 	.word	0x0800bda4
 800136c:	0800bdb4 	.word	0x0800bdb4
 8001370:	0800bd1c 	.word	0x0800bd1c

			}
			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8001374:	2103      	movs	r1, #3
 8001376:	4899      	ldr	r0, [pc, #612]	@ (80015dc <main+0x146c>)
 8001378:	f006 fe62 	bl	8008040 <Keypad_Get_Key>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <main+0x1220>
					&& (current_tick >= general_delay)) {
 8001382:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001386:	429a      	cmp	r2, r3
 8001388:	d302      	bcc.n	8001390 <main+0x1220>

				//go to next state
				status = 22;
 800138a:	2316      	movs	r3, #22
 800138c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8001390:	f006 fec6 	bl	8008120 <HAL_GetTick>
 8001394:	4603      	mov	r3, r0
 8001396:	33fa      	adds	r3, #250	@ 0xfa
 8001398:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 21) && (current_tick >= general_delay)) {
 800139a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800139e:	2b15      	cmp	r3, #21
 80013a0:	f040 8094 	bne.w	80014cc <main+0x135c>
 80013a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80013a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f4bf af6c 	bcs.w	8001286 <main+0x1116>
		}

		//view the extended edit menu -> status 22
		while ((status == 22) && (current_tick >= general_delay)) {
 80013ae:	e08d      	b.n	80014cc <main+0x135c>

			//get the current tick number
			current_tick = HAL_GetTick();
 80013b0:	f006 feb6 	bl	8008120 <HAL_GetTick>
 80013b4:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80013b6:	488a      	ldr	r0, [pc, #552]	@ (80015e0 <main+0x1470>)
 80013b8:	f006 fcf8 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "3: time");
 80013bc:	4889      	ldr	r0, [pc, #548]	@ (80015e4 <main+0x1474>)
 80013be:	f006 fd49 	bl	8007e54 <Str_Len>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4b86      	ldr	r3, [pc, #536]	@ (80015e4 <main+0x1474>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	4884      	ldr	r0, [pc, #528]	@ (80015e0 <main+0x1470>)
 80013d0:	f006 fcd3 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "4: date");
 80013d4:	4884      	ldr	r0, [pc, #528]	@ (80015e8 <main+0x1478>)
 80013d6:	f006 fd3d 	bl	8007e54 <Str_Len>
 80013da:	4603      	mov	r3, r0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	4b81      	ldr	r3, [pc, #516]	@ (80015e8 <main+0x1478>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	487e      	ldr	r0, [pc, #504]	@ (80015e0 <main+0x1470>)
 80013e8:	f006 fcc7 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80013ec:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80013f0:	f107 001c 	add.w	r0, r7, #28
 80013f4:	4a7d      	ldr	r2, [pc, #500]	@ (80015ec <main+0x147c>)
 80013f6:	2132      	movs	r1, #50	@ 0x32
 80013f8:	f009 ffac 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe fead 	bl	8000160 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f107 021c 	add.w	r2, r7, #28
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4613      	mov	r3, r2
 8001412:	220e      	movs	r2, #14
 8001414:	2100      	movs	r1, #0
 8001416:	4872      	ldr	r0, [pc, #456]	@ (80015e0 <main+0x1470>)
 8001418:	f006 fcaf 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800141c:	486f      	ldr	r0, [pc, #444]	@ (80015dc <main+0x146c>)
 800141e:	f006 fd73 	bl	8007f08 <Keypad_Refresh>

			//in case 3 is selected -> edit time (status 25)
			if (Keypad_Get_Key(&kp, kp_button_3)
 8001422:	2102      	movs	r1, #2
 8001424:	486d      	ldr	r0, [pc, #436]	@ (80015dc <main+0x146c>)
 8001426:	f006 fe0b 	bl	8008040 <Keypad_Get_Key>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00a      	beq.n	8001446 <main+0x12d6>
					&& (current_tick >= general_delay)) {
 8001430:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001434:	429a      	cmp	r2, r3
 8001436:	d306      	bcc.n	8001446 <main+0x12d6>
				Alcd_Clear(&lcd);
 8001438:	4869      	ldr	r0, [pc, #420]	@ (80015e0 <main+0x1470>)
 800143a:	f006 fcb7 	bl	8007dac <Alcd_Clear>
				status = 25;
 800143e:	2319      	movs	r3, #25
 8001440:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001444:	e03d      	b.n	80014c2 <main+0x1352>

			}

			//4 is selected -> edit date (status 26)
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8001446:	2104      	movs	r1, #4
 8001448:	4864      	ldr	r0, [pc, #400]	@ (80015dc <main+0x146c>)
 800144a:	f006 fdf9 	bl	8008040 <Keypad_Get_Key>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00a      	beq.n	800146a <main+0x12fa>
					&& (current_tick >= general_delay)) {
 8001454:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001458:	429a      	cmp	r2, r3
 800145a:	d306      	bcc.n	800146a <main+0x12fa>

				Alcd_Clear(&lcd);
 800145c:	4860      	ldr	r0, [pc, #384]	@ (80015e0 <main+0x1470>)
 800145e:	f006 fca5 	bl	8007dac <Alcd_Clear>
				status = 26;
 8001462:	231a      	movs	r3, #26
 8001464:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001468:	e02b      	b.n	80014c2 <main+0x1352>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 800146a:	210e      	movs	r1, #14
 800146c:	485b      	ldr	r0, [pc, #364]	@ (80015dc <main+0x146c>)
 800146e:	f006 fde7 	bl	8008040 <Keypad_Get_Key>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <main+0x1318>
					&& (current_tick >= general_delay)) {
 8001478:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800147a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800147c:	429a      	cmp	r2, r3
 800147e:	d303      	bcc.n	8001488 <main+0x1318>

				//back to previous menu
				status = 10;
 8001480:	230a      	movs	r3, #10
 8001482:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001486:	e01c      	b.n	80014c2 <main+0x1352>

			}
			//previous is selected
			else if (Keypad_Get_Key(&kp, kp_button_previous)
 8001488:	2107      	movs	r1, #7
 800148a:	4854      	ldr	r0, [pc, #336]	@ (80015dc <main+0x146c>)
 800148c:	f006 fdd8 	bl	8008040 <Keypad_Get_Key>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <main+0x1336>
					&& (current_tick >= general_delay)) {
 8001496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800149a:	429a      	cmp	r2, r3
 800149c:	d303      	bcc.n	80014a6 <main+0x1336>

				//go to previous state
				status = 21;
 800149e:	2315      	movs	r3, #21
 80014a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80014a4:	e00d      	b.n	80014c2 <main+0x1352>

			}

			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 80014a6:	2103      	movs	r1, #3
 80014a8:	484c      	ldr	r0, [pc, #304]	@ (80015dc <main+0x146c>)
 80014aa:	f006 fdc9 	bl	8008040 <Keypad_Get_Key>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <main+0x1352>
					&& (current_tick >= general_delay)) {
 80014b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d302      	bcc.n	80014c2 <main+0x1352>

				//go to next state
				status = 27;
 80014bc:	231b      	movs	r3, #27
 80014be:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80014c2:	f006 fe2d 	bl	8008120 <HAL_GetTick>
 80014c6:	4603      	mov	r3, r0
 80014c8:	33fa      	adds	r3, #250	@ 0xfa
 80014ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 22) && (current_tick >= general_delay)) {
 80014cc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80014d0:	2b16      	cmp	r3, #22
 80014d2:	d179      	bne.n	80015c8 <main+0x1458>
 80014d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d8:	429a      	cmp	r2, r3
 80014da:	f4bf af69 	bcs.w	80013b0 <main+0x1240>
		}

		//edit the time
		while ((status == 25) && (current_tick >= general_delay)) {
 80014de:	e073      	b.n	80015c8 <main+0x1458>

			//get the current tick number
			current_tick = HAL_GetTick();
 80014e0:	f006 fe1e 	bl	8008120 <HAL_GetTick>
 80014e4:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80014e6:	483e      	ldr	r0, [pc, #248]	@ (80015e0 <main+0x1470>)
 80014e8:	f006 fc60 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "format");
 80014ec:	4840      	ldr	r0, [pc, #256]	@ (80015f0 <main+0x1480>)
 80014ee:	f006 fcb1 	bl	8007e54 <Str_Len>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <main+0x1480>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	4838      	ldr	r0, [pc, #224]	@ (80015e0 <main+0x1470>)
 8001500:	f006 fc3b 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "1: 12h    2: 24h");
 8001504:	483b      	ldr	r0, [pc, #236]	@ (80015f4 <main+0x1484>)
 8001506:	f006 fca5 	bl	8007e54 <Str_Len>
 800150a:	4603      	mov	r3, r0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <main+0x1484>)
 8001512:	2200      	movs	r2, #0
 8001514:	2101      	movs	r1, #1
 8001516:	4832      	ldr	r0, [pc, #200]	@ (80015e0 <main+0x1470>)
 8001518:	f006 fc2f 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 800151c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001520:	f107 001c 	add.w	r0, r7, #28
 8001524:	4a31      	ldr	r2, [pc, #196]	@ (80015ec <main+0x147c>)
 8001526:	2132      	movs	r1, #50	@ 0x32
 8001528:	f009 ff14 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fe15 	bl	8000160 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f107 021c 	add.w	r2, r7, #28
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4613      	mov	r3, r2
 8001542:	220e      	movs	r2, #14
 8001544:	2100      	movs	r1, #0
 8001546:	4826      	ldr	r0, [pc, #152]	@ (80015e0 <main+0x1470>)
 8001548:	f006 fc17 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800154c:	4823      	ldr	r0, [pc, #140]	@ (80015dc <main+0x146c>)
 800154e:	f006 fcdb 	bl	8007f08 <Keypad_Refresh>

			//in case 1 is selected -> 12h format (status 28)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8001552:	2100      	movs	r1, #0
 8001554:	4821      	ldr	r0, [pc, #132]	@ (80015dc <main+0x146c>)
 8001556:	f006 fd73 	bl	8008040 <Keypad_Get_Key>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <main+0x140a>
					&& (current_tick >= general_delay)) {
 8001560:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001564:	429a      	cmp	r2, r3
 8001566:	d308      	bcc.n	800157a <main+0x140a>

				//set 12h format
				CLK.format = 1;
 8001568:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <main+0x1488>)
 800156a:	7c53      	ldrb	r3, [r2, #17]
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	7453      	strb	r3, [r2, #17]
				status = 28;
 8001572:	231c      	movs	r3, #28
 8001574:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001578:	e021      	b.n	80015be <main+0x144e>

			}

			//2 is selected -> 24h format (status 29)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800157a:	2101      	movs	r1, #1
 800157c:	4817      	ldr	r0, [pc, #92]	@ (80015dc <main+0x146c>)
 800157e:	f006 fd5f 	bl	8008040 <Keypad_Get_Key>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00c      	beq.n	80015a2 <main+0x1432>
					&& (current_tick >= general_delay)) {
 8001588:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800158a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800158c:	429a      	cmp	r2, r3
 800158e:	d308      	bcc.n	80015a2 <main+0x1432>

				//set 24h format
				CLK.format = 0;
 8001590:	4a19      	ldr	r2, [pc, #100]	@ (80015f8 <main+0x1488>)
 8001592:	7c53      	ldrb	r3, [r2, #17]
 8001594:	f36f 0300 	bfc	r3, #0, #1
 8001598:	7453      	strb	r3, [r2, #17]

				status = 17;
 800159a:	2311      	movs	r3, #17
 800159c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80015a0:	e00d      	b.n	80015be <main+0x144e>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80015a2:	210e      	movs	r1, #14
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <main+0x146c>)
 80015a6:	f006 fd4b 	bl	8008040 <Keypad_Get_Key>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <main+0x144e>
					&& (current_tick >= general_delay)) {
 80015b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d302      	bcc.n	80015be <main+0x144e>

				//back to previous menu
				status = 22;
 80015b8:	2316      	movs	r3, #22
 80015ba:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80015be:	f006 fdaf 	bl	8008120 <HAL_GetTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	33fa      	adds	r3, #250	@ 0xfa
 80015c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 25) && (current_tick >= general_delay)) {
 80015c8:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80015cc:	2b19      	cmp	r3, #25
 80015ce:	f040 808f 	bne.w	80016f0 <main+0x1580>
 80015d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d282      	bcs.n	80014e0 <main+0x1370>
		}

		//12h time format
		while ((status == 28) && (current_tick >= general_delay)) {
 80015da:	e089      	b.n	80016f0 <main+0x1580>
 80015dc:	20000000 	.word	0x20000000
 80015e0:	2000001c 	.word	0x2000001c
 80015e4:	0800bdc4 	.word	0x0800bdc4
 80015e8:	0800bdcc 	.word	0x0800bdcc
 80015ec:	0800bd1c 	.word	0x0800bd1c
 80015f0:	0800bdd4 	.word	0x0800bdd4
 80015f4:	0800bddc 	.word	0x0800bddc
 80015f8:	20000150 	.word	0x20000150

			//get the current tick number
			current_tick = HAL_GetTick();
 80015fc:	f006 fd90 	bl	8008120 <HAL_GetTick>
 8001600:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8001602:	48b9      	ldr	r0, [pc, #740]	@ (80018e8 <main+0x1778>)
 8001604:	f006 fbd2 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "format");
 8001608:	48b8      	ldr	r0, [pc, #736]	@ (80018ec <main+0x177c>)
 800160a:	f006 fc23 	bl	8007e54 <Str_Len>
 800160e:	4603      	mov	r3, r0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4bb5      	ldr	r3, [pc, #724]	@ (80018ec <main+0x177c>)
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	48b3      	ldr	r0, [pc, #716]	@ (80018e8 <main+0x1778>)
 800161c:	f006 fbad 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "1: AM    2: 2PM");
 8001620:	48b3      	ldr	r0, [pc, #716]	@ (80018f0 <main+0x1780>)
 8001622:	f006 fc17 	bl	8007e54 <Str_Len>
 8001626:	4603      	mov	r3, r0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4bb0      	ldr	r3, [pc, #704]	@ (80018f0 <main+0x1780>)
 800162e:	2200      	movs	r2, #0
 8001630:	2101      	movs	r1, #1
 8001632:	48ad      	ldr	r0, [pc, #692]	@ (80018e8 <main+0x1778>)
 8001634:	f006 fba1 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001638:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800163c:	f107 001c 	add.w	r0, r7, #28
 8001640:	4aac      	ldr	r2, [pc, #688]	@ (80018f4 <main+0x1784>)
 8001642:	2132      	movs	r1, #50	@ 0x32
 8001644:	f009 fe86 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fd87 	bl	8000160 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f107 021c 	add.w	r2, r7, #28
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	220e      	movs	r2, #14
 8001660:	2100      	movs	r1, #0
 8001662:	48a1      	ldr	r0, [pc, #644]	@ (80018e8 <main+0x1778>)
 8001664:	f006 fb89 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8001668:	48a3      	ldr	r0, [pc, #652]	@ (80018f8 <main+0x1788>)
 800166a:	f006 fc4d 	bl	8007f08 <Keypad_Refresh>

			//in case 1 is selected -> AM (status 29)
			if (Keypad_Get_Key(&kp, kp_button_1)
 800166e:	2100      	movs	r1, #0
 8001670:	48a1      	ldr	r0, [pc, #644]	@ (80018f8 <main+0x1788>)
 8001672:	f006 fce5 	bl	8008040 <Keypad_Get_Key>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00f      	beq.n	800169c <main+0x152c>
					&& (current_tick >= general_delay)) {
 800167c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800167e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001680:	429a      	cmp	r2, r3
 8001682:	d30b      	bcc.n	800169c <main+0x152c>

				//set to AM
				CLK.AM_PM = 0;
 8001684:	4a9d      	ldr	r2, [pc, #628]	@ (80018fc <main+0x178c>)
 8001686:	7c53      	ldrb	r3, [r2, #17]
 8001688:	f36f 0341 	bfc	r3, #1, #1
 800168c:	7453      	strb	r3, [r2, #17]
				Alcd_Clear(&lcd);
 800168e:	4896      	ldr	r0, [pc, #600]	@ (80018e8 <main+0x1778>)
 8001690:	f006 fb8c 	bl	8007dac <Alcd_Clear>

				status = 17;
 8001694:	2311      	movs	r3, #17
 8001696:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800169a:	e024      	b.n	80016e6 <main+0x1576>

			}

			//2 is selected -> PM (status 29)
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800169c:	2101      	movs	r1, #1
 800169e:	4896      	ldr	r0, [pc, #600]	@ (80018f8 <main+0x1788>)
 80016a0:	f006 fcce 	bl	8008040 <Keypad_Get_Key>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00f      	beq.n	80016ca <main+0x155a>
					&& (current_tick >= general_delay)) {
 80016aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d30b      	bcc.n	80016ca <main+0x155a>

				//set to pm
				CLK.AM_PM = 1;
 80016b2:	4a92      	ldr	r2, [pc, #584]	@ (80018fc <main+0x178c>)
 80016b4:	7c53      	ldrb	r3, [r2, #17]
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	7453      	strb	r3, [r2, #17]
				Alcd_Clear(&lcd);
 80016bc:	488a      	ldr	r0, [pc, #552]	@ (80018e8 <main+0x1778>)
 80016be:	f006 fb75 	bl	8007dac <Alcd_Clear>

				status = 17;
 80016c2:	2311      	movs	r3, #17
 80016c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80016c8:	e00d      	b.n	80016e6 <main+0x1576>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80016ca:	210e      	movs	r1, #14
 80016cc:	488a      	ldr	r0, [pc, #552]	@ (80018f8 <main+0x1788>)
 80016ce:	f006 fcb7 	bl	8008040 <Keypad_Get_Key>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <main+0x1576>
					&& (current_tick >= general_delay)) {
 80016d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016dc:	429a      	cmp	r2, r3
 80016de:	d302      	bcc.n	80016e6 <main+0x1576>

				//back to previous menu
				status = 25;
 80016e0:	2319      	movs	r3, #25
 80016e2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80016e6:	f006 fd1b 	bl	8008120 <HAL_GetTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	33fa      	adds	r3, #250	@ 0xfa
 80016ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 28) && (current_tick >= general_delay)) {
 80016f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80016f4:	2b1c      	cmp	r3, #28
 80016f6:	d113      	bne.n	8001720 <main+0x15b0>
 80016f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f4bf af7d 	bcs.w	80015fc <main+0x148c>
		}

		//transition state to clear the display
		while ((status == 17) && (current_tick >= general_delay)) {
 8001702:	e00d      	b.n	8001720 <main+0x15b0>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001704:	f006 fd0c 	bl	8008120 <HAL_GetTick>
 8001708:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 800170a:	4877      	ldr	r0, [pc, #476]	@ (80018e8 <main+0x1778>)
 800170c:	f006 fb4e 	bl	8007dac <Alcd_Clear>
			status = 29;
 8001710:	231d      	movs	r3, #29
 8001712:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
			general_delay = HAL_GetTick() + 50;
 8001716:	f006 fd03 	bl	8008120 <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	3332      	adds	r3, #50	@ 0x32
 800171e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 17) && (current_tick >= general_delay)) {
 8001720:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001724:	2b11      	cmp	r3, #17
 8001726:	f040 837b 	bne.w	8001e20 <main+0x1cb0>
 800172a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800172c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172e:	429a      	cmp	r2, r3
 8001730:	d2e8      	bcs.n	8001704 <main+0x1594>
		}

		//entering the hours state (29)
		while ((status == 29) && (current_tick >= general_delay)) {
 8001732:	e375      	b.n	8001e20 <main+0x1cb0>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001734:	f006 fcf4 	bl	8008120 <HAL_GetTick>
 8001738:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter hours");
 800173a:	4871      	ldr	r0, [pc, #452]	@ (8001900 <main+0x1790>)
 800173c:	f006 fb8a 	bl	8007e54 <Str_Len>
 8001740:	4603      	mov	r3, r0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4b6e      	ldr	r3, [pc, #440]	@ (8001900 <main+0x1790>)
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	4866      	ldr	r0, [pc, #408]	@ (80018e8 <main+0x1778>)
 800174e:	f006 fb14 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001752:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001756:	f107 001c 	add.w	r0, r7, #28
 800175a:	4a66      	ldr	r2, [pc, #408]	@ (80018f4 <main+0x1784>)
 800175c:	2132      	movs	r1, #50	@ 0x32
 800175e:	f009 fdf9 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fcfa 	bl	8000160 <strlen>
 800176c:	4603      	mov	r3, r0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f107 021c 	add.w	r2, r7, #28
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	220e      	movs	r2, #14
 800177a:	2100      	movs	r1, #0
 800177c:	485a      	ldr	r0, [pc, #360]	@ (80018e8 <main+0x1778>)
 800177e:	f006 fafc 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8001782:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001786:	461a      	mov	r2, r3
 8001788:	2101      	movs	r1, #1
 800178a:	4857      	ldr	r0, [pc, #348]	@ (80018e8 <main+0x1778>)
 800178c:	f006 fab9 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8001790:	2301      	movs	r3, #1
 8001792:	2201      	movs	r2, #1
 8001794:	2101      	movs	r1, #1
 8001796:	4854      	ldr	r0, [pc, #336]	@ (80018e8 <main+0x1778>)
 8001798:	f006 fb19 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800179c:	4856      	ldr	r0, [pc, #344]	@ (80018f8 <main+0x1788>)
 800179e:	f006 fbb3 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80017a2:	210e      	movs	r1, #14
 80017a4:	4854      	ldr	r0, [pc, #336]	@ (80018f8 <main+0x1788>)
 80017a6:	f006 fc4b 	bl	8008040 <Keypad_Get_Key>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <main+0x1650>
					&& (current_tick >= general_delay)) {
 80017b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d303      	bcc.n	80017c0 <main+0x1650>

				//back to previous menu
				status = 25;
 80017b8:	2319      	movs	r3, #25
 80017ba:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80017be:	e302      	b.n	8001dc6 <main+0x1c56>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80017c0:	210d      	movs	r1, #13
 80017c2:	484d      	ldr	r0, [pc, #308]	@ (80018f8 <main+0x1788>)
 80017c4:	f006 fc3c 	bl	8008040 <Keypad_Get_Key>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d042      	beq.n	8001854 <main+0x16e4>
					&& (current_tick >= general_delay)) {
 80017ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d33e      	bcc.n	8001854 <main+0x16e4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80017d6:	2300      	movs	r3, #0
 80017d8:	2200      	movs	r2, #0
 80017da:	2101      	movs	r1, #1
 80017dc:	4842      	ldr	r0, [pc, #264]	@ (80018e8 <main+0x1778>)
 80017de:	f006 faf6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80017e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d827      	bhi.n	800183a <main+0x16ca>
					time_date_buffer[input_index] = '0';
 80017ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80017ee:	3368      	adds	r3, #104	@ 0x68
 80017f0:	443b      	add	r3, r7
 80017f2:	2230      	movs	r2, #48	@ 0x30
 80017f4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80017f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80017fc:	3301      	adds	r3, #1
 80017fe:	3368      	adds	r3, #104	@ 0x68
 8001800:	443b      	add	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8001808:	483e      	ldr	r0, [pc, #248]	@ (8001904 <main+0x1794>)
 800180a:	f006 fb23 	bl	8007e54 <Str_Len>
 800180e:	4603      	mov	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <main+0x1794>)
 800181a:	2101      	movs	r1, #1
 800181c:	4832      	ldr	r0, [pc, #200]	@ (80018e8 <main+0x1778>)
 800181e:	f006 faac 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001822:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001826:	3301      	adds	r3, #1
 8001828:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800182c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001830:	461a      	mov	r2, r3
 8001832:	2101      	movs	r1, #1
 8001834:	482c      	ldr	r0, [pc, #176]	@ (80018e8 <main+0x1778>)
 8001836:	f006 fa64 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800183a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800183e:	2301      	movs	r3, #1
 8001840:	2101      	movs	r1, #1
 8001842:	4829      	ldr	r0, [pc, #164]	@ (80018e8 <main+0x1778>)
 8001844:	f006 fac3 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001848:	f006 fc6a 	bl	8008120 <HAL_GetTick>
 800184c:	4603      	mov	r3, r0
 800184e:	33fa      	adds	r3, #250	@ 0xfa
 8001850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001852:	e2b8      	b.n	8001dc6 <main+0x1c56>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8001854:	2100      	movs	r1, #0
 8001856:	4828      	ldr	r0, [pc, #160]	@ (80018f8 <main+0x1788>)
 8001858:	f006 fbf2 	bl	8008040 <Keypad_Get_Key>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d054      	beq.n	800190c <main+0x179c>
					&& (current_tick >= general_delay)) {
 8001862:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001866:	429a      	cmp	r2, r3
 8001868:	d350      	bcc.n	800190c <main+0x179c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800186a:	2300      	movs	r3, #0
 800186c:	2200      	movs	r2, #0
 800186e:	2101      	movs	r1, #1
 8001870:	481d      	ldr	r0, [pc, #116]	@ (80018e8 <main+0x1778>)
 8001872:	f006 faac 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001876:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800187a:	2b01      	cmp	r3, #1
 800187c:	d827      	bhi.n	80018ce <main+0x175e>
					time_date_buffer[input_index] = '1';
 800187e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001882:	3368      	adds	r3, #104	@ 0x68
 8001884:	443b      	add	r3, r7
 8001886:	2231      	movs	r2, #49	@ 0x31
 8001888:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800188c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001890:	3301      	adds	r3, #1
 8001892:	3368      	adds	r3, #104	@ 0x68
 8001894:	443b      	add	r3, r7
 8001896:	2200      	movs	r2, #0
 8001898:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 800189c:	481a      	ldr	r0, [pc, #104]	@ (8001908 <main+0x1798>)
 800189e:	f006 fad9 	bl	8007e54 <Str_Len>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <main+0x1798>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <main+0x1778>)
 80018b2:	f006 fa62 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80018b6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80018ba:	3301      	adds	r3, #1
 80018bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80018c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80018c4:	461a      	mov	r2, r3
 80018c6:	2101      	movs	r1, #1
 80018c8:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <main+0x1778>)
 80018ca:	f006 fa1a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80018ce:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80018d2:	2301      	movs	r3, #1
 80018d4:	2101      	movs	r1, #1
 80018d6:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <main+0x1778>)
 80018d8:	f006 fa79 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80018dc:	f006 fc20 	bl	8008120 <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	33fa      	adds	r3, #250	@ 0xfa
 80018e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018e6:	e26e      	b.n	8001dc6 <main+0x1c56>
 80018e8:	2000001c 	.word	0x2000001c
 80018ec:	0800bdd4 	.word	0x0800bdd4
 80018f0:	0800bdf0 	.word	0x0800bdf0
 80018f4:	0800bd1c 	.word	0x0800bd1c
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000150 	.word	0x20000150
 8001900:	0800be00 	.word	0x0800be00
 8001904:	0800be0c 	.word	0x0800be0c
 8001908:	0800be10 	.word	0x0800be10

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800190c:	2101      	movs	r1, #1
 800190e:	48b8      	ldr	r0, [pc, #736]	@ (8001bf0 <main+0x1a80>)
 8001910:	f006 fb96 	bl	8008040 <Keypad_Get_Key>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d042      	beq.n	80019a0 <main+0x1830>
					&& (current_tick >= general_delay)) {
 800191a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800191c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800191e:	429a      	cmp	r2, r3
 8001920:	d33e      	bcc.n	80019a0 <main+0x1830>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001922:	2300      	movs	r3, #0
 8001924:	2200      	movs	r2, #0
 8001926:	2101      	movs	r1, #1
 8001928:	48b2      	ldr	r0, [pc, #712]	@ (8001bf4 <main+0x1a84>)
 800192a:	f006 fa50 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800192e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001932:	2b01      	cmp	r3, #1
 8001934:	d827      	bhi.n	8001986 <main+0x1816>
					time_date_buffer[input_index] = '2';
 8001936:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800193a:	3368      	adds	r3, #104	@ 0x68
 800193c:	443b      	add	r3, r7
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001944:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001948:	3301      	adds	r3, #1
 800194a:	3368      	adds	r3, #104	@ 0x68
 800194c:	443b      	add	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8001954:	48a8      	ldr	r0, [pc, #672]	@ (8001bf8 <main+0x1a88>)
 8001956:	f006 fa7d 	bl	8007e54 <Str_Len>
 800195a:	4603      	mov	r3, r0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4ba4      	ldr	r3, [pc, #656]	@ (8001bf8 <main+0x1a88>)
 8001966:	2101      	movs	r1, #1
 8001968:	48a2      	ldr	r0, [pc, #648]	@ (8001bf4 <main+0x1a84>)
 800196a:	f006 fa06 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800196e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001972:	3301      	adds	r3, #1
 8001974:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001978:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800197c:	461a      	mov	r2, r3
 800197e:	2101      	movs	r1, #1
 8001980:	489c      	ldr	r0, [pc, #624]	@ (8001bf4 <main+0x1a84>)
 8001982:	f006 f9be 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001986:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800198a:	2301      	movs	r3, #1
 800198c:	2101      	movs	r1, #1
 800198e:	4899      	ldr	r0, [pc, #612]	@ (8001bf4 <main+0x1a84>)
 8001990:	f006 fa1d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001994:	f006 fbc4 	bl	8008120 <HAL_GetTick>
 8001998:	4603      	mov	r3, r0
 800199a:	33fa      	adds	r3, #250	@ 0xfa
 800199c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800199e:	e212      	b.n	8001dc6 <main+0x1c56>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 80019a0:	2102      	movs	r1, #2
 80019a2:	4893      	ldr	r0, [pc, #588]	@ (8001bf0 <main+0x1a80>)
 80019a4:	f006 fb4c 	bl	8008040 <Keypad_Get_Key>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d042      	beq.n	8001a34 <main+0x18c4>
					&& (current_tick >= general_delay)) {
 80019ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d33e      	bcc.n	8001a34 <main+0x18c4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	2200      	movs	r2, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	488d      	ldr	r0, [pc, #564]	@ (8001bf4 <main+0x1a84>)
 80019be:	f006 fa06 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80019c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d827      	bhi.n	8001a1a <main+0x18aa>
					time_date_buffer[input_index] = '3';
 80019ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80019ce:	3368      	adds	r3, #104	@ 0x68
 80019d0:	443b      	add	r3, r7
 80019d2:	2233      	movs	r2, #51	@ 0x33
 80019d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80019d8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80019dc:	3301      	adds	r3, #1
 80019de:	3368      	adds	r3, #104	@ 0x68
 80019e0:	443b      	add	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80019e8:	4884      	ldr	r0, [pc, #528]	@ (8001bfc <main+0x1a8c>)
 80019ea:	f006 fa33 	bl	8007e54 <Str_Len>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4b80      	ldr	r3, [pc, #512]	@ (8001bfc <main+0x1a8c>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	487d      	ldr	r0, [pc, #500]	@ (8001bf4 <main+0x1a84>)
 80019fe:	f006 f9bc 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001a02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a06:	3301      	adds	r3, #1
 8001a08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001a0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a10:	461a      	mov	r2, r3
 8001a12:	2101      	movs	r1, #1
 8001a14:	4877      	ldr	r0, [pc, #476]	@ (8001bf4 <main+0x1a84>)
 8001a16:	f006 f974 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001a1a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2101      	movs	r1, #1
 8001a22:	4874      	ldr	r0, [pc, #464]	@ (8001bf4 <main+0x1a84>)
 8001a24:	f006 f9d3 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001a28:	f006 fb7a 	bl	8008120 <HAL_GetTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	33fa      	adds	r3, #250	@ 0xfa
 8001a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a32:	e1c8      	b.n	8001dc6 <main+0x1c56>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8001a34:	2104      	movs	r1, #4
 8001a36:	486e      	ldr	r0, [pc, #440]	@ (8001bf0 <main+0x1a80>)
 8001a38:	f006 fb02 	bl	8008040 <Keypad_Get_Key>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d042      	beq.n	8001ac8 <main+0x1958>
					&& (current_tick >= general_delay)) {
 8001a42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d33e      	bcc.n	8001ac8 <main+0x1958>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4868      	ldr	r0, [pc, #416]	@ (8001bf4 <main+0x1a84>)
 8001a52:	f006 f9bc 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001a56:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d827      	bhi.n	8001aae <main+0x193e>
					time_date_buffer[input_index] = '4';
 8001a5e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a62:	3368      	adds	r3, #104	@ 0x68
 8001a64:	443b      	add	r3, r7
 8001a66:	2234      	movs	r2, #52	@ 0x34
 8001a68:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001a6c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a70:	3301      	adds	r3, #1
 8001a72:	3368      	adds	r3, #104	@ 0x68
 8001a74:	443b      	add	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8001a7c:	4860      	ldr	r0, [pc, #384]	@ (8001c00 <main+0x1a90>)
 8001a7e:	f006 f9e9 	bl	8007e54 <Str_Len>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c00 <main+0x1a90>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4858      	ldr	r0, [pc, #352]	@ (8001bf4 <main+0x1a84>)
 8001a92:	f006 f972 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001a96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001aa0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4852      	ldr	r0, [pc, #328]	@ (8001bf4 <main+0x1a84>)
 8001aaa:	f006 f92a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001aae:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	484f      	ldr	r0, [pc, #316]	@ (8001bf4 <main+0x1a84>)
 8001ab8:	f006 f989 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001abc:	f006 fb30 	bl	8008120 <HAL_GetTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	33fa      	adds	r3, #250	@ 0xfa
 8001ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ac6:	e17e      	b.n	8001dc6 <main+0x1c56>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8001ac8:	2105      	movs	r1, #5
 8001aca:	4849      	ldr	r0, [pc, #292]	@ (8001bf0 <main+0x1a80>)
 8001acc:	f006 fab8 	bl	8008040 <Keypad_Get_Key>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d042      	beq.n	8001b5c <main+0x19ec>
					&& (current_tick >= general_delay)) {
 8001ad6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d33e      	bcc.n	8001b5c <main+0x19ec>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4843      	ldr	r0, [pc, #268]	@ (8001bf4 <main+0x1a84>)
 8001ae6:	f006 f972 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001aea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d827      	bhi.n	8001b42 <main+0x19d2>
					time_date_buffer[input_index] = '5';
 8001af2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001af6:	3368      	adds	r3, #104	@ 0x68
 8001af8:	443b      	add	r3, r7
 8001afa:	2235      	movs	r2, #53	@ 0x35
 8001afc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001b00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001b04:	3301      	adds	r3, #1
 8001b06:	3368      	adds	r3, #104	@ 0x68
 8001b08:	443b      	add	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8001b10:	483c      	ldr	r0, [pc, #240]	@ (8001c04 <main+0x1a94>)
 8001b12:	f006 f99f 	bl	8007e54 <Str_Len>
 8001b16:	4603      	mov	r3, r0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <main+0x1a94>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	4833      	ldr	r0, [pc, #204]	@ (8001bf4 <main+0x1a84>)
 8001b26:	f006 f928 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001b2a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001b34:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	482d      	ldr	r0, [pc, #180]	@ (8001bf4 <main+0x1a84>)
 8001b3e:	f006 f8e0 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001b42:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001b46:	2301      	movs	r3, #1
 8001b48:	2101      	movs	r1, #1
 8001b4a:	482a      	ldr	r0, [pc, #168]	@ (8001bf4 <main+0x1a84>)
 8001b4c:	f006 f93f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001b50:	f006 fae6 	bl	8008120 <HAL_GetTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	33fa      	adds	r3, #250	@ 0xfa
 8001b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b5a:	e134      	b.n	8001dc6 <main+0x1c56>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8001b5c:	2106      	movs	r1, #6
 8001b5e:	4824      	ldr	r0, [pc, #144]	@ (8001bf0 <main+0x1a80>)
 8001b60:	f006 fa6e 	bl	8008040 <Keypad_Get_Key>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d050      	beq.n	8001c0c <main+0x1a9c>
					&& (current_tick >= general_delay)) {
 8001b6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d34c      	bcc.n	8001c0c <main+0x1a9c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001b72:	2300      	movs	r3, #0
 8001b74:	2200      	movs	r2, #0
 8001b76:	2101      	movs	r1, #1
 8001b78:	481e      	ldr	r0, [pc, #120]	@ (8001bf4 <main+0x1a84>)
 8001b7a:	f006 f928 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001b7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d827      	bhi.n	8001bd6 <main+0x1a66>
					time_date_buffer[input_index] = '6';
 8001b86:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001b8a:	3368      	adds	r3, #104	@ 0x68
 8001b8c:	443b      	add	r3, r7
 8001b8e:	2236      	movs	r2, #54	@ 0x36
 8001b90:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001b94:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001b98:	3301      	adds	r3, #1
 8001b9a:	3368      	adds	r3, #104	@ 0x68
 8001b9c:	443b      	add	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8001ba4:	4818      	ldr	r0, [pc, #96]	@ (8001c08 <main+0x1a98>)
 8001ba6:	f006 f955 	bl	8007e54 <Str_Len>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <main+0x1a98>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	480e      	ldr	r0, [pc, #56]	@ (8001bf4 <main+0x1a84>)
 8001bba:	f006 f8de 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001bbe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001bc8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <main+0x1a84>)
 8001bd2:	f006 f896 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001bd6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <main+0x1a84>)
 8001be0:	f006 f8f5 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001be4:	f006 fa9c 	bl	8008120 <HAL_GetTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	33fa      	adds	r3, #250	@ 0xfa
 8001bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bee:	e0ea      	b.n	8001dc6 <main+0x1c56>
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	2000001c 	.word	0x2000001c
 8001bf8:	0800be14 	.word	0x0800be14
 8001bfc:	0800be18 	.word	0x0800be18
 8001c00:	0800be1c 	.word	0x0800be1c
 8001c04:	0800be20 	.word	0x0800be20
 8001c08:	0800be24 	.word	0x0800be24

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	48af      	ldr	r0, [pc, #700]	@ (8001ecc <main+0x1d5c>)
 8001c10:	f006 fa16 	bl	8008040 <Keypad_Get_Key>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d042      	beq.n	8001ca0 <main+0x1b30>
					&& (current_tick >= general_delay)) {
 8001c1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d33e      	bcc.n	8001ca0 <main+0x1b30>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001c22:	2300      	movs	r3, #0
 8001c24:	2200      	movs	r2, #0
 8001c26:	2101      	movs	r1, #1
 8001c28:	48a9      	ldr	r0, [pc, #676]	@ (8001ed0 <main+0x1d60>)
 8001c2a:	f006 f8d0 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001c2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d827      	bhi.n	8001c86 <main+0x1b16>
					time_date_buffer[input_index] = '7';
 8001c36:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001c3a:	3368      	adds	r3, #104	@ 0x68
 8001c3c:	443b      	add	r3, r7
 8001c3e:	2237      	movs	r2, #55	@ 0x37
 8001c40:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001c44:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001c48:	3301      	adds	r3, #1
 8001c4a:	3368      	adds	r3, #104	@ 0x68
 8001c4c:	443b      	add	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8001c54:	489f      	ldr	r0, [pc, #636]	@ (8001ed4 <main+0x1d64>)
 8001c56:	f006 f8fd 	bl	8007e54 <Str_Len>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	4b9b      	ldr	r3, [pc, #620]	@ (8001ed4 <main+0x1d64>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	4899      	ldr	r0, [pc, #612]	@ (8001ed0 <main+0x1d60>)
 8001c6a:	f006 f886 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001c6e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001c72:	3301      	adds	r3, #1
 8001c74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001c78:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4893      	ldr	r0, [pc, #588]	@ (8001ed0 <main+0x1d60>)
 8001c82:	f006 f83e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001c86:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4890      	ldr	r0, [pc, #576]	@ (8001ed0 <main+0x1d60>)
 8001c90:	f006 f89d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001c94:	f006 fa44 	bl	8008120 <HAL_GetTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	33fa      	adds	r3, #250	@ 0xfa
 8001c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c9e:	e092      	b.n	8001dc6 <main+0x1c56>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8001ca0:	2109      	movs	r1, #9
 8001ca2:	488a      	ldr	r0, [pc, #552]	@ (8001ecc <main+0x1d5c>)
 8001ca4:	f006 f9cc 	bl	8008040 <Keypad_Get_Key>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d042      	beq.n	8001d34 <main+0x1bc4>
					&& (current_tick >= general_delay)) {
 8001cae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d33e      	bcc.n	8001d34 <main+0x1bc4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4884      	ldr	r0, [pc, #528]	@ (8001ed0 <main+0x1d60>)
 8001cbe:	f006 f886 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001cc2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d827      	bhi.n	8001d1a <main+0x1baa>
					time_date_buffer[input_index] = '8';
 8001cca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001cce:	3368      	adds	r3, #104	@ 0x68
 8001cd0:	443b      	add	r3, r7
 8001cd2:	2238      	movs	r2, #56	@ 0x38
 8001cd4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001cd8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001cdc:	3301      	adds	r3, #1
 8001cde:	3368      	adds	r3, #104	@ 0x68
 8001ce0:	443b      	add	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8001ce8:	487b      	ldr	r0, [pc, #492]	@ (8001ed8 <main+0x1d68>)
 8001cea:	f006 f8b3 	bl	8007e54 <Str_Len>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4b77      	ldr	r3, [pc, #476]	@ (8001ed8 <main+0x1d68>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4874      	ldr	r0, [pc, #464]	@ (8001ed0 <main+0x1d60>)
 8001cfe:	f006 f83c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001d02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d06:	3301      	adds	r3, #1
 8001d08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001d0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d10:	461a      	mov	r2, r3
 8001d12:	2101      	movs	r1, #1
 8001d14:	486e      	ldr	r0, [pc, #440]	@ (8001ed0 <main+0x1d60>)
 8001d16:	f005 fff4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001d1a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2101      	movs	r1, #1
 8001d22:	486b      	ldr	r0, [pc, #428]	@ (8001ed0 <main+0x1d60>)
 8001d24:	f006 f853 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001d28:	f006 f9fa 	bl	8008120 <HAL_GetTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	33fa      	adds	r3, #250	@ 0xfa
 8001d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d32:	e048      	b.n	8001dc6 <main+0x1c56>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8001d34:	210a      	movs	r1, #10
 8001d36:	4865      	ldr	r0, [pc, #404]	@ (8001ecc <main+0x1d5c>)
 8001d38:	f006 f982 	bl	8008040 <Keypad_Get_Key>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d041      	beq.n	8001dc6 <main+0x1c56>
					&& (current_tick >= general_delay)) {
 8001d42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d33d      	bcc.n	8001dc6 <main+0x1c56>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2101      	movs	r1, #1
 8001d50:	485f      	ldr	r0, [pc, #380]	@ (8001ed0 <main+0x1d60>)
 8001d52:	f006 f83c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8001d56:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d827      	bhi.n	8001dae <main+0x1c3e>
					time_date_buffer[input_index] = '9';
 8001d5e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d62:	3368      	adds	r3, #104	@ 0x68
 8001d64:	443b      	add	r3, r7
 8001d66:	2239      	movs	r2, #57	@ 0x39
 8001d68:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8001d6c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d70:	3301      	adds	r3, #1
 8001d72:	3368      	adds	r3, #104	@ 0x68
 8001d74:	443b      	add	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8001d7c:	4857      	ldr	r0, [pc, #348]	@ (8001edc <main+0x1d6c>)
 8001d7e:	f006 f869 	bl	8007e54 <Str_Len>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <main+0x1d6c>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	484f      	ldr	r0, [pc, #316]	@ (8001ed0 <main+0x1d60>)
 8001d92:	f005 fff2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8001d96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8001da0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001da4:	461a      	mov	r2, r3
 8001da6:	2101      	movs	r1, #1
 8001da8:	4849      	ldr	r0, [pc, #292]	@ (8001ed0 <main+0x1d60>)
 8001daa:	f005 ffaa 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001dae:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001db2:	2301      	movs	r3, #1
 8001db4:	2101      	movs	r1, #1
 8001db6:	4846      	ldr	r0, [pc, #280]	@ (8001ed0 <main+0x1d60>)
 8001db8:	f006 f809 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8001dbc:	f006 f9b0 	bl	8008120 <HAL_GetTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	33fa      	adds	r3, #250	@ 0xfa
 8001dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for hour validity (state 30)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	4840      	ldr	r0, [pc, #256]	@ (8001ecc <main+0x1d5c>)
 8001dca:	f006 f939 	bl	8008040 <Keypad_Get_Key>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <main+0x1ca6>
					&& (current_tick >= general_delay)) {
 8001dd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d31c      	bcc.n	8001e16 <main+0x1ca6>

				Alcd_Clear(&lcd);
 8001ddc:	483c      	ldr	r0, [pc, #240]	@ (8001ed0 <main+0x1d60>)
 8001dde:	f005 ffe5 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	f107 001c 	add.w	r0, r7, #28
 8001de8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee0 <main+0x1d70>)
 8001dea:	2132      	movs	r1, #50	@ 0x32
 8001dec:	f009 fab2 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe f9b3 	bl	8000160 <strlen>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f107 021c 	add.w	r2, r7, #28
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4831      	ldr	r0, [pc, #196]	@ (8001ed0 <main+0x1d60>)
 8001e0c:	f005 ffb5 	bl	8007d7a <Alcd_PutAt_n>

				status = 30;
 8001e10:	231e      	movs	r3, #30
 8001e12:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8001e16:	f006 f983 	bl	8008120 <HAL_GetTick>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	33fa      	adds	r3, #250	@ 0xfa
 8001e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 29) && (current_tick >= general_delay)) {
 8001e20:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001e24:	2b1d      	cmp	r3, #29
 8001e26:	f040 80de 	bne.w	8001fe6 <main+0x1e76>
 8001e2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	f4bf ac80 	bcs.w	8001734 <main+0x15c4>
		}

		//hours validation phase
		while ((status == 30) && (current_tick >= general_delay)) {
 8001e34:	e0d7      	b.n	8001fe6 <main+0x1e76>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001e36:	f006 f973 	bl	8008120 <HAL_GetTick>
 8001e3a:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8001e3c:	4824      	ldr	r0, [pc, #144]	@ (8001ed0 <main+0x1d60>)
 8001e3e:	f005 ffb5 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8001e42:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001e46:	f107 001c 	add.w	r0, r7, #28
 8001e4a:	4a25      	ldr	r2, [pc, #148]	@ (8001ee0 <main+0x1d70>)
 8001e4c:	2132      	movs	r1, #50	@ 0x32
 8001e4e:	f009 fa81 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe f982 	bl	8000160 <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f107 021c 	add.w	r2, r7, #28
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	220e      	movs	r2, #14
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4818      	ldr	r0, [pc, #96]	@ (8001ed0 <main+0x1d60>)
 8001e6e:	f005 ff84 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f009 f9e4 	bl	800b242 <atoi>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	807b      	strh	r3, [r7, #2]

			//in case of 12h format
			if (CLK.format == 1) {
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <main+0x1d74>)
 8001e82:	7c5b      	ldrb	r3, [r3, #17]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d054      	beq.n	8001f38 <main+0x1dc8>

				//check if time is within rang 1 to 12
				if (buffer > 0 && buffer < 13) {
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d029      	beq.n	8001ee8 <main+0x1d78>
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d826      	bhi.n	8001ee8 <main+0x1d78>

					//move to the minutes state
					status = 31;
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					CLK.hour = buffer;
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <main+0x1d74>)
 8001ea6:	729a      	strb	r2, [r3, #10]

					input_index = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4806      	ldr	r0, [pc, #24]	@ (8001ed0 <main+0x1d60>)
 8001eb6:	f005 ff8a 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001eba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4803      	ldr	r0, [pc, #12]	@ (8001ed0 <main+0x1d60>)
 8001ec4:	f005 ff83 	bl	8007dce <Alcd_Display_Control>
 8001ec8:	e036      	b.n	8001f38 <main+0x1dc8>
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	2000001c 	.word	0x2000001c
 8001ed4:	0800be28 	.word	0x0800be28
 8001ed8:	0800be2c 	.word	0x0800be2c
 8001edc:	0800be30 	.word	0x0800be30
 8001ee0:	0800bd1c 	.word	0x0800bd1c
 8001ee4:	20000150 	.word	0x20000150

				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8001ee8:	48b1      	ldr	r0, [pc, #708]	@ (80021b0 <main+0x2040>)
 8001eea:	f005 ffb3 	bl	8007e54 <Str_Len>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4bae      	ldr	r3, [pc, #696]	@ (80021b0 <main+0x2040>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	48ae      	ldr	r0, [pc, #696]	@ (80021b4 <main+0x2044>)
 8001efc:	f005 ff3d 	bl	8007d7a <Alcd_PutAt_n>
					delay_flag = 1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
					input_index = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	48a8      	ldr	r0, [pc, #672]	@ (80021b4 <main+0x2044>)
 8001f14:	f005 ff5b 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001f18:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2101      	movs	r1, #1
 8001f20:	48a4      	ldr	r0, [pc, #656]	@ (80021b4 <main+0x2044>)
 8001f22:	f005 ff54 	bl	8007dce <Alcd_Display_Control>

					//return to entering hours
					status = 29;
 8001f26:	231d      	movs	r3, #29
 8001f28:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8001f2c:	f006 f8f8 	bl	8008120 <HAL_GetTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
			}

			//in case of 24h format
			if (CLK.format == 0) {
 8001f38:	4b9f      	ldr	r3, [pc, #636]	@ (80021b8 <main+0x2048>)
 8001f3a:	7c5b      	ldrb	r3, [r3, #17]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d144      	bne.n	8001fd0 <main+0x1e60>

				//check if time is within rang 0 to 24
				if (buffer >= 0 && buffer < 25) {
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	2b18      	cmp	r3, #24
 8001f4a:	d819      	bhi.n	8001f80 <main+0x1e10>

					//move to the minutes state
					status = 31;
 8001f4c:	231f      	movs	r3, #31
 8001f4e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					CLK.hour = buffer - 20;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3b14      	subs	r3, #20
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b97      	ldr	r3, [pc, #604]	@ (80021b8 <main+0x2048>)
 8001f5c:	729a      	strb	r2, [r3, #10]

					input_index = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001f64:	2300      	movs	r3, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4892      	ldr	r0, [pc, #584]	@ (80021b4 <main+0x2044>)
 8001f6c:	f005 ff2f 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001f70:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001f74:	2301      	movs	r3, #1
 8001f76:	2101      	movs	r1, #1
 8001f78:	488e      	ldr	r0, [pc, #568]	@ (80021b4 <main+0x2044>)
 8001f7a:	f005 ff28 	bl	8007dce <Alcd_Display_Control>
 8001f7e:	e027      	b.n	8001fd0 <main+0x1e60>
				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8001f80:	488b      	ldr	r0, [pc, #556]	@ (80021b0 <main+0x2040>)
 8001f82:	f005 ff67 	bl	8007e54 <Str_Len>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4b88      	ldr	r3, [pc, #544]	@ (80021b0 <main+0x2040>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	4888      	ldr	r0, [pc, #544]	@ (80021b4 <main+0x2044>)
 8001f94:	f005 fef1 	bl	8007d7a <Alcd_PutAt_n>
					delay_flag = 1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

					input_index = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4882      	ldr	r0, [pc, #520]	@ (80021b4 <main+0x2044>)
 8001fac:	f005 ff0f 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8001fb0:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	487e      	ldr	r0, [pc, #504]	@ (80021b4 <main+0x2044>)
 8001fba:	f005 ff08 	bl	8007dce <Alcd_Display_Control>
					//return to entering hours
					status = 29;
 8001fbe:	231d      	movs	r3, #29
 8001fc0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8001fc4:	f006 f8ac 	bl	8008120 <HAL_GetTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8001fd0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <main+0x1e76>
 8001fd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d302      	bcc.n	8001fe6 <main+0x1e76>

				delay_flag = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 30) && (current_tick >= general_delay)) {
 8001fe6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001fea:	2b1e      	cmp	r3, #30
 8001fec:	f040 837a 	bne.w	80026e4 <main+0x2574>
 8001ff0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f4bf af1e 	bcs.w	8001e36 <main+0x1cc6>
			}

		}

		//entering the minutes state (31)
		while ((status == 31) && (current_tick >= general_delay)) {
 8001ffa:	e373      	b.n	80026e4 <main+0x2574>

			//get the current tick number
			current_tick = HAL_GetTick();
 8001ffc:	f006 f890 	bl	8008120 <HAL_GetTick>
 8002000:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter minutes");
 8002002:	486e      	ldr	r0, [pc, #440]	@ (80021bc <main+0x204c>)
 8002004:	f005 ff26 	bl	8007e54 <Str_Len>
 8002008:	4603      	mov	r3, r0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <main+0x204c>)
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	4867      	ldr	r0, [pc, #412]	@ (80021b4 <main+0x2044>)
 8002016:	f005 feb0 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800201a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800201e:	f107 001c 	add.w	r0, r7, #28
 8002022:	4a67      	ldr	r2, [pc, #412]	@ (80021c0 <main+0x2050>)
 8002024:	2132      	movs	r1, #50	@ 0x32
 8002026:	f009 f995 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f896 	bl	8000160 <strlen>
 8002034:	4603      	mov	r3, r0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f107 021c 	add.w	r2, r7, #28
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	220e      	movs	r2, #14
 8002042:	2100      	movs	r1, #0
 8002044:	485b      	ldr	r0, [pc, #364]	@ (80021b4 <main+0x2044>)
 8002046:	f005 fe98 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 800204a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800204e:	461a      	mov	r2, r3
 8002050:	2101      	movs	r1, #1
 8002052:	4858      	ldr	r0, [pc, #352]	@ (80021b4 <main+0x2044>)
 8002054:	f005 fe55 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8002058:	2301      	movs	r3, #1
 800205a:	2201      	movs	r2, #1
 800205c:	2101      	movs	r1, #1
 800205e:	4855      	ldr	r0, [pc, #340]	@ (80021b4 <main+0x2044>)
 8002060:	f005 feb5 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8002064:	4857      	ldr	r0, [pc, #348]	@ (80021c4 <main+0x2054>)
 8002066:	f005 ff4f 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 800206a:	210e      	movs	r1, #14
 800206c:	4855      	ldr	r0, [pc, #340]	@ (80021c4 <main+0x2054>)
 800206e:	f005 ffe7 	bl	8008040 <Keypad_Get_Key>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <main+0x1f18>
					&& (current_tick >= general_delay)) {
 8002078:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800207a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800207c:	429a      	cmp	r2, r3
 800207e:	d303      	bcc.n	8002088 <main+0x1f18>

				//back to previous menu
				status = 29;
 8002080:	231d      	movs	r3, #29
 8002082:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8002086:	e300      	b.n	800268a <main+0x251a>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8002088:	210d      	movs	r1, #13
 800208a:	484e      	ldr	r0, [pc, #312]	@ (80021c4 <main+0x2054>)
 800208c:	f005 ffd8 	bl	8008040 <Keypad_Get_Key>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d042      	beq.n	800211c <main+0x1fac>
					&& (current_tick >= general_delay)) {
 8002096:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800209a:	429a      	cmp	r2, r3
 800209c:	d33e      	bcc.n	800211c <main+0x1fac>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800209e:	2300      	movs	r3, #0
 80020a0:	2200      	movs	r2, #0
 80020a2:	2101      	movs	r1, #1
 80020a4:	4843      	ldr	r0, [pc, #268]	@ (80021b4 <main+0x2044>)
 80020a6:	f005 fe92 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80020aa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d827      	bhi.n	8002102 <main+0x1f92>
					time_date_buffer[input_index] = '0';
 80020b2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020b6:	3368      	adds	r3, #104	@ 0x68
 80020b8:	443b      	add	r3, r7
 80020ba:	2230      	movs	r2, #48	@ 0x30
 80020bc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80020c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020c4:	3301      	adds	r3, #1
 80020c6:	3368      	adds	r3, #104	@ 0x68
 80020c8:	443b      	add	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80020d0:	483d      	ldr	r0, [pc, #244]	@ (80021c8 <main+0x2058>)
 80020d2:	f005 febf 	bl	8007e54 <Str_Len>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <main+0x2058>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	4833      	ldr	r0, [pc, #204]	@ (80021b4 <main+0x2044>)
 80020e6:	f005 fe48 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80020ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020ee:	3301      	adds	r3, #1
 80020f0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80020f4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020f8:	461a      	mov	r2, r3
 80020fa:	2101      	movs	r1, #1
 80020fc:	482d      	ldr	r0, [pc, #180]	@ (80021b4 <main+0x2044>)
 80020fe:	f005 fe00 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002102:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002106:	2301      	movs	r3, #1
 8002108:	2101      	movs	r1, #1
 800210a:	482a      	ldr	r0, [pc, #168]	@ (80021b4 <main+0x2044>)
 800210c:	f005 fe5f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002110:	f006 f806 	bl	8008120 <HAL_GetTick>
 8002114:	4603      	mov	r3, r0
 8002116:	33fa      	adds	r3, #250	@ 0xfa
 8002118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800211a:	e2b6      	b.n	800268a <main+0x251a>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 800211c:	2100      	movs	r1, #0
 800211e:	4829      	ldr	r0, [pc, #164]	@ (80021c4 <main+0x2054>)
 8002120:	f005 ff8e 	bl	8008040 <Keypad_Get_Key>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d052      	beq.n	80021d0 <main+0x2060>
					&& (current_tick >= general_delay)) {
 800212a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800212c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800212e:	429a      	cmp	r2, r3
 8002130:	d34e      	bcc.n	80021d0 <main+0x2060>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002132:	2300      	movs	r3, #0
 8002134:	2200      	movs	r2, #0
 8002136:	2101      	movs	r1, #1
 8002138:	481e      	ldr	r0, [pc, #120]	@ (80021b4 <main+0x2044>)
 800213a:	f005 fe48 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800213e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002142:	2b01      	cmp	r3, #1
 8002144:	d827      	bhi.n	8002196 <main+0x2026>
					time_date_buffer[input_index] = '1';
 8002146:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800214a:	3368      	adds	r3, #104	@ 0x68
 800214c:	443b      	add	r3, r7
 800214e:	2231      	movs	r2, #49	@ 0x31
 8002150:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002154:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002158:	3301      	adds	r3, #1
 800215a:	3368      	adds	r3, #104	@ 0x68
 800215c:	443b      	add	r3, r7
 800215e:	2200      	movs	r2, #0
 8002160:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8002164:	4819      	ldr	r0, [pc, #100]	@ (80021cc <main+0x205c>)
 8002166:	f005 fe75 	bl	8007e54 <Str_Len>
 800216a:	4603      	mov	r3, r0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <main+0x205c>)
 8002176:	2101      	movs	r1, #1
 8002178:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <main+0x2044>)
 800217a:	f005 fdfe 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800217e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002182:	3301      	adds	r3, #1
 8002184:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002188:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800218c:	461a      	mov	r2, r3
 800218e:	2101      	movs	r1, #1
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <main+0x2044>)
 8002192:	f005 fdb6 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002196:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800219a:	2301      	movs	r3, #1
 800219c:	2101      	movs	r1, #1
 800219e:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <main+0x2044>)
 80021a0:	f005 fe15 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80021a4:	f005 ffbc 	bl	8008120 <HAL_GetTick>
 80021a8:	4603      	mov	r3, r0
 80021aa:	33fa      	adds	r3, #250	@ 0xfa
 80021ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021ae:	e26c      	b.n	800268a <main+0x251a>
 80021b0:	0800be34 	.word	0x0800be34
 80021b4:	2000001c 	.word	0x2000001c
 80021b8:	20000150 	.word	0x20000150
 80021bc:	0800be3c 	.word	0x0800be3c
 80021c0:	0800bd1c 	.word	0x0800bd1c
 80021c4:	20000000 	.word	0x20000000
 80021c8:	0800be0c 	.word	0x0800be0c
 80021cc:	0800be10 	.word	0x0800be10

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80021d0:	2101      	movs	r1, #1
 80021d2:	48b8      	ldr	r0, [pc, #736]	@ (80024b4 <main+0x2344>)
 80021d4:	f005 ff34 	bl	8008040 <Keypad_Get_Key>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d042      	beq.n	8002264 <main+0x20f4>
					&& (current_tick >= general_delay)) {
 80021de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80021e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d33e      	bcc.n	8002264 <main+0x20f4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80021e6:	2300      	movs	r3, #0
 80021e8:	2200      	movs	r2, #0
 80021ea:	2101      	movs	r1, #1
 80021ec:	48b2      	ldr	r0, [pc, #712]	@ (80024b8 <main+0x2348>)
 80021ee:	f005 fdee 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80021f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d827      	bhi.n	800224a <main+0x20da>
					time_date_buffer[input_index] = '2';
 80021fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80021fe:	3368      	adds	r3, #104	@ 0x68
 8002200:	443b      	add	r3, r7
 8002202:	2232      	movs	r2, #50	@ 0x32
 8002204:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002208:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800220c:	3301      	adds	r3, #1
 800220e:	3368      	adds	r3, #104	@ 0x68
 8002210:	443b      	add	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8002218:	48a8      	ldr	r0, [pc, #672]	@ (80024bc <main+0x234c>)
 800221a:	f005 fe1b 	bl	8007e54 <Str_Len>
 800221e:	4603      	mov	r3, r0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4ba4      	ldr	r3, [pc, #656]	@ (80024bc <main+0x234c>)
 800222a:	2101      	movs	r1, #1
 800222c:	48a2      	ldr	r0, [pc, #648]	@ (80024b8 <main+0x2348>)
 800222e:	f005 fda4 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002232:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002236:	3301      	adds	r3, #1
 8002238:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800223c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002240:	461a      	mov	r2, r3
 8002242:	2101      	movs	r1, #1
 8002244:	489c      	ldr	r0, [pc, #624]	@ (80024b8 <main+0x2348>)
 8002246:	f005 fd5c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800224a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800224e:	2301      	movs	r3, #1
 8002250:	2101      	movs	r1, #1
 8002252:	4899      	ldr	r0, [pc, #612]	@ (80024b8 <main+0x2348>)
 8002254:	f005 fdbb 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002258:	f005 ff62 	bl	8008120 <HAL_GetTick>
 800225c:	4603      	mov	r3, r0
 800225e:	33fa      	adds	r3, #250	@ 0xfa
 8002260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002262:	e212      	b.n	800268a <main+0x251a>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8002264:	2102      	movs	r1, #2
 8002266:	4893      	ldr	r0, [pc, #588]	@ (80024b4 <main+0x2344>)
 8002268:	f005 feea 	bl	8008040 <Keypad_Get_Key>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d042      	beq.n	80022f8 <main+0x2188>
					&& (current_tick >= general_delay)) {
 8002272:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002276:	429a      	cmp	r2, r3
 8002278:	d33e      	bcc.n	80022f8 <main+0x2188>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800227a:	2300      	movs	r3, #0
 800227c:	2200      	movs	r2, #0
 800227e:	2101      	movs	r1, #1
 8002280:	488d      	ldr	r0, [pc, #564]	@ (80024b8 <main+0x2348>)
 8002282:	f005 fda4 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002286:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800228a:	2b01      	cmp	r3, #1
 800228c:	d827      	bhi.n	80022de <main+0x216e>
					time_date_buffer[input_index] = '3';
 800228e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002292:	3368      	adds	r3, #104	@ 0x68
 8002294:	443b      	add	r3, r7
 8002296:	2233      	movs	r2, #51	@ 0x33
 8002298:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800229c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80022a0:	3301      	adds	r3, #1
 80022a2:	3368      	adds	r3, #104	@ 0x68
 80022a4:	443b      	add	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80022ac:	4884      	ldr	r0, [pc, #528]	@ (80024c0 <main+0x2350>)
 80022ae:	f005 fdd1 	bl	8007e54 <Str_Len>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4b80      	ldr	r3, [pc, #512]	@ (80024c0 <main+0x2350>)
 80022be:	2101      	movs	r1, #1
 80022c0:	487d      	ldr	r0, [pc, #500]	@ (80024b8 <main+0x2348>)
 80022c2:	f005 fd5a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80022c6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80022ca:	3301      	adds	r3, #1
 80022cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80022d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80022d4:	461a      	mov	r2, r3
 80022d6:	2101      	movs	r1, #1
 80022d8:	4877      	ldr	r0, [pc, #476]	@ (80024b8 <main+0x2348>)
 80022da:	f005 fd12 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80022de:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80022e2:	2301      	movs	r3, #1
 80022e4:	2101      	movs	r1, #1
 80022e6:	4874      	ldr	r0, [pc, #464]	@ (80024b8 <main+0x2348>)
 80022e8:	f005 fd71 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80022ec:	f005 ff18 	bl	8008120 <HAL_GetTick>
 80022f0:	4603      	mov	r3, r0
 80022f2:	33fa      	adds	r3, #250	@ 0xfa
 80022f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022f6:	e1c8      	b.n	800268a <main+0x251a>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80022f8:	2104      	movs	r1, #4
 80022fa:	486e      	ldr	r0, [pc, #440]	@ (80024b4 <main+0x2344>)
 80022fc:	f005 fea0 	bl	8008040 <Keypad_Get_Key>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d042      	beq.n	800238c <main+0x221c>
					&& (current_tick >= general_delay)) {
 8002306:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230a:	429a      	cmp	r2, r3
 800230c:	d33e      	bcc.n	800238c <main+0x221c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800230e:	2300      	movs	r3, #0
 8002310:	2200      	movs	r2, #0
 8002312:	2101      	movs	r1, #1
 8002314:	4868      	ldr	r0, [pc, #416]	@ (80024b8 <main+0x2348>)
 8002316:	f005 fd5a 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800231a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800231e:	2b01      	cmp	r3, #1
 8002320:	d827      	bhi.n	8002372 <main+0x2202>
					time_date_buffer[input_index] = '4';
 8002322:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002326:	3368      	adds	r3, #104	@ 0x68
 8002328:	443b      	add	r3, r7
 800232a:	2234      	movs	r2, #52	@ 0x34
 800232c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002330:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002334:	3301      	adds	r3, #1
 8002336:	3368      	adds	r3, #104	@ 0x68
 8002338:	443b      	add	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8002340:	4860      	ldr	r0, [pc, #384]	@ (80024c4 <main+0x2354>)
 8002342:	f005 fd87 	bl	8007e54 <Str_Len>
 8002346:	4603      	mov	r3, r0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4b5c      	ldr	r3, [pc, #368]	@ (80024c4 <main+0x2354>)
 8002352:	2101      	movs	r1, #1
 8002354:	4858      	ldr	r0, [pc, #352]	@ (80024b8 <main+0x2348>)
 8002356:	f005 fd10 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800235a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800235e:	3301      	adds	r3, #1
 8002360:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002364:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002368:	461a      	mov	r2, r3
 800236a:	2101      	movs	r1, #1
 800236c:	4852      	ldr	r0, [pc, #328]	@ (80024b8 <main+0x2348>)
 800236e:	f005 fcc8 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002372:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002376:	2301      	movs	r3, #1
 8002378:	2101      	movs	r1, #1
 800237a:	484f      	ldr	r0, [pc, #316]	@ (80024b8 <main+0x2348>)
 800237c:	f005 fd27 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002380:	f005 fece 	bl	8008120 <HAL_GetTick>
 8002384:	4603      	mov	r3, r0
 8002386:	33fa      	adds	r3, #250	@ 0xfa
 8002388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800238a:	e17e      	b.n	800268a <main+0x251a>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 800238c:	2105      	movs	r1, #5
 800238e:	4849      	ldr	r0, [pc, #292]	@ (80024b4 <main+0x2344>)
 8002390:	f005 fe56 	bl	8008040 <Keypad_Get_Key>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d042      	beq.n	8002420 <main+0x22b0>
					&& (current_tick >= general_delay)) {
 800239a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800239c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239e:	429a      	cmp	r2, r3
 80023a0:	d33e      	bcc.n	8002420 <main+0x22b0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80023a2:	2300      	movs	r3, #0
 80023a4:	2200      	movs	r2, #0
 80023a6:	2101      	movs	r1, #1
 80023a8:	4843      	ldr	r0, [pc, #268]	@ (80024b8 <main+0x2348>)
 80023aa:	f005 fd10 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80023ae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d827      	bhi.n	8002406 <main+0x2296>
					time_date_buffer[input_index] = '5';
 80023b6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023ba:	3368      	adds	r3, #104	@ 0x68
 80023bc:	443b      	add	r3, r7
 80023be:	2235      	movs	r2, #53	@ 0x35
 80023c0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80023c4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023c8:	3301      	adds	r3, #1
 80023ca:	3368      	adds	r3, #104	@ 0x68
 80023cc:	443b      	add	r3, r7
 80023ce:	2200      	movs	r2, #0
 80023d0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80023d4:	483c      	ldr	r0, [pc, #240]	@ (80024c8 <main+0x2358>)
 80023d6:	f005 fd3d 	bl	8007e54 <Str_Len>
 80023da:	4603      	mov	r3, r0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <main+0x2358>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	4833      	ldr	r0, [pc, #204]	@ (80024b8 <main+0x2348>)
 80023ea:	f005 fcc6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80023ee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023f2:	3301      	adds	r3, #1
 80023f4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80023f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023fc:	461a      	mov	r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	482d      	ldr	r0, [pc, #180]	@ (80024b8 <main+0x2348>)
 8002402:	f005 fc7e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002406:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800240a:	2301      	movs	r3, #1
 800240c:	2101      	movs	r1, #1
 800240e:	482a      	ldr	r0, [pc, #168]	@ (80024b8 <main+0x2348>)
 8002410:	f005 fcdd 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002414:	f005 fe84 	bl	8008120 <HAL_GetTick>
 8002418:	4603      	mov	r3, r0
 800241a:	33fa      	adds	r3, #250	@ 0xfa
 800241c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800241e:	e134      	b.n	800268a <main+0x251a>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8002420:	2106      	movs	r1, #6
 8002422:	4824      	ldr	r0, [pc, #144]	@ (80024b4 <main+0x2344>)
 8002424:	f005 fe0c 	bl	8008040 <Keypad_Get_Key>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d050      	beq.n	80024d0 <main+0x2360>
					&& (current_tick >= general_delay)) {
 800242e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002432:	429a      	cmp	r2, r3
 8002434:	d34c      	bcc.n	80024d0 <main+0x2360>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002436:	2300      	movs	r3, #0
 8002438:	2200      	movs	r2, #0
 800243a:	2101      	movs	r1, #1
 800243c:	481e      	ldr	r0, [pc, #120]	@ (80024b8 <main+0x2348>)
 800243e:	f005 fcc6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002442:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002446:	2b01      	cmp	r3, #1
 8002448:	d827      	bhi.n	800249a <main+0x232a>
					time_date_buffer[input_index] = '6';
 800244a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800244e:	3368      	adds	r3, #104	@ 0x68
 8002450:	443b      	add	r3, r7
 8002452:	2236      	movs	r2, #54	@ 0x36
 8002454:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002458:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800245c:	3301      	adds	r3, #1
 800245e:	3368      	adds	r3, #104	@ 0x68
 8002460:	443b      	add	r3, r7
 8002462:	2200      	movs	r2, #0
 8002464:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8002468:	4818      	ldr	r0, [pc, #96]	@ (80024cc <main+0x235c>)
 800246a:	f005 fcf3 	bl	8007e54 <Str_Len>
 800246e:	4603      	mov	r3, r0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <main+0x235c>)
 800247a:	2101      	movs	r1, #1
 800247c:	480e      	ldr	r0, [pc, #56]	@ (80024b8 <main+0x2348>)
 800247e:	f005 fc7c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002482:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002486:	3301      	adds	r3, #1
 8002488:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800248c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002490:	461a      	mov	r2, r3
 8002492:	2101      	movs	r1, #1
 8002494:	4808      	ldr	r0, [pc, #32]	@ (80024b8 <main+0x2348>)
 8002496:	f005 fc34 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800249a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800249e:	2301      	movs	r3, #1
 80024a0:	2101      	movs	r1, #1
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <main+0x2348>)
 80024a4:	f005 fc93 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80024a8:	f005 fe3a 	bl	8008120 <HAL_GetTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	33fa      	adds	r3, #250	@ 0xfa
 80024b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024b2:	e0ea      	b.n	800268a <main+0x251a>
 80024b4:	20000000 	.word	0x20000000
 80024b8:	2000001c 	.word	0x2000001c
 80024bc:	0800be14 	.word	0x0800be14
 80024c0:	0800be18 	.word	0x0800be18
 80024c4:	0800be1c 	.word	0x0800be1c
 80024c8:	0800be20 	.word	0x0800be20
 80024cc:	0800be24 	.word	0x0800be24

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80024d0:	2108      	movs	r1, #8
 80024d2:	48aa      	ldr	r0, [pc, #680]	@ (800277c <main+0x260c>)
 80024d4:	f005 fdb4 	bl	8008040 <Keypad_Get_Key>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d042      	beq.n	8002564 <main+0x23f4>
					&& (current_tick >= general_delay)) {
 80024de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d33e      	bcc.n	8002564 <main+0x23f4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80024e6:	2300      	movs	r3, #0
 80024e8:	2200      	movs	r2, #0
 80024ea:	2101      	movs	r1, #1
 80024ec:	48a4      	ldr	r0, [pc, #656]	@ (8002780 <main+0x2610>)
 80024ee:	f005 fc6e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80024f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d827      	bhi.n	800254a <main+0x23da>
					time_date_buffer[input_index] = '7';
 80024fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80024fe:	3368      	adds	r3, #104	@ 0x68
 8002500:	443b      	add	r3, r7
 8002502:	2237      	movs	r2, #55	@ 0x37
 8002504:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002508:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800250c:	3301      	adds	r3, #1
 800250e:	3368      	adds	r3, #104	@ 0x68
 8002510:	443b      	add	r3, r7
 8002512:	2200      	movs	r2, #0
 8002514:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8002518:	489a      	ldr	r0, [pc, #616]	@ (8002784 <main+0x2614>)
 800251a:	f005 fc9b 	bl	8007e54 <Str_Len>
 800251e:	4603      	mov	r3, r0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4b96      	ldr	r3, [pc, #600]	@ (8002784 <main+0x2614>)
 800252a:	2101      	movs	r1, #1
 800252c:	4894      	ldr	r0, [pc, #592]	@ (8002780 <main+0x2610>)
 800252e:	f005 fc24 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002532:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002536:	3301      	adds	r3, #1
 8002538:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800253c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	488e      	ldr	r0, [pc, #568]	@ (8002780 <main+0x2610>)
 8002546:	f005 fbdc 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800254a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800254e:	2301      	movs	r3, #1
 8002550:	2101      	movs	r1, #1
 8002552:	488b      	ldr	r0, [pc, #556]	@ (8002780 <main+0x2610>)
 8002554:	f005 fc3b 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002558:	f005 fde2 	bl	8008120 <HAL_GetTick>
 800255c:	4603      	mov	r3, r0
 800255e:	33fa      	adds	r3, #250	@ 0xfa
 8002560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002562:	e092      	b.n	800268a <main+0x251a>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8002564:	2109      	movs	r1, #9
 8002566:	4885      	ldr	r0, [pc, #532]	@ (800277c <main+0x260c>)
 8002568:	f005 fd6a 	bl	8008040 <Keypad_Get_Key>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d042      	beq.n	80025f8 <main+0x2488>
					&& (current_tick >= general_delay)) {
 8002572:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002576:	429a      	cmp	r2, r3
 8002578:	d33e      	bcc.n	80025f8 <main+0x2488>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800257a:	2300      	movs	r3, #0
 800257c:	2200      	movs	r2, #0
 800257e:	2101      	movs	r1, #1
 8002580:	487f      	ldr	r0, [pc, #508]	@ (8002780 <main+0x2610>)
 8002582:	f005 fc24 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002586:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800258a:	2b01      	cmp	r3, #1
 800258c:	d827      	bhi.n	80025de <main+0x246e>
					time_date_buffer[input_index] = '8';
 800258e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002592:	3368      	adds	r3, #104	@ 0x68
 8002594:	443b      	add	r3, r7
 8002596:	2238      	movs	r2, #56	@ 0x38
 8002598:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800259c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80025a0:	3301      	adds	r3, #1
 80025a2:	3368      	adds	r3, #104	@ 0x68
 80025a4:	443b      	add	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80025ac:	4876      	ldr	r0, [pc, #472]	@ (8002788 <main+0x2618>)
 80025ae:	f005 fc51 	bl	8007e54 <Str_Len>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4b72      	ldr	r3, [pc, #456]	@ (8002788 <main+0x2618>)
 80025be:	2101      	movs	r1, #1
 80025c0:	486f      	ldr	r0, [pc, #444]	@ (8002780 <main+0x2610>)
 80025c2:	f005 fbda 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80025c6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80025d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80025d4:	461a      	mov	r2, r3
 80025d6:	2101      	movs	r1, #1
 80025d8:	4869      	ldr	r0, [pc, #420]	@ (8002780 <main+0x2610>)
 80025da:	f005 fb92 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80025de:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80025e2:	2301      	movs	r3, #1
 80025e4:	2101      	movs	r1, #1
 80025e6:	4866      	ldr	r0, [pc, #408]	@ (8002780 <main+0x2610>)
 80025e8:	f005 fbf1 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80025ec:	f005 fd98 	bl	8008120 <HAL_GetTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	33fa      	adds	r3, #250	@ 0xfa
 80025f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025f6:	e048      	b.n	800268a <main+0x251a>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 80025f8:	210a      	movs	r1, #10
 80025fa:	4860      	ldr	r0, [pc, #384]	@ (800277c <main+0x260c>)
 80025fc:	f005 fd20 	bl	8008040 <Keypad_Get_Key>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d041      	beq.n	800268a <main+0x251a>
					&& (current_tick >= general_delay)) {
 8002606:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260a:	429a      	cmp	r2, r3
 800260c:	d33d      	bcc.n	800268a <main+0x251a>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800260e:	2300      	movs	r3, #0
 8002610:	2200      	movs	r2, #0
 8002612:	2101      	movs	r1, #1
 8002614:	485a      	ldr	r0, [pc, #360]	@ (8002780 <main+0x2610>)
 8002616:	f005 fbda 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800261a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800261e:	2b01      	cmp	r3, #1
 8002620:	d827      	bhi.n	8002672 <main+0x2502>
					time_date_buffer[input_index] = '9';
 8002622:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002626:	3368      	adds	r3, #104	@ 0x68
 8002628:	443b      	add	r3, r7
 800262a:	2239      	movs	r2, #57	@ 0x39
 800262c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002630:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002634:	3301      	adds	r3, #1
 8002636:	3368      	adds	r3, #104	@ 0x68
 8002638:	443b      	add	r3, r7
 800263a:	2200      	movs	r2, #0
 800263c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8002640:	4852      	ldr	r0, [pc, #328]	@ (800278c <main+0x261c>)
 8002642:	f005 fc07 	bl	8007e54 <Str_Len>
 8002646:	4603      	mov	r3, r0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <main+0x261c>)
 8002652:	2101      	movs	r1, #1
 8002654:	484a      	ldr	r0, [pc, #296]	@ (8002780 <main+0x2610>)
 8002656:	f005 fb90 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800265a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800265e:	3301      	adds	r3, #1
 8002660:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002664:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002668:	461a      	mov	r2, r3
 800266a:	2101      	movs	r1, #1
 800266c:	4844      	ldr	r0, [pc, #272]	@ (8002780 <main+0x2610>)
 800266e:	f005 fb48 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002672:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002676:	2301      	movs	r3, #1
 8002678:	2101      	movs	r1, #1
 800267a:	4841      	ldr	r0, [pc, #260]	@ (8002780 <main+0x2610>)
 800267c:	f005 fba7 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002680:	f005 fd4e 	bl	8008120 <HAL_GetTick>
 8002684:	4603      	mov	r3, r0
 8002686:	33fa      	adds	r3, #250	@ 0xfa
 8002688:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for miinutes validity (state 32)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 800268a:	210f      	movs	r1, #15
 800268c:	483b      	ldr	r0, [pc, #236]	@ (800277c <main+0x260c>)
 800268e:	f005 fcd7 	bl	8008040 <Keypad_Get_Key>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <main+0x256a>
					&& (current_tick >= general_delay)) {
 8002698:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800269a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269c:	429a      	cmp	r2, r3
 800269e:	d31c      	bcc.n	80026da <main+0x256a>

				Alcd_Clear(&lcd);
 80026a0:	4837      	ldr	r0, [pc, #220]	@ (8002780 <main+0x2610>)
 80026a2:	f005 fb83 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	f107 001c 	add.w	r0, r7, #28
 80026ac:	4a38      	ldr	r2, [pc, #224]	@ (8002790 <main+0x2620>)
 80026ae:	2132      	movs	r1, #50	@ 0x32
 80026b0:	f008 fe50 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fd51 	bl	8000160 <strlen>
 80026be:	4603      	mov	r3, r0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f107 021c 	add.w	r2, r7, #28
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	2200      	movs	r2, #0
 80026cc:	2101      	movs	r1, #1
 80026ce:	482c      	ldr	r0, [pc, #176]	@ (8002780 <main+0x2610>)
 80026d0:	f005 fb53 	bl	8007d7a <Alcd_PutAt_n>

				status = 32;
 80026d4:	2320      	movs	r3, #32
 80026d6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 80026da:	f005 fd21 	bl	8008120 <HAL_GetTick>
 80026de:	4603      	mov	r3, r0
 80026e0:	33fa      	adds	r3, #250	@ 0xfa
 80026e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 31) && (current_tick >= general_delay)) {
 80026e4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80026e8:	2b1f      	cmp	r3, #31
 80026ea:	f040 8088 	bne.w	80027fe <main+0x268e>
 80026ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026f2:	429a      	cmp	r2, r3
 80026f4:	f4bf ac82 	bcs.w	8001ffc <main+0x1e8c>
		}

		//minutes validation phase
		while ((status == 32) && (current_tick >= general_delay)) {
 80026f8:	e081      	b.n	80027fe <main+0x268e>

			//get the current tick number
			current_tick = HAL_GetTick();
 80026fa:	f005 fd11 	bl	8008120 <HAL_GetTick>
 80026fe:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8002700:	481f      	ldr	r0, [pc, #124]	@ (8002780 <main+0x2610>)
 8002702:	f005 fb53 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002706:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800270a:	f107 001c 	add.w	r0, r7, #28
 800270e:	4a20      	ldr	r2, [pc, #128]	@ (8002790 <main+0x2620>)
 8002710:	2132      	movs	r1, #50	@ 0x32
 8002712:	f008 fe1f 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fd20 	bl	8000160 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f107 021c 	add.w	r2, r7, #28
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	220e      	movs	r2, #14
 800272e:	2100      	movs	r1, #0
 8002730:	4813      	ldr	r0, [pc, #76]	@ (8002780 <main+0x2610>)
 8002732:	f005 fb22 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f008 fd82 	bl	800b242 <atoi>
 800273e:	4603      	mov	r3, r0
 8002740:	b29b      	uxth	r3, r3
 8002742:	807b      	strh	r3, [r7, #2]

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	2b3c      	cmp	r3, #60	@ 0x3c
 8002748:	d826      	bhi.n	8002798 <main+0x2628>

				//move to the seconds state
				status = 33;
 800274a:	2321      	movs	r3, #33	@ 0x21
 800274c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				CLK.min = buffer;
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <main+0x2624>)
 8002756:	725a      	strb	r2, [r3, #9]

				input_index = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800275e:	2300      	movs	r3, #0
 8002760:	2200      	movs	r2, #0
 8002762:	2101      	movs	r1, #1
 8002764:	4806      	ldr	r0, [pc, #24]	@ (8002780 <main+0x2610>)
 8002766:	f005 fb32 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800276a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800276e:	2301      	movs	r3, #1
 8002770:	2101      	movs	r1, #1
 8002772:	4803      	ldr	r0, [pc, #12]	@ (8002780 <main+0x2610>)
 8002774:	f005 fb2b 	bl	8007dce <Alcd_Display_Control>
 8002778:	e036      	b.n	80027e8 <main+0x2678>
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000
 8002780:	2000001c 	.word	0x2000001c
 8002784:	0800be28 	.word	0x0800be28
 8002788:	0800be2c 	.word	0x0800be2c
 800278c:	0800be30 	.word	0x0800be30
 8002790:	0800bd1c 	.word	0x0800bd1c
 8002794:	20000150 	.word	0x20000150
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8002798:	48b0      	ldr	r0, [pc, #704]	@ (8002a5c <main+0x28ec>)
 800279a:	f005 fb5b 	bl	8007e54 <Str_Len>
 800279e:	4603      	mov	r3, r0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4bad      	ldr	r3, [pc, #692]	@ (8002a5c <main+0x28ec>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	48ad      	ldr	r0, [pc, #692]	@ (8002a60 <main+0x28f0>)
 80027ac:	f005 fae5 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80027bc:	2300      	movs	r3, #0
 80027be:	2200      	movs	r2, #0
 80027c0:	2101      	movs	r1, #1
 80027c2:	48a7      	ldr	r0, [pc, #668]	@ (8002a60 <main+0x28f0>)
 80027c4:	f005 fb03 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80027c8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80027cc:	2301      	movs	r3, #1
 80027ce:	2101      	movs	r1, #1
 80027d0:	48a3      	ldr	r0, [pc, #652]	@ (8002a60 <main+0x28f0>)
 80027d2:	f005 fafc 	bl	8007dce <Alcd_Display_Control>
				//return to entering hours
				status = 31;
 80027d6:	231f      	movs	r3, #31
 80027d8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80027dc:	f005 fca0 	bl	8008120 <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80027e8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <main+0x268e>
 80027f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d302      	bcc.n	80027fe <main+0x268e>

				delay_flag = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 32) && (current_tick >= general_delay)) {
 80027fe:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002802:	2b20      	cmp	r3, #32
 8002804:	f040 837a 	bne.w	8002efc <main+0x2d8c>
 8002808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800280a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800280c:	429a      	cmp	r2, r3
 800280e:	f4bf af74 	bcs.w	80026fa <main+0x258a>
			}

		}

		//entering the seconds state (31)
		while ((status == 33) && (current_tick >= general_delay)) {
 8002812:	e373      	b.n	8002efc <main+0x2d8c>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002814:	f005 fc84 	bl	8008120 <HAL_GetTick>
 8002818:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter seconds");
 800281a:	4892      	ldr	r0, [pc, #584]	@ (8002a64 <main+0x28f4>)
 800281c:	f005 fb1a 	bl	8007e54 <Str_Len>
 8002820:	4603      	mov	r3, r0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4b8f      	ldr	r3, [pc, #572]	@ (8002a64 <main+0x28f4>)
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	488c      	ldr	r0, [pc, #560]	@ (8002a60 <main+0x28f0>)
 800282e:	f005 faa4 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002832:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002836:	f107 001c 	add.w	r0, r7, #28
 800283a:	4a8b      	ldr	r2, [pc, #556]	@ (8002a68 <main+0x28f8>)
 800283c:	2132      	movs	r1, #50	@ 0x32
 800283e:	f008 fd89 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fc8a 	bl	8000160 <strlen>
 800284c:	4603      	mov	r3, r0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f107 021c 	add.w	r2, r7, #28
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	220e      	movs	r2, #14
 800285a:	2100      	movs	r1, #0
 800285c:	4880      	ldr	r0, [pc, #512]	@ (8002a60 <main+0x28f0>)
 800285e:	f005 fa8c 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8002862:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002866:	461a      	mov	r2, r3
 8002868:	2101      	movs	r1, #1
 800286a:	487d      	ldr	r0, [pc, #500]	@ (8002a60 <main+0x28f0>)
 800286c:	f005 fa49 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8002870:	2301      	movs	r3, #1
 8002872:	2201      	movs	r2, #1
 8002874:	2101      	movs	r1, #1
 8002876:	487a      	ldr	r0, [pc, #488]	@ (8002a60 <main+0x28f0>)
 8002878:	f005 faa9 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800287c:	487b      	ldr	r0, [pc, #492]	@ (8002a6c <main+0x28fc>)
 800287e:	f005 fb43 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8002882:	210e      	movs	r1, #14
 8002884:	4879      	ldr	r0, [pc, #484]	@ (8002a6c <main+0x28fc>)
 8002886:	f005 fbdb 	bl	8008040 <Keypad_Get_Key>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <main+0x2730>
					&& (current_tick >= general_delay)) {
 8002890:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002894:	429a      	cmp	r2, r3
 8002896:	d303      	bcc.n	80028a0 <main+0x2730>

				//back to previous menu
				status = 31;
 8002898:	231f      	movs	r3, #31
 800289a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800289e:	e300      	b.n	8002ea2 <main+0x2d32>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80028a0:	210d      	movs	r1, #13
 80028a2:	4872      	ldr	r0, [pc, #456]	@ (8002a6c <main+0x28fc>)
 80028a4:	f005 fbcc 	bl	8008040 <Keypad_Get_Key>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d042      	beq.n	8002934 <main+0x27c4>
					&& (current_tick >= general_delay)) {
 80028ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80028b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d33e      	bcc.n	8002934 <main+0x27c4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80028b6:	2300      	movs	r3, #0
 80028b8:	2200      	movs	r2, #0
 80028ba:	2101      	movs	r1, #1
 80028bc:	4868      	ldr	r0, [pc, #416]	@ (8002a60 <main+0x28f0>)
 80028be:	f005 fa86 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80028c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d827      	bhi.n	800291a <main+0x27aa>
					time_date_buffer[input_index] = '0';
 80028ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80028ce:	3368      	adds	r3, #104	@ 0x68
 80028d0:	443b      	add	r3, r7
 80028d2:	2230      	movs	r2, #48	@ 0x30
 80028d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80028d8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80028dc:	3301      	adds	r3, #1
 80028de:	3368      	adds	r3, #104	@ 0x68
 80028e0:	443b      	add	r3, r7
 80028e2:	2200      	movs	r2, #0
 80028e4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80028e8:	4861      	ldr	r0, [pc, #388]	@ (8002a70 <main+0x2900>)
 80028ea:	f005 fab3 	bl	8007e54 <Str_Len>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002a70 <main+0x2900>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	4858      	ldr	r0, [pc, #352]	@ (8002a60 <main+0x28f0>)
 80028fe:	f005 fa3c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002902:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002906:	3301      	adds	r3, #1
 8002908:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800290c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002910:	461a      	mov	r2, r3
 8002912:	2101      	movs	r1, #1
 8002914:	4852      	ldr	r0, [pc, #328]	@ (8002a60 <main+0x28f0>)
 8002916:	f005 f9f4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800291a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800291e:	2301      	movs	r3, #1
 8002920:	2101      	movs	r1, #1
 8002922:	484f      	ldr	r0, [pc, #316]	@ (8002a60 <main+0x28f0>)
 8002924:	f005 fa53 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002928:	f005 fbfa 	bl	8008120 <HAL_GetTick>
 800292c:	4603      	mov	r3, r0
 800292e:	33fa      	adds	r3, #250	@ 0xfa
 8002930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002932:	e2b6      	b.n	8002ea2 <main+0x2d32>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8002934:	2100      	movs	r1, #0
 8002936:	484d      	ldr	r0, [pc, #308]	@ (8002a6c <main+0x28fc>)
 8002938:	f005 fb82 	bl	8008040 <Keypad_Get_Key>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d042      	beq.n	80029c8 <main+0x2858>
					&& (current_tick >= general_delay)) {
 8002942:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002946:	429a      	cmp	r2, r3
 8002948:	d33e      	bcc.n	80029c8 <main+0x2858>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800294a:	2300      	movs	r3, #0
 800294c:	2200      	movs	r2, #0
 800294e:	2101      	movs	r1, #1
 8002950:	4843      	ldr	r0, [pc, #268]	@ (8002a60 <main+0x28f0>)
 8002952:	f005 fa3c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002956:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800295a:	2b01      	cmp	r3, #1
 800295c:	d827      	bhi.n	80029ae <main+0x283e>
					time_date_buffer[input_index] = '1';
 800295e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002962:	3368      	adds	r3, #104	@ 0x68
 8002964:	443b      	add	r3, r7
 8002966:	2231      	movs	r2, #49	@ 0x31
 8002968:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800296c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002970:	3301      	adds	r3, #1
 8002972:	3368      	adds	r3, #104	@ 0x68
 8002974:	443b      	add	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 800297c:	483d      	ldr	r0, [pc, #244]	@ (8002a74 <main+0x2904>)
 800297e:	f005 fa69 	bl	8007e54 <Str_Len>
 8002982:	4603      	mov	r3, r0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <main+0x2904>)
 800298e:	2101      	movs	r1, #1
 8002990:	4833      	ldr	r0, [pc, #204]	@ (8002a60 <main+0x28f0>)
 8002992:	f005 f9f2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002996:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800299a:	3301      	adds	r3, #1
 800299c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80029a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80029a4:	461a      	mov	r2, r3
 80029a6:	2101      	movs	r1, #1
 80029a8:	482d      	ldr	r0, [pc, #180]	@ (8002a60 <main+0x28f0>)
 80029aa:	f005 f9aa 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80029ae:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80029b2:	2301      	movs	r3, #1
 80029b4:	2101      	movs	r1, #1
 80029b6:	482a      	ldr	r0, [pc, #168]	@ (8002a60 <main+0x28f0>)
 80029b8:	f005 fa09 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80029bc:	f005 fbb0 	bl	8008120 <HAL_GetTick>
 80029c0:	4603      	mov	r3, r0
 80029c2:	33fa      	adds	r3, #250	@ 0xfa
 80029c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029c6:	e26c      	b.n	8002ea2 <main+0x2d32>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80029c8:	2101      	movs	r1, #1
 80029ca:	4828      	ldr	r0, [pc, #160]	@ (8002a6c <main+0x28fc>)
 80029cc:	f005 fb38 	bl	8008040 <Keypad_Get_Key>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d052      	beq.n	8002a7c <main+0x290c>
					&& (current_tick >= general_delay)) {
 80029d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029da:	429a      	cmp	r2, r3
 80029dc:	d34e      	bcc.n	8002a7c <main+0x290c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80029de:	2300      	movs	r3, #0
 80029e0:	2200      	movs	r2, #0
 80029e2:	2101      	movs	r1, #1
 80029e4:	481e      	ldr	r0, [pc, #120]	@ (8002a60 <main+0x28f0>)
 80029e6:	f005 f9f2 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80029ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d827      	bhi.n	8002a42 <main+0x28d2>
					time_date_buffer[input_index] = '2';
 80029f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80029f6:	3368      	adds	r3, #104	@ 0x68
 80029f8:	443b      	add	r3, r7
 80029fa:	2232      	movs	r2, #50	@ 0x32
 80029fc:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002a00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002a04:	3301      	adds	r3, #1
 8002a06:	3368      	adds	r3, #104	@ 0x68
 8002a08:	443b      	add	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8002a10:	4819      	ldr	r0, [pc, #100]	@ (8002a78 <main+0x2908>)
 8002a12:	f005 fa1f 	bl	8007e54 <Str_Len>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <main+0x2908>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	480e      	ldr	r0, [pc, #56]	@ (8002a60 <main+0x28f0>)
 8002a26:	f005 f9a8 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002a2a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002a34:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4808      	ldr	r0, [pc, #32]	@ (8002a60 <main+0x28f0>)
 8002a3e:	f005 f960 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002a42:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002a46:	2301      	movs	r3, #1
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <main+0x28f0>)
 8002a4c:	f005 f9bf 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002a50:	f005 fb66 	bl	8008120 <HAL_GetTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	33fa      	adds	r3, #250	@ 0xfa
 8002a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a5a:	e222      	b.n	8002ea2 <main+0x2d32>
 8002a5c:	0800be34 	.word	0x0800be34
 8002a60:	2000001c 	.word	0x2000001c
 8002a64:	0800be4c 	.word	0x0800be4c
 8002a68:	0800bd1c 	.word	0x0800bd1c
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	0800be0c 	.word	0x0800be0c
 8002a74:	0800be10 	.word	0x0800be10
 8002a78:	0800be14 	.word	0x0800be14

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	48b8      	ldr	r0, [pc, #736]	@ (8002d60 <main+0x2bf0>)
 8002a80:	f005 fade 	bl	8008040 <Keypad_Get_Key>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d042      	beq.n	8002b10 <main+0x29a0>
					&& (current_tick >= general_delay)) {
 8002a8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d33e      	bcc.n	8002b10 <main+0x29a0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002a92:	2300      	movs	r3, #0
 8002a94:	2200      	movs	r2, #0
 8002a96:	2101      	movs	r1, #1
 8002a98:	48b2      	ldr	r0, [pc, #712]	@ (8002d64 <main+0x2bf4>)
 8002a9a:	f005 f998 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002a9e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d827      	bhi.n	8002af6 <main+0x2986>
					time_date_buffer[input_index] = '3';
 8002aa6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002aaa:	3368      	adds	r3, #104	@ 0x68
 8002aac:	443b      	add	r3, r7
 8002aae:	2233      	movs	r2, #51	@ 0x33
 8002ab0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002ab4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002ab8:	3301      	adds	r3, #1
 8002aba:	3368      	adds	r3, #104	@ 0x68
 8002abc:	443b      	add	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8002ac4:	48a8      	ldr	r0, [pc, #672]	@ (8002d68 <main+0x2bf8>)
 8002ac6:	f005 f9c5 	bl	8007e54 <Str_Len>
 8002aca:	4603      	mov	r3, r0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4ba4      	ldr	r3, [pc, #656]	@ (8002d68 <main+0x2bf8>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	48a2      	ldr	r0, [pc, #648]	@ (8002d64 <main+0x2bf4>)
 8002ada:	f005 f94e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002ade:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002ae8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002aec:	461a      	mov	r2, r3
 8002aee:	2101      	movs	r1, #1
 8002af0:	489c      	ldr	r0, [pc, #624]	@ (8002d64 <main+0x2bf4>)
 8002af2:	f005 f906 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002af6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002afa:	2301      	movs	r3, #1
 8002afc:	2101      	movs	r1, #1
 8002afe:	4899      	ldr	r0, [pc, #612]	@ (8002d64 <main+0x2bf4>)
 8002b00:	f005 f965 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002b04:	f005 fb0c 	bl	8008120 <HAL_GetTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	33fa      	adds	r3, #250	@ 0xfa
 8002b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b0e:	e1c8      	b.n	8002ea2 <main+0x2d32>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8002b10:	2104      	movs	r1, #4
 8002b12:	4893      	ldr	r0, [pc, #588]	@ (8002d60 <main+0x2bf0>)
 8002b14:	f005 fa94 	bl	8008040 <Keypad_Get_Key>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d042      	beq.n	8002ba4 <main+0x2a34>
					&& (current_tick >= general_delay)) {
 8002b1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d33e      	bcc.n	8002ba4 <main+0x2a34>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002b26:	2300      	movs	r3, #0
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	488d      	ldr	r0, [pc, #564]	@ (8002d64 <main+0x2bf4>)
 8002b2e:	f005 f94e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002b32:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d827      	bhi.n	8002b8a <main+0x2a1a>
					time_date_buffer[input_index] = '4';
 8002b3a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b3e:	3368      	adds	r3, #104	@ 0x68
 8002b40:	443b      	add	r3, r7
 8002b42:	2234      	movs	r2, #52	@ 0x34
 8002b44:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002b48:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	3368      	adds	r3, #104	@ 0x68
 8002b50:	443b      	add	r3, r7
 8002b52:	2200      	movs	r2, #0
 8002b54:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8002b58:	4884      	ldr	r0, [pc, #528]	@ (8002d6c <main+0x2bfc>)
 8002b5a:	f005 f97b 	bl	8007e54 <Str_Len>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	4b80      	ldr	r3, [pc, #512]	@ (8002d6c <main+0x2bfc>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	487d      	ldr	r0, [pc, #500]	@ (8002d64 <main+0x2bf4>)
 8002b6e:	f005 f904 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002b72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b76:	3301      	adds	r3, #1
 8002b78:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002b7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b80:	461a      	mov	r2, r3
 8002b82:	2101      	movs	r1, #1
 8002b84:	4877      	ldr	r0, [pc, #476]	@ (8002d64 <main+0x2bf4>)
 8002b86:	f005 f8bc 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002b8a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2101      	movs	r1, #1
 8002b92:	4874      	ldr	r0, [pc, #464]	@ (8002d64 <main+0x2bf4>)
 8002b94:	f005 f91b 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002b98:	f005 fac2 	bl	8008120 <HAL_GetTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	33fa      	adds	r3, #250	@ 0xfa
 8002ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ba2:	e17e      	b.n	8002ea2 <main+0x2d32>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	486e      	ldr	r0, [pc, #440]	@ (8002d60 <main+0x2bf0>)
 8002ba8:	f005 fa4a 	bl	8008040 <Keypad_Get_Key>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d042      	beq.n	8002c38 <main+0x2ac8>
					&& (current_tick >= general_delay)) {
 8002bb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d33e      	bcc.n	8002c38 <main+0x2ac8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4868      	ldr	r0, [pc, #416]	@ (8002d64 <main+0x2bf4>)
 8002bc2:	f005 f904 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002bc6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d827      	bhi.n	8002c1e <main+0x2aae>
					time_date_buffer[input_index] = '5';
 8002bce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002bd2:	3368      	adds	r3, #104	@ 0x68
 8002bd4:	443b      	add	r3, r7
 8002bd6:	2235      	movs	r2, #53	@ 0x35
 8002bd8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002bdc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002be0:	3301      	adds	r3, #1
 8002be2:	3368      	adds	r3, #104	@ 0x68
 8002be4:	443b      	add	r3, r7
 8002be6:	2200      	movs	r2, #0
 8002be8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8002bec:	4860      	ldr	r0, [pc, #384]	@ (8002d70 <main+0x2c00>)
 8002bee:	f005 f931 	bl	8007e54 <Str_Len>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8002d70 <main+0x2c00>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4858      	ldr	r0, [pc, #352]	@ (8002d64 <main+0x2bf4>)
 8002c02:	f005 f8ba 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002c06:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002c10:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c14:	461a      	mov	r2, r3
 8002c16:	2101      	movs	r1, #1
 8002c18:	4852      	ldr	r0, [pc, #328]	@ (8002d64 <main+0x2bf4>)
 8002c1a:	f005 f872 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002c1e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002c22:	2301      	movs	r3, #1
 8002c24:	2101      	movs	r1, #1
 8002c26:	484f      	ldr	r0, [pc, #316]	@ (8002d64 <main+0x2bf4>)
 8002c28:	f005 f8d1 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002c2c:	f005 fa78 	bl	8008120 <HAL_GetTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	33fa      	adds	r3, #250	@ 0xfa
 8002c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c36:	e134      	b.n	8002ea2 <main+0x2d32>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8002c38:	2106      	movs	r1, #6
 8002c3a:	4849      	ldr	r0, [pc, #292]	@ (8002d60 <main+0x2bf0>)
 8002c3c:	f005 fa00 	bl	8008040 <Keypad_Get_Key>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d042      	beq.n	8002ccc <main+0x2b5c>
					&& (current_tick >= general_delay)) {
 8002c46:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d33e      	bcc.n	8002ccc <main+0x2b5c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2200      	movs	r2, #0
 8002c52:	2101      	movs	r1, #1
 8002c54:	4843      	ldr	r0, [pc, #268]	@ (8002d64 <main+0x2bf4>)
 8002c56:	f005 f8ba 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002c5a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d827      	bhi.n	8002cb2 <main+0x2b42>
					time_date_buffer[input_index] = '6';
 8002c62:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c66:	3368      	adds	r3, #104	@ 0x68
 8002c68:	443b      	add	r3, r7
 8002c6a:	2236      	movs	r2, #54	@ 0x36
 8002c6c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002c70:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c74:	3301      	adds	r3, #1
 8002c76:	3368      	adds	r3, #104	@ 0x68
 8002c78:	443b      	add	r3, r7
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8002c80:	483c      	ldr	r0, [pc, #240]	@ (8002d74 <main+0x2c04>)
 8002c82:	f005 f8e7 	bl	8007e54 <Str_Len>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <main+0x2c04>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	4833      	ldr	r0, [pc, #204]	@ (8002d64 <main+0x2bf4>)
 8002c96:	f005 f870 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002c9a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002ca4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2101      	movs	r1, #1
 8002cac:	482d      	ldr	r0, [pc, #180]	@ (8002d64 <main+0x2bf4>)
 8002cae:	f005 f828 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002cb2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	2101      	movs	r1, #1
 8002cba:	482a      	ldr	r0, [pc, #168]	@ (8002d64 <main+0x2bf4>)
 8002cbc:	f005 f887 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002cc0:	f005 fa2e 	bl	8008120 <HAL_GetTick>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	33fa      	adds	r3, #250	@ 0xfa
 8002cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cca:	e0ea      	b.n	8002ea2 <main+0x2d32>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8002ccc:	2108      	movs	r1, #8
 8002cce:	4824      	ldr	r0, [pc, #144]	@ (8002d60 <main+0x2bf0>)
 8002cd0:	f005 f9b6 	bl	8008040 <Keypad_Get_Key>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d050      	beq.n	8002d7c <main+0x2c0c>
					&& (current_tick >= general_delay)) {
 8002cda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d34c      	bcc.n	8002d7c <main+0x2c0c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	481e      	ldr	r0, [pc, #120]	@ (8002d64 <main+0x2bf4>)
 8002cea:	f005 f870 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002cee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d827      	bhi.n	8002d46 <main+0x2bd6>
					time_date_buffer[input_index] = '7';
 8002cf6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002cfa:	3368      	adds	r3, #104	@ 0x68
 8002cfc:	443b      	add	r3, r7
 8002cfe:	2237      	movs	r2, #55	@ 0x37
 8002d00:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002d04:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d08:	3301      	adds	r3, #1
 8002d0a:	3368      	adds	r3, #104	@ 0x68
 8002d0c:	443b      	add	r3, r7
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8002d14:	4818      	ldr	r0, [pc, #96]	@ (8002d78 <main+0x2c08>)
 8002d16:	f005 f89d 	bl	8007e54 <Str_Len>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <main+0x2c08>)
 8002d26:	2101      	movs	r1, #1
 8002d28:	480e      	ldr	r0, [pc, #56]	@ (8002d64 <main+0x2bf4>)
 8002d2a:	f005 f826 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002d2e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d32:	3301      	adds	r3, #1
 8002d34:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002d38:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4808      	ldr	r0, [pc, #32]	@ (8002d64 <main+0x2bf4>)
 8002d42:	f004 ffde 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002d46:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <main+0x2bf4>)
 8002d50:	f005 f83d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002d54:	f005 f9e4 	bl	8008120 <HAL_GetTick>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	33fa      	adds	r3, #250	@ 0xfa
 8002d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d5e:	e0a0      	b.n	8002ea2 <main+0x2d32>
 8002d60:	20000000 	.word	0x20000000
 8002d64:	2000001c 	.word	0x2000001c
 8002d68:	0800be18 	.word	0x0800be18
 8002d6c:	0800be1c 	.word	0x0800be1c
 8002d70:	0800be20 	.word	0x0800be20
 8002d74:	0800be24 	.word	0x0800be24
 8002d78:	0800be28 	.word	0x0800be28

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8002d7c:	2109      	movs	r1, #9
 8002d7e:	48c2      	ldr	r0, [pc, #776]	@ (8003088 <main+0x2f18>)
 8002d80:	f005 f95e 	bl	8008040 <Keypad_Get_Key>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d042      	beq.n	8002e10 <main+0x2ca0>
					&& (current_tick >= general_delay)) {
 8002d8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d33e      	bcc.n	8002e10 <main+0x2ca0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002d92:	2300      	movs	r3, #0
 8002d94:	2200      	movs	r2, #0
 8002d96:	2101      	movs	r1, #1
 8002d98:	48bc      	ldr	r0, [pc, #752]	@ (800308c <main+0x2f1c>)
 8002d9a:	f005 f818 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002d9e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d827      	bhi.n	8002df6 <main+0x2c86>
					time_date_buffer[input_index] = '8';
 8002da6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002daa:	3368      	adds	r3, #104	@ 0x68
 8002dac:	443b      	add	r3, r7
 8002dae:	2238      	movs	r2, #56	@ 0x38
 8002db0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002db4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002db8:	3301      	adds	r3, #1
 8002dba:	3368      	adds	r3, #104	@ 0x68
 8002dbc:	443b      	add	r3, r7
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8002dc4:	48b2      	ldr	r0, [pc, #712]	@ (8003090 <main+0x2f20>)
 8002dc6:	f005 f845 	bl	8007e54 <Str_Len>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4bae      	ldr	r3, [pc, #696]	@ (8003090 <main+0x2f20>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	48ac      	ldr	r0, [pc, #688]	@ (800308c <main+0x2f1c>)
 8002dda:	f004 ffce 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002dde:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002de2:	3301      	adds	r3, #1
 8002de4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002de8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002dec:	461a      	mov	r2, r3
 8002dee:	2101      	movs	r1, #1
 8002df0:	48a6      	ldr	r0, [pc, #664]	@ (800308c <main+0x2f1c>)
 8002df2:	f004 ff86 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002df6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	48a3      	ldr	r0, [pc, #652]	@ (800308c <main+0x2f1c>)
 8002e00:	f004 ffe5 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002e04:	f005 f98c 	bl	8008120 <HAL_GetTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	33fa      	adds	r3, #250	@ 0xfa
 8002e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e0e:	e048      	b.n	8002ea2 <main+0x2d32>

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8002e10:	210a      	movs	r1, #10
 8002e12:	489d      	ldr	r0, [pc, #628]	@ (8003088 <main+0x2f18>)
 8002e14:	f005 f914 	bl	8008040 <Keypad_Get_Key>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d041      	beq.n	8002ea2 <main+0x2d32>
					&& (current_tick >= general_delay)) {
 8002e1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d33d      	bcc.n	8002ea2 <main+0x2d32>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002e26:	2300      	movs	r3, #0
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4897      	ldr	r0, [pc, #604]	@ (800308c <main+0x2f1c>)
 8002e2e:	f004 ffce 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8002e32:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d827      	bhi.n	8002e8a <main+0x2d1a>
					time_date_buffer[input_index] = '9';
 8002e3a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e3e:	3368      	adds	r3, #104	@ 0x68
 8002e40:	443b      	add	r3, r7
 8002e42:	2239      	movs	r2, #57	@ 0x39
 8002e44:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8002e48:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	3368      	adds	r3, #104	@ 0x68
 8002e50:	443b      	add	r3, r7
 8002e52:	2200      	movs	r2, #0
 8002e54:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8002e58:	488e      	ldr	r0, [pc, #568]	@ (8003094 <main+0x2f24>)
 8002e5a:	f004 fffb 	bl	8007e54 <Str_Len>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	4b8a      	ldr	r3, [pc, #552]	@ (8003094 <main+0x2f24>)
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4887      	ldr	r0, [pc, #540]	@ (800308c <main+0x2f1c>)
 8002e6e:	f004 ff84 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8002e72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e76:	3301      	adds	r3, #1
 8002e78:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8002e7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002e80:	461a      	mov	r2, r3
 8002e82:	2101      	movs	r1, #1
 8002e84:	4881      	ldr	r0, [pc, #516]	@ (800308c <main+0x2f1c>)
 8002e86:	f004 ff3c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002e8a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002e8e:	2301      	movs	r3, #1
 8002e90:	2101      	movs	r1, #1
 8002e92:	487e      	ldr	r0, [pc, #504]	@ (800308c <main+0x2f1c>)
 8002e94:	f004 ff9b 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8002e98:	f005 f942 	bl	8008120 <HAL_GetTick>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	33fa      	adds	r3, #250	@ 0xfa
 8002ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for seconds validity (state 34)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	4878      	ldr	r0, [pc, #480]	@ (8003088 <main+0x2f18>)
 8002ea6:	f005 f8cb 	bl	8008040 <Keypad_Get_Key>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <main+0x2d82>
					&& (current_tick >= general_delay)) {
 8002eb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d31c      	bcc.n	8002ef2 <main+0x2d82>

				Alcd_Clear(&lcd);
 8002eb8:	4874      	ldr	r0, [pc, #464]	@ (800308c <main+0x2f1c>)
 8002eba:	f004 ff77 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	f107 001c 	add.w	r0, r7, #28
 8002ec4:	4a74      	ldr	r2, [pc, #464]	@ (8003098 <main+0x2f28>)
 8002ec6:	2132      	movs	r1, #50	@ 0x32
 8002ec8:	f008 fa44 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd f945 	bl	8000160 <strlen>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f107 021c 	add.w	r2, r7, #28
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4869      	ldr	r0, [pc, #420]	@ (800308c <main+0x2f1c>)
 8002ee8:	f004 ff47 	bl	8007d7a <Alcd_PutAt_n>

				status = 34;
 8002eec:	2322      	movs	r3, #34	@ 0x22
 8002eee:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8002ef2:	f005 f915 	bl	8008120 <HAL_GetTick>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	33fa      	adds	r3, #250	@ 0xfa
 8002efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 33) && (current_tick >= general_delay)) {
 8002efc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002f00:	2b21      	cmp	r3, #33	@ 0x21
 8002f02:	d178      	bne.n	8002ff6 <main+0x2e86>
 8002f04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	f4bf ac83 	bcs.w	8002814 <main+0x26a4>
		}

		//seconds validation phase
		while ((status == 34) && (current_tick >= general_delay)) {
 8002f0e:	e072      	b.n	8002ff6 <main+0x2e86>

			//get the current tick number
			current_tick = HAL_GetTick();
 8002f10:	f005 f906 	bl	8008120 <HAL_GetTick>
 8002f14:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8002f16:	485d      	ldr	r0, [pc, #372]	@ (800308c <main+0x2f1c>)
 8002f18:	f004 ff48 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8002f1c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002f20:	f107 001c 	add.w	r0, r7, #28
 8002f24:	4a5c      	ldr	r2, [pc, #368]	@ (8003098 <main+0x2f28>)
 8002f26:	2132      	movs	r1, #50	@ 0x32
 8002f28:	f008 fa14 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd f915 	bl	8000160 <strlen>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f107 021c 	add.w	r2, r7, #28
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	220e      	movs	r2, #14
 8002f44:	2100      	movs	r1, #0
 8002f46:	4851      	ldr	r0, [pc, #324]	@ (800308c <main+0x2f1c>)
 8002f48:	f004 ff17 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f008 f977 	bl	800b242 <atoi>
 8002f54:	4603      	mov	r3, r0
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	807b      	strh	r3, [r7, #2]

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f5e:	d817      	bhi.n	8002f90 <main+0x2e20>

				//move to the confirmation state
				status = 35;
 8002f60:	2323      	movs	r3, #35	@ 0x23
 8002f62:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				CLK.sec = buffer;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800309c <main+0x2f2c>)
 8002f6c:	721a      	strb	r2, [r3, #8]

				input_index = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002f74:	2300      	movs	r3, #0
 8002f76:	2200      	movs	r2, #0
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4844      	ldr	r0, [pc, #272]	@ (800308c <main+0x2f1c>)
 8002f7c:	f004 ff27 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002f80:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002f84:	2301      	movs	r3, #1
 8002f86:	2101      	movs	r1, #1
 8002f88:	4840      	ldr	r0, [pc, #256]	@ (800308c <main+0x2f1c>)
 8002f8a:	f004 ff20 	bl	8007dce <Alcd_Display_Control>
 8002f8e:	e027      	b.n	8002fe0 <main+0x2e70>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8002f90:	4843      	ldr	r0, [pc, #268]	@ (80030a0 <main+0x2f30>)
 8002f92:	f004 ff5f 	bl	8007e54 <Str_Len>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <main+0x2f30>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	483a      	ldr	r0, [pc, #232]	@ (800308c <main+0x2f1c>)
 8002fa4:	f004 fee9 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4834      	ldr	r0, [pc, #208]	@ (800308c <main+0x2f1c>)
 8002fbc:	f004 ff07 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8002fc0:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4830      	ldr	r0, [pc, #192]	@ (800308c <main+0x2f1c>)
 8002fca:	f004 ff00 	bl	8007dce <Alcd_Display_Control>
				//return to entering hours
				status = 33;
 8002fce:	2321      	movs	r3, #33	@ 0x21
 8002fd0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 8002fd4:	f005 f8a4 	bl	8008120 <HAL_GetTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8002fe0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d106      	bne.n	8002ff6 <main+0x2e86>
 8002fe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d302      	bcc.n	8002ff6 <main+0x2e86>

				delay_flag = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 34) && (current_tick >= general_delay)) {
 8002ff6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8002ffa:	2b22      	cmp	r3, #34	@ 0x22
 8002ffc:	d167      	bne.n	80030ce <main+0x2f5e>
 8002ffe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003002:	429a      	cmp	r2, r3
 8003004:	d284      	bcs.n	8002f10 <main+0x2da0>
			}

		}

		//time confirmation menu (state 35)
		while ((status == 35) && (current_tick >= general_delay)) {
 8003006:	e062      	b.n	80030ce <main+0x2f5e>

			//get the current tick number
			current_tick = HAL_GetTick();
 8003008:	f005 f88a 	bl	8008120 <HAL_GetTick>
 800300c:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 800300e:	481f      	ldr	r0, [pc, #124]	@ (800308c <main+0x2f1c>)
 8003010:	f004 fecc 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "confirm?");
 8003014:	4823      	ldr	r0, [pc, #140]	@ (80030a4 <main+0x2f34>)
 8003016:	f004 ff1d 	bl	8007e54 <Str_Len>
 800301a:	4603      	mov	r3, r0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <main+0x2f34>)
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	4819      	ldr	r0, [pc, #100]	@ (800308c <main+0x2f1c>)
 8003028:	f004 fea7 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800302c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8003030:	f107 001c 	add.w	r0, r7, #28
 8003034:	4a18      	ldr	r2, [pc, #96]	@ (8003098 <main+0x2f28>)
 8003036:	2132      	movs	r1, #50	@ 0x32
 8003038:	f008 f98c 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd f88d 	bl	8000160 <strlen>
 8003046:	4603      	mov	r3, r0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f107 021c 	add.w	r2, r7, #28
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	220e      	movs	r2, #14
 8003054:	2100      	movs	r1, #0
 8003056:	480d      	ldr	r0, [pc, #52]	@ (800308c <main+0x2f1c>)
 8003058:	f004 fe8f 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800305c:	480a      	ldr	r0, [pc, #40]	@ (8003088 <main+0x2f18>)
 800305e:	f004 ff53 	bl	8007f08 <Keypad_Refresh>

			//yes is selected
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8003062:	210f      	movs	r1, #15
 8003064:	4808      	ldr	r0, [pc, #32]	@ (8003088 <main+0x2f18>)
 8003066:	f004 ffeb 	bl	8008040 <Keypad_Get_Key>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <main+0x2f38>
					&& (current_tick >= general_delay)) {
 8003070:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003074:	429a      	cmp	r2, r3
 8003076:	d317      	bcc.n	80030a8 <main+0x2f38>

				Ds1307_set(&CLK);
 8003078:	4808      	ldr	r0, [pc, #32]	@ (800309c <main+0x2f2c>)
 800307a:	f004 fbae 	bl	80077da <Ds1307_set>

				//return to edit menu
				status = 21;
 800307e:	2315      	movs	r3, #21
 8003080:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8003084:	e01e      	b.n	80030c4 <main+0x2f54>
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000
 800308c:	2000001c 	.word	0x2000001c
 8003090:	0800be2c 	.word	0x0800be2c
 8003094:	0800be30 	.word	0x0800be30
 8003098:	0800bd1c 	.word	0x0800bd1c
 800309c:	20000150 	.word	0x20000150
 80030a0:	0800be34 	.word	0x0800be34
 80030a4:	0800be5c 	.word	0x0800be5c

			}

			//back is selected -> back to seconds state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80030a8:	210e      	movs	r1, #14
 80030aa:	48c6      	ldr	r0, [pc, #792]	@ (80033c4 <main+0x3254>)
 80030ac:	f004 ffc8 	bl	8008040 <Keypad_Get_Key>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <main+0x2f54>
					&& (current_tick >= general_delay)) {
 80030b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <main+0x2f54>

				status = 33;
 80030be:	2321      	movs	r3, #33	@ 0x21
 80030c0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80030c4:	f005 f82c 	bl	8008120 <HAL_GetTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	33fa      	adds	r3, #250	@ 0xfa
 80030cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 35) && (current_tick >= general_delay)) {
 80030ce:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80030d2:	2b23      	cmp	r3, #35	@ 0x23
 80030d4:	f040 837c 	bne.w	80037d0 <main+0x3660>
 80030d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d293      	bcs.n	8003008 <main+0x2e98>
		}

		//date edit menu -> enter day(state 26)
		while ((status == 26) && (current_tick >= general_delay)) {
 80030e0:	e376      	b.n	80037d0 <main+0x3660>

			//get the current tick number
			current_tick = HAL_GetTick();
 80030e2:	f005 f81d 	bl	8008120 <HAL_GetTick>
 80030e6:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter day");
 80030e8:	48b7      	ldr	r0, [pc, #732]	@ (80033c8 <main+0x3258>)
 80030ea:	f004 feb3 	bl	8007e54 <Str_Len>
 80030ee:	4603      	mov	r3, r0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4bb4      	ldr	r3, [pc, #720]	@ (80033c8 <main+0x3258>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	48b4      	ldr	r0, [pc, #720]	@ (80033cc <main+0x325c>)
 80030fc:	f004 fe3d 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003100:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8003104:	f107 001c 	add.w	r0, r7, #28
 8003108:	4ab1      	ldr	r2, [pc, #708]	@ (80033d0 <main+0x3260>)
 800310a:	2132      	movs	r1, #50	@ 0x32
 800310c:	f008 f922 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd f823 	bl	8000160 <strlen>
 800311a:	4603      	mov	r3, r0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f107 021c 	add.w	r2, r7, #28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	220e      	movs	r2, #14
 8003128:	2100      	movs	r1, #0
 800312a:	48a8      	ldr	r0, [pc, #672]	@ (80033cc <main+0x325c>)
 800312c:	f004 fe25 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8003130:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	48a4      	ldr	r0, [pc, #656]	@ (80033cc <main+0x325c>)
 800313a:	f004 fde2 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 800313e:	2301      	movs	r3, #1
 8003140:	2201      	movs	r2, #1
 8003142:	2101      	movs	r1, #1
 8003144:	48a1      	ldr	r0, [pc, #644]	@ (80033cc <main+0x325c>)
 8003146:	f004 fe42 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800314a:	489e      	ldr	r0, [pc, #632]	@ (80033c4 <main+0x3254>)
 800314c:	f004 fedc 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8003150:	210e      	movs	r1, #14
 8003152:	489c      	ldr	r0, [pc, #624]	@ (80033c4 <main+0x3254>)
 8003154:	f004 ff74 	bl	8008040 <Keypad_Get_Key>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <main+0x3004>
					&& (current_tick >= general_delay)) {
 800315e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003162:	429a      	cmp	r2, r3
 8003164:	d306      	bcc.n	8003174 <main+0x3004>

				input_index = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

				//back to previous menu
				status = 22;
 800316c:	2316      	movs	r3, #22
 800316e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8003172:	e300      	b.n	8003776 <main+0x3606>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8003174:	210d      	movs	r1, #13
 8003176:	4893      	ldr	r0, [pc, #588]	@ (80033c4 <main+0x3254>)
 8003178:	f004 ff62 	bl	8008040 <Keypad_Get_Key>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d042      	beq.n	8003208 <main+0x3098>
					&& (current_tick >= general_delay)) {
 8003182:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003186:	429a      	cmp	r2, r3
 8003188:	d33e      	bcc.n	8003208 <main+0x3098>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800318a:	2300      	movs	r3, #0
 800318c:	2200      	movs	r2, #0
 800318e:	2101      	movs	r1, #1
 8003190:	488e      	ldr	r0, [pc, #568]	@ (80033cc <main+0x325c>)
 8003192:	f004 fe1c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003196:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800319a:	2b01      	cmp	r3, #1
 800319c:	d827      	bhi.n	80031ee <main+0x307e>
					time_date_buffer[input_index] = '0';
 800319e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80031a2:	3368      	adds	r3, #104	@ 0x68
 80031a4:	443b      	add	r3, r7
 80031a6:	2230      	movs	r2, #48	@ 0x30
 80031a8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80031ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80031b0:	3301      	adds	r3, #1
 80031b2:	3368      	adds	r3, #104	@ 0x68
 80031b4:	443b      	add	r3, r7
 80031b6:	2200      	movs	r2, #0
 80031b8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80031bc:	4885      	ldr	r0, [pc, #532]	@ (80033d4 <main+0x3264>)
 80031be:	f004 fe49 	bl	8007e54 <Str_Len>
 80031c2:	4603      	mov	r3, r0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4b81      	ldr	r3, [pc, #516]	@ (80033d4 <main+0x3264>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	487e      	ldr	r0, [pc, #504]	@ (80033cc <main+0x325c>)
 80031d2:	f004 fdd2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80031d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80031da:	3301      	adds	r3, #1
 80031dc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80031e0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80031e4:	461a      	mov	r2, r3
 80031e6:	2101      	movs	r1, #1
 80031e8:	4878      	ldr	r0, [pc, #480]	@ (80033cc <main+0x325c>)
 80031ea:	f004 fd8a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80031ee:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80031f2:	2301      	movs	r3, #1
 80031f4:	2101      	movs	r1, #1
 80031f6:	4875      	ldr	r0, [pc, #468]	@ (80033cc <main+0x325c>)
 80031f8:	f004 fde9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80031fc:	f004 ff90 	bl	8008120 <HAL_GetTick>
 8003200:	4603      	mov	r3, r0
 8003202:	33fa      	adds	r3, #250	@ 0xfa
 8003204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003206:	e2b6      	b.n	8003776 <main+0x3606>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8003208:	2100      	movs	r1, #0
 800320a:	486e      	ldr	r0, [pc, #440]	@ (80033c4 <main+0x3254>)
 800320c:	f004 ff18 	bl	8008040 <Keypad_Get_Key>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d042      	beq.n	800329c <main+0x312c>
					&& (current_tick >= general_delay)) {
 8003216:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800321a:	429a      	cmp	r2, r3
 800321c:	d33e      	bcc.n	800329c <main+0x312c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800321e:	2300      	movs	r3, #0
 8003220:	2200      	movs	r2, #0
 8003222:	2101      	movs	r1, #1
 8003224:	4869      	ldr	r0, [pc, #420]	@ (80033cc <main+0x325c>)
 8003226:	f004 fdd2 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800322a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800322e:	2b01      	cmp	r3, #1
 8003230:	d827      	bhi.n	8003282 <main+0x3112>
					time_date_buffer[input_index] = '1';
 8003232:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003236:	3368      	adds	r3, #104	@ 0x68
 8003238:	443b      	add	r3, r7
 800323a:	2231      	movs	r2, #49	@ 0x31
 800323c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003240:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003244:	3301      	adds	r3, #1
 8003246:	3368      	adds	r3, #104	@ 0x68
 8003248:	443b      	add	r3, r7
 800324a:	2200      	movs	r2, #0
 800324c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8003250:	4861      	ldr	r0, [pc, #388]	@ (80033d8 <main+0x3268>)
 8003252:	f004 fdff 	bl	8007e54 <Str_Len>
 8003256:	4603      	mov	r3, r0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <main+0x3268>)
 8003262:	2101      	movs	r1, #1
 8003264:	4859      	ldr	r0, [pc, #356]	@ (80033cc <main+0x325c>)
 8003266:	f004 fd88 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800326a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800326e:	3301      	adds	r3, #1
 8003270:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003274:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003278:	461a      	mov	r2, r3
 800327a:	2101      	movs	r1, #1
 800327c:	4853      	ldr	r0, [pc, #332]	@ (80033cc <main+0x325c>)
 800327e:	f004 fd40 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003282:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003286:	2301      	movs	r3, #1
 8003288:	2101      	movs	r1, #1
 800328a:	4850      	ldr	r0, [pc, #320]	@ (80033cc <main+0x325c>)
 800328c:	f004 fd9f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003290:	f004 ff46 	bl	8008120 <HAL_GetTick>
 8003294:	4603      	mov	r3, r0
 8003296:	33fa      	adds	r3, #250	@ 0xfa
 8003298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800329a:	e26c      	b.n	8003776 <main+0x3606>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 800329c:	2101      	movs	r1, #1
 800329e:	4849      	ldr	r0, [pc, #292]	@ (80033c4 <main+0x3254>)
 80032a0:	f004 fece 	bl	8008040 <Keypad_Get_Key>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d042      	beq.n	8003330 <main+0x31c0>
					&& (current_tick >= general_delay)) {
 80032aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d33e      	bcc.n	8003330 <main+0x31c0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80032b2:	2300      	movs	r3, #0
 80032b4:	2200      	movs	r2, #0
 80032b6:	2101      	movs	r1, #1
 80032b8:	4844      	ldr	r0, [pc, #272]	@ (80033cc <main+0x325c>)
 80032ba:	f004 fd88 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80032be:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d827      	bhi.n	8003316 <main+0x31a6>
					time_date_buffer[input_index] = '2';
 80032c6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80032ca:	3368      	adds	r3, #104	@ 0x68
 80032cc:	443b      	add	r3, r7
 80032ce:	2232      	movs	r2, #50	@ 0x32
 80032d0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80032d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80032d8:	3301      	adds	r3, #1
 80032da:	3368      	adds	r3, #104	@ 0x68
 80032dc:	443b      	add	r3, r7
 80032de:	2200      	movs	r2, #0
 80032e0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 80032e4:	483d      	ldr	r0, [pc, #244]	@ (80033dc <main+0x326c>)
 80032e6:	f004 fdb5 	bl	8007e54 <Str_Len>
 80032ea:	4603      	mov	r3, r0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4b39      	ldr	r3, [pc, #228]	@ (80033dc <main+0x326c>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	4834      	ldr	r0, [pc, #208]	@ (80033cc <main+0x325c>)
 80032fa:	f004 fd3e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80032fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003302:	3301      	adds	r3, #1
 8003304:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003308:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800330c:	461a      	mov	r2, r3
 800330e:	2101      	movs	r1, #1
 8003310:	482e      	ldr	r0, [pc, #184]	@ (80033cc <main+0x325c>)
 8003312:	f004 fcf6 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003316:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800331a:	2301      	movs	r3, #1
 800331c:	2101      	movs	r1, #1
 800331e:	482b      	ldr	r0, [pc, #172]	@ (80033cc <main+0x325c>)
 8003320:	f004 fd55 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003324:	f004 fefc 	bl	8008120 <HAL_GetTick>
 8003328:	4603      	mov	r3, r0
 800332a:	33fa      	adds	r3, #250	@ 0xfa
 800332c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800332e:	e222      	b.n	8003776 <main+0x3606>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8003330:	2102      	movs	r1, #2
 8003332:	4824      	ldr	r0, [pc, #144]	@ (80033c4 <main+0x3254>)
 8003334:	f004 fe84 	bl	8008040 <Keypad_Get_Key>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d052      	beq.n	80033e4 <main+0x3274>
					&& (current_tick >= general_delay)) {
 800333e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003342:	429a      	cmp	r2, r3
 8003344:	d34e      	bcc.n	80033e4 <main+0x3274>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003346:	2300      	movs	r3, #0
 8003348:	2200      	movs	r2, #0
 800334a:	2101      	movs	r1, #1
 800334c:	481f      	ldr	r0, [pc, #124]	@ (80033cc <main+0x325c>)
 800334e:	f004 fd3e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003352:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003356:	2b01      	cmp	r3, #1
 8003358:	d827      	bhi.n	80033aa <main+0x323a>
					time_date_buffer[input_index] = '3';
 800335a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800335e:	3368      	adds	r3, #104	@ 0x68
 8003360:	443b      	add	r3, r7
 8003362:	2233      	movs	r2, #51	@ 0x33
 8003364:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003368:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800336c:	3301      	adds	r3, #1
 800336e:	3368      	adds	r3, #104	@ 0x68
 8003370:	443b      	add	r3, r7
 8003372:	2200      	movs	r2, #0
 8003374:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8003378:	4819      	ldr	r0, [pc, #100]	@ (80033e0 <main+0x3270>)
 800337a:	f004 fd6b 	bl	8007e54 <Str_Len>
 800337e:	4603      	mov	r3, r0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <main+0x3270>)
 800338a:	2101      	movs	r1, #1
 800338c:	480f      	ldr	r0, [pc, #60]	@ (80033cc <main+0x325c>)
 800338e:	f004 fcf4 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003392:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003396:	3301      	adds	r3, #1
 8003398:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800339c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80033a0:	461a      	mov	r2, r3
 80033a2:	2101      	movs	r1, #1
 80033a4:	4809      	ldr	r0, [pc, #36]	@ (80033cc <main+0x325c>)
 80033a6:	f004 fcac 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80033aa:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80033ae:	2301      	movs	r3, #1
 80033b0:	2101      	movs	r1, #1
 80033b2:	4806      	ldr	r0, [pc, #24]	@ (80033cc <main+0x325c>)
 80033b4:	f004 fd0b 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80033b8:	f004 feb2 	bl	8008120 <HAL_GetTick>
 80033bc:	4603      	mov	r3, r0
 80033be:	33fa      	adds	r3, #250	@ 0xfa
 80033c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c2:	e1d8      	b.n	8003776 <main+0x3606>
 80033c4:	20000000 	.word	0x20000000
 80033c8:	0800be68 	.word	0x0800be68
 80033cc:	2000001c 	.word	0x2000001c
 80033d0:	0800bd1c 	.word	0x0800bd1c
 80033d4:	0800be0c 	.word	0x0800be0c
 80033d8:	0800be10 	.word	0x0800be10
 80033dc:	0800be14 	.word	0x0800be14
 80033e0:	0800be18 	.word	0x0800be18

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80033e4:	2104      	movs	r1, #4
 80033e6:	48b8      	ldr	r0, [pc, #736]	@ (80036c8 <main+0x3558>)
 80033e8:	f004 fe2a 	bl	8008040 <Keypad_Get_Key>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d042      	beq.n	8003478 <main+0x3308>
					&& (current_tick >= general_delay)) {
 80033f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d33e      	bcc.n	8003478 <main+0x3308>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80033fa:	2300      	movs	r3, #0
 80033fc:	2200      	movs	r2, #0
 80033fe:	2101      	movs	r1, #1
 8003400:	48b2      	ldr	r0, [pc, #712]	@ (80036cc <main+0x355c>)
 8003402:	f004 fce4 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003406:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800340a:	2b01      	cmp	r3, #1
 800340c:	d827      	bhi.n	800345e <main+0x32ee>
					time_date_buffer[input_index] = '4';
 800340e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003412:	3368      	adds	r3, #104	@ 0x68
 8003414:	443b      	add	r3, r7
 8003416:	2234      	movs	r2, #52	@ 0x34
 8003418:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800341c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003420:	3301      	adds	r3, #1
 8003422:	3368      	adds	r3, #104	@ 0x68
 8003424:	443b      	add	r3, r7
 8003426:	2200      	movs	r2, #0
 8003428:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800342c:	48a8      	ldr	r0, [pc, #672]	@ (80036d0 <main+0x3560>)
 800342e:	f004 fd11 	bl	8007e54 <Str_Len>
 8003432:	4603      	mov	r3, r0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4ba4      	ldr	r3, [pc, #656]	@ (80036d0 <main+0x3560>)
 800343e:	2101      	movs	r1, #1
 8003440:	48a2      	ldr	r0, [pc, #648]	@ (80036cc <main+0x355c>)
 8003442:	f004 fc9a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003446:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800344a:	3301      	adds	r3, #1
 800344c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003450:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003454:	461a      	mov	r2, r3
 8003456:	2101      	movs	r1, #1
 8003458:	489c      	ldr	r0, [pc, #624]	@ (80036cc <main+0x355c>)
 800345a:	f004 fc52 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800345e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003462:	2301      	movs	r3, #1
 8003464:	2101      	movs	r1, #1
 8003466:	4899      	ldr	r0, [pc, #612]	@ (80036cc <main+0x355c>)
 8003468:	f004 fcb1 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800346c:	f004 fe58 	bl	8008120 <HAL_GetTick>
 8003470:	4603      	mov	r3, r0
 8003472:	33fa      	adds	r3, #250	@ 0xfa
 8003474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003476:	e17e      	b.n	8003776 <main+0x3606>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8003478:	2105      	movs	r1, #5
 800347a:	4893      	ldr	r0, [pc, #588]	@ (80036c8 <main+0x3558>)
 800347c:	f004 fde0 	bl	8008040 <Keypad_Get_Key>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d042      	beq.n	800350c <main+0x339c>
					&& (current_tick >= general_delay)) {
 8003486:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800348a:	429a      	cmp	r2, r3
 800348c:	d33e      	bcc.n	800350c <main+0x339c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800348e:	2300      	movs	r3, #0
 8003490:	2200      	movs	r2, #0
 8003492:	2101      	movs	r1, #1
 8003494:	488d      	ldr	r0, [pc, #564]	@ (80036cc <main+0x355c>)
 8003496:	f004 fc9a 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800349a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d827      	bhi.n	80034f2 <main+0x3382>
					time_date_buffer[input_index] = '5';
 80034a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034a6:	3368      	adds	r3, #104	@ 0x68
 80034a8:	443b      	add	r3, r7
 80034aa:	2235      	movs	r2, #53	@ 0x35
 80034ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80034b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034b4:	3301      	adds	r3, #1
 80034b6:	3368      	adds	r3, #104	@ 0x68
 80034b8:	443b      	add	r3, r7
 80034ba:	2200      	movs	r2, #0
 80034bc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80034c0:	4884      	ldr	r0, [pc, #528]	@ (80036d4 <main+0x3564>)
 80034c2:	f004 fcc7 	bl	8007e54 <Str_Len>
 80034c6:	4603      	mov	r3, r0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	4b80      	ldr	r3, [pc, #512]	@ (80036d4 <main+0x3564>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	487d      	ldr	r0, [pc, #500]	@ (80036cc <main+0x355c>)
 80034d6:	f004 fc50 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80034da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034de:	3301      	adds	r3, #1
 80034e0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80034e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80034e8:	461a      	mov	r2, r3
 80034ea:	2101      	movs	r1, #1
 80034ec:	4877      	ldr	r0, [pc, #476]	@ (80036cc <main+0x355c>)
 80034ee:	f004 fc08 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80034f2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80034f6:	2301      	movs	r3, #1
 80034f8:	2101      	movs	r1, #1
 80034fa:	4874      	ldr	r0, [pc, #464]	@ (80036cc <main+0x355c>)
 80034fc:	f004 fc67 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003500:	f004 fe0e 	bl	8008120 <HAL_GetTick>
 8003504:	4603      	mov	r3, r0
 8003506:	33fa      	adds	r3, #250	@ 0xfa
 8003508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800350a:	e134      	b.n	8003776 <main+0x3606>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 800350c:	2106      	movs	r1, #6
 800350e:	486e      	ldr	r0, [pc, #440]	@ (80036c8 <main+0x3558>)
 8003510:	f004 fd96 	bl	8008040 <Keypad_Get_Key>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d042      	beq.n	80035a0 <main+0x3430>
					&& (current_tick >= general_delay)) {
 800351a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800351c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800351e:	429a      	cmp	r2, r3
 8003520:	d33e      	bcc.n	80035a0 <main+0x3430>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003522:	2300      	movs	r3, #0
 8003524:	2200      	movs	r2, #0
 8003526:	2101      	movs	r1, #1
 8003528:	4868      	ldr	r0, [pc, #416]	@ (80036cc <main+0x355c>)
 800352a:	f004 fc50 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800352e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003532:	2b01      	cmp	r3, #1
 8003534:	d827      	bhi.n	8003586 <main+0x3416>
					time_date_buffer[input_index] = '6';
 8003536:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800353a:	3368      	adds	r3, #104	@ 0x68
 800353c:	443b      	add	r3, r7
 800353e:	2236      	movs	r2, #54	@ 0x36
 8003540:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003544:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003548:	3301      	adds	r3, #1
 800354a:	3368      	adds	r3, #104	@ 0x68
 800354c:	443b      	add	r3, r7
 800354e:	2200      	movs	r2, #0
 8003550:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8003554:	4860      	ldr	r0, [pc, #384]	@ (80036d8 <main+0x3568>)
 8003556:	f004 fc7d 	bl	8007e54 <Str_Len>
 800355a:	4603      	mov	r3, r0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4b5c      	ldr	r3, [pc, #368]	@ (80036d8 <main+0x3568>)
 8003566:	2101      	movs	r1, #1
 8003568:	4858      	ldr	r0, [pc, #352]	@ (80036cc <main+0x355c>)
 800356a:	f004 fc06 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800356e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003572:	3301      	adds	r3, #1
 8003574:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003578:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800357c:	461a      	mov	r2, r3
 800357e:	2101      	movs	r1, #1
 8003580:	4852      	ldr	r0, [pc, #328]	@ (80036cc <main+0x355c>)
 8003582:	f004 fbbe 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003586:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800358a:	2301      	movs	r3, #1
 800358c:	2101      	movs	r1, #1
 800358e:	484f      	ldr	r0, [pc, #316]	@ (80036cc <main+0x355c>)
 8003590:	f004 fc1d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003594:	f004 fdc4 	bl	8008120 <HAL_GetTick>
 8003598:	4603      	mov	r3, r0
 800359a:	33fa      	adds	r3, #250	@ 0xfa
 800359c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800359e:	e0ea      	b.n	8003776 <main+0x3606>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80035a0:	2108      	movs	r1, #8
 80035a2:	4849      	ldr	r0, [pc, #292]	@ (80036c8 <main+0x3558>)
 80035a4:	f004 fd4c 	bl	8008040 <Keypad_Get_Key>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d042      	beq.n	8003634 <main+0x34c4>
					&& (current_tick >= general_delay)) {
 80035ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d33e      	bcc.n	8003634 <main+0x34c4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80035b6:	2300      	movs	r3, #0
 80035b8:	2200      	movs	r2, #0
 80035ba:	2101      	movs	r1, #1
 80035bc:	4843      	ldr	r0, [pc, #268]	@ (80036cc <main+0x355c>)
 80035be:	f004 fc06 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80035c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d827      	bhi.n	800361a <main+0x34aa>
					time_date_buffer[input_index] = '7';
 80035ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80035ce:	3368      	adds	r3, #104	@ 0x68
 80035d0:	443b      	add	r3, r7
 80035d2:	2237      	movs	r2, #55	@ 0x37
 80035d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80035d8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80035dc:	3301      	adds	r3, #1
 80035de:	3368      	adds	r3, #104	@ 0x68
 80035e0:	443b      	add	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 80035e8:	483c      	ldr	r0, [pc, #240]	@ (80036dc <main+0x356c>)
 80035ea:	f004 fc33 	bl	8007e54 <Str_Len>
 80035ee:	4603      	mov	r3, r0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <main+0x356c>)
 80035fa:	2101      	movs	r1, #1
 80035fc:	4833      	ldr	r0, [pc, #204]	@ (80036cc <main+0x355c>)
 80035fe:	f004 fbbc 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003602:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003606:	3301      	adds	r3, #1
 8003608:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800360c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003610:	461a      	mov	r2, r3
 8003612:	2101      	movs	r1, #1
 8003614:	482d      	ldr	r0, [pc, #180]	@ (80036cc <main+0x355c>)
 8003616:	f004 fb74 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800361a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800361e:	2301      	movs	r3, #1
 8003620:	2101      	movs	r1, #1
 8003622:	482a      	ldr	r0, [pc, #168]	@ (80036cc <main+0x355c>)
 8003624:	f004 fbd3 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003628:	f004 fd7a 	bl	8008120 <HAL_GetTick>
 800362c:	4603      	mov	r3, r0
 800362e:	33fa      	adds	r3, #250	@ 0xfa
 8003630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003632:	e0a0      	b.n	8003776 <main+0x3606>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8003634:	2109      	movs	r1, #9
 8003636:	4824      	ldr	r0, [pc, #144]	@ (80036c8 <main+0x3558>)
 8003638:	f004 fd02 	bl	8008040 <Keypad_Get_Key>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d050      	beq.n	80036e4 <main+0x3574>
					&& (current_tick >= general_delay)) {
 8003642:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003646:	429a      	cmp	r2, r3
 8003648:	d34c      	bcc.n	80036e4 <main+0x3574>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800364a:	2300      	movs	r3, #0
 800364c:	2200      	movs	r2, #0
 800364e:	2101      	movs	r1, #1
 8003650:	481e      	ldr	r0, [pc, #120]	@ (80036cc <main+0x355c>)
 8003652:	f004 fbbc 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003656:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800365a:	2b01      	cmp	r3, #1
 800365c:	d827      	bhi.n	80036ae <main+0x353e>
					time_date_buffer[input_index] = '8';
 800365e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003662:	3368      	adds	r3, #104	@ 0x68
 8003664:	443b      	add	r3, r7
 8003666:	2238      	movs	r2, #56	@ 0x38
 8003668:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800366c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003670:	3301      	adds	r3, #1
 8003672:	3368      	adds	r3, #104	@ 0x68
 8003674:	443b      	add	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 800367c:	4818      	ldr	r0, [pc, #96]	@ (80036e0 <main+0x3570>)
 800367e:	f004 fbe9 	bl	8007e54 <Str_Len>
 8003682:	4603      	mov	r3, r0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <main+0x3570>)
 800368e:	2101      	movs	r1, #1
 8003690:	480e      	ldr	r0, [pc, #56]	@ (80036cc <main+0x355c>)
 8003692:	f004 fb72 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003696:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800369a:	3301      	adds	r3, #1
 800369c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80036a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80036a4:	461a      	mov	r2, r3
 80036a6:	2101      	movs	r1, #1
 80036a8:	4808      	ldr	r0, [pc, #32]	@ (80036cc <main+0x355c>)
 80036aa:	f004 fb2a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80036ae:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80036b2:	2301      	movs	r3, #1
 80036b4:	2101      	movs	r1, #1
 80036b6:	4805      	ldr	r0, [pc, #20]	@ (80036cc <main+0x355c>)
 80036b8:	f004 fb89 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80036bc:	f004 fd30 	bl	8008120 <HAL_GetTick>
 80036c0:	4603      	mov	r3, r0
 80036c2:	33fa      	adds	r3, #250	@ 0xfa
 80036c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036c6:	e056      	b.n	8003776 <main+0x3606>
 80036c8:	20000000 	.word	0x20000000
 80036cc:	2000001c 	.word	0x2000001c
 80036d0:	0800be1c 	.word	0x0800be1c
 80036d4:	0800be20 	.word	0x0800be20
 80036d8:	0800be24 	.word	0x0800be24
 80036dc:	0800be28 	.word	0x0800be28
 80036e0:	0800be2c 	.word	0x0800be2c

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 80036e4:	210a      	movs	r1, #10
 80036e6:	48a4      	ldr	r0, [pc, #656]	@ (8003978 <main+0x3808>)
 80036e8:	f004 fcaa 	bl	8008040 <Keypad_Get_Key>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d041      	beq.n	8003776 <main+0x3606>
					&& (current_tick >= general_delay)) {
 80036f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80036f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d33d      	bcc.n	8003776 <main+0x3606>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80036fa:	2300      	movs	r3, #0
 80036fc:	2200      	movs	r2, #0
 80036fe:	2101      	movs	r1, #1
 8003700:	489e      	ldr	r0, [pc, #632]	@ (800397c <main+0x380c>)
 8003702:	f004 fb64 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003706:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800370a:	2b01      	cmp	r3, #1
 800370c:	d827      	bhi.n	800375e <main+0x35ee>
					time_date_buffer[input_index] = '9';
 800370e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003712:	3368      	adds	r3, #104	@ 0x68
 8003714:	443b      	add	r3, r7
 8003716:	2239      	movs	r2, #57	@ 0x39
 8003718:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800371c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003720:	3301      	adds	r3, #1
 8003722:	3368      	adds	r3, #104	@ 0x68
 8003724:	443b      	add	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 800372c:	4894      	ldr	r0, [pc, #592]	@ (8003980 <main+0x3810>)
 800372e:	f004 fb91 	bl	8007e54 <Str_Len>
 8003732:	4603      	mov	r3, r0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4b90      	ldr	r3, [pc, #576]	@ (8003980 <main+0x3810>)
 800373e:	2101      	movs	r1, #1
 8003740:	488e      	ldr	r0, [pc, #568]	@ (800397c <main+0x380c>)
 8003742:	f004 fb1a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003746:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800374a:	3301      	adds	r3, #1
 800374c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003750:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003754:	461a      	mov	r2, r3
 8003756:	2101      	movs	r1, #1
 8003758:	4888      	ldr	r0, [pc, #544]	@ (800397c <main+0x380c>)
 800375a:	f004 fad2 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800375e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003762:	2301      	movs	r3, #1
 8003764:	2101      	movs	r1, #1
 8003766:	4885      	ldr	r0, [pc, #532]	@ (800397c <main+0x380c>)
 8003768:	f004 fb31 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800376c:	f004 fcd8 	bl	8008120 <HAL_GetTick>
 8003770:	4603      	mov	r3, r0
 8003772:	33fa      	adds	r3, #250	@ 0xfa
 8003774:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for day validation (state 36)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8003776:	210f      	movs	r1, #15
 8003778:	487f      	ldr	r0, [pc, #508]	@ (8003978 <main+0x3808>)
 800377a:	f004 fc61 	bl	8008040 <Keypad_Get_Key>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <main+0x3656>
					&& (current_tick >= general_delay)) {
 8003784:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003788:	429a      	cmp	r2, r3
 800378a:	d31c      	bcc.n	80037c6 <main+0x3656>

				Alcd_Clear(&lcd);
 800378c:	487b      	ldr	r0, [pc, #492]	@ (800397c <main+0x380c>)
 800378e:	f004 fb0d 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8003792:	887b      	ldrh	r3, [r7, #2]
 8003794:	f107 001c 	add.w	r0, r7, #28
 8003798:	4a7a      	ldr	r2, [pc, #488]	@ (8003984 <main+0x3814>)
 800379a:	2132      	movs	r1, #50	@ 0x32
 800379c:	f007 fdda 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fcdb 	bl	8000160 <strlen>
 80037aa:	4603      	mov	r3, r0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f107 021c 	add.w	r2, r7, #28
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	2200      	movs	r2, #0
 80037b8:	2101      	movs	r1, #1
 80037ba:	4870      	ldr	r0, [pc, #448]	@ (800397c <main+0x380c>)
 80037bc:	f004 fadd 	bl	8007d7a <Alcd_PutAt_n>

				status = 36;
 80037c0:	2324      	movs	r3, #36	@ 0x24
 80037c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 80037c6:	f004 fcab 	bl	8008120 <HAL_GetTick>
 80037ca:	4603      	mov	r3, r0
 80037cc:	33fa      	adds	r3, #250	@ 0xfa
 80037ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 26) && (current_tick >= general_delay)) {
 80037d0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80037d4:	2b1a      	cmp	r3, #26
 80037d6:	d17b      	bne.n	80038d0 <main+0x3760>
 80037d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037dc:	429a      	cmp	r2, r3
 80037de:	f4bf ac80 	bcs.w	80030e2 <main+0x2f72>
		}

//date validation phase
		while ((status == 36) && (current_tick >= general_delay)) {
 80037e2:	e075      	b.n	80038d0 <main+0x3760>

			//get the current tick number
			current_tick = HAL_GetTick();
 80037e4:	f004 fc9c 	bl	8008120 <HAL_GetTick>
 80037e8:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80037ea:	4864      	ldr	r0, [pc, #400]	@ (800397c <main+0x380c>)
 80037ec:	f004 fade 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 80037f0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80037f4:	f107 001c 	add.w	r0, r7, #28
 80037f8:	4a62      	ldr	r2, [pc, #392]	@ (8003984 <main+0x3814>)
 80037fa:	2132      	movs	r1, #50	@ 0x32
 80037fc:	f007 fdaa 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fcab 	bl	8000160 <strlen>
 800380a:	4603      	mov	r3, r0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f107 021c 	add.w	r2, r7, #28
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	220e      	movs	r2, #14
 8003818:	2100      	movs	r1, #0
 800381a:	4858      	ldr	r0, [pc, #352]	@ (800397c <main+0x380c>)
 800381c:	f004 faad 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f007 fd0d 	bl	800b242 <atoi>
 8003828:	4603      	mov	r3, r0
 800382a:	b29b      	uxth	r3, r3
 800382c:	807b      	strh	r3, [r7, #2]

			//check if day is within the range 1 to 31
			if (buffer > 0 && buffer < 32) {
 800382e:	887b      	ldrh	r3, [r7, #2]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01a      	beq.n	800386a <main+0x36fa>
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	2b1f      	cmp	r3, #31
 8003838:	d817      	bhi.n	800386a <main+0x36fa>

				//move to the month state
				status = 37;
 800383a:	2325      	movs	r3, #37	@ 0x25
 800383c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the day value
				CLK.date = buffer;
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	4b50      	ldr	r3, [pc, #320]	@ (8003988 <main+0x3818>)
 8003846:	731a      	strb	r2, [r3, #12]

				input_index = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800384e:	2300      	movs	r3, #0
 8003850:	2200      	movs	r2, #0
 8003852:	2101      	movs	r1, #1
 8003854:	4849      	ldr	r0, [pc, #292]	@ (800397c <main+0x380c>)
 8003856:	f004 faba 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800385a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800385e:	2301      	movs	r3, #1
 8003860:	2101      	movs	r1, #1
 8003862:	4846      	ldr	r0, [pc, #280]	@ (800397c <main+0x380c>)
 8003864:	f004 fab3 	bl	8007dce <Alcd_Display_Control>
 8003868:	e027      	b.n	80038ba <main+0x374a>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 800386a:	4848      	ldr	r0, [pc, #288]	@ (800398c <main+0x381c>)
 800386c:	f004 faf2 	bl	8007e54 <Str_Len>
 8003870:	4603      	mov	r3, r0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4b45      	ldr	r3, [pc, #276]	@ (800398c <main+0x381c>)
 8003878:	2200      	movs	r2, #0
 800387a:	2100      	movs	r1, #0
 800387c:	483f      	ldr	r0, [pc, #252]	@ (800397c <main+0x380c>)
 800387e:	f004 fa7c 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800388e:	2300      	movs	r3, #0
 8003890:	2200      	movs	r2, #0
 8003892:	2101      	movs	r1, #1
 8003894:	4839      	ldr	r0, [pc, #228]	@ (800397c <main+0x380c>)
 8003896:	f004 fa9a 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800389a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800389e:	2301      	movs	r3, #1
 80038a0:	2101      	movs	r1, #1
 80038a2:	4836      	ldr	r0, [pc, #216]	@ (800397c <main+0x380c>)
 80038a4:	f004 fa93 	bl	8007dce <Alcd_Display_Control>
				//return to entering day
				status = 26;
 80038a8:	231a      	movs	r3, #26
 80038aa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80038ae:	f004 fc37 	bl	8008120 <HAL_GetTick>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80038b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80038ba:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d106      	bne.n	80038d0 <main+0x3760>
 80038c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <main+0x3760>

				delay_flag = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 36) && (current_tick >= general_delay)) {
 80038d0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80038d4:	2b24      	cmp	r3, #36	@ 0x24
 80038d6:	f040 8387 	bne.w	8003fe8 <main+0x3e78>
 80038da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d280      	bcs.n	80037e4 <main+0x3674>
			}

		}

		//month edit menu -> enter month(state 37)
		while ((status == 37) && (current_tick >= general_delay)) {
 80038e2:	e381      	b.n	8003fe8 <main+0x3e78>

			//get the current tick number
			current_tick = HAL_GetTick();
 80038e4:	f004 fc1c 	bl	8008120 <HAL_GetTick>
 80038e8:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter month");
 80038ea:	4829      	ldr	r0, [pc, #164]	@ (8003990 <main+0x3820>)
 80038ec:	f004 fab2 	bl	8007e54 <Str_Len>
 80038f0:	4603      	mov	r3, r0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <main+0x3820>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	481f      	ldr	r0, [pc, #124]	@ (800397c <main+0x380c>)
 80038fe:	f004 fa3c 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8003902:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8003906:	f107 001c 	add.w	r0, r7, #28
 800390a:	4a1e      	ldr	r2, [pc, #120]	@ (8003984 <main+0x3814>)
 800390c:	2132      	movs	r1, #50	@ 0x32
 800390e:	f007 fd21 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fc22 	bl	8000160 <strlen>
 800391c:	4603      	mov	r3, r0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f107 021c 	add.w	r2, r7, #28
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	220e      	movs	r2, #14
 800392a:	2100      	movs	r1, #0
 800392c:	4813      	ldr	r0, [pc, #76]	@ (800397c <main+0x380c>)
 800392e:	f004 fa24 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8003932:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003936:	461a      	mov	r2, r3
 8003938:	2101      	movs	r1, #1
 800393a:	4810      	ldr	r0, [pc, #64]	@ (800397c <main+0x380c>)
 800393c:	f004 f9e1 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8003940:	2301      	movs	r3, #1
 8003942:	2201      	movs	r2, #1
 8003944:	2101      	movs	r1, #1
 8003946:	480d      	ldr	r0, [pc, #52]	@ (800397c <main+0x380c>)
 8003948:	f004 fa41 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800394c:	480a      	ldr	r0, [pc, #40]	@ (8003978 <main+0x3808>)
 800394e:	f004 fadb 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8003952:	210e      	movs	r1, #14
 8003954:	4808      	ldr	r0, [pc, #32]	@ (8003978 <main+0x3808>)
 8003956:	f004 fb73 	bl	8008040 <Keypad_Get_Key>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d019      	beq.n	8003994 <main+0x3824>
					&& (current_tick >= general_delay)) {
 8003960:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003964:	429a      	cmp	r2, r3
 8003966:	d315      	bcc.n	8003994 <main+0x3824>

				input_index = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

				//back to previous menu
				status = 26;
 800396e:	231a      	movs	r3, #26
 8003970:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8003974:	e30b      	b.n	8003f8e <main+0x3e1e>
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000
 800397c:	2000001c 	.word	0x2000001c
 8003980:	0800be30 	.word	0x0800be30
 8003984:	0800bd1c 	.word	0x0800bd1c
 8003988:	20000150 	.word	0x20000150
 800398c:	0800be34 	.word	0x0800be34
 8003990:	0800be74 	.word	0x0800be74

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8003994:	210d      	movs	r1, #13
 8003996:	48b8      	ldr	r0, [pc, #736]	@ (8003c78 <main+0x3b08>)
 8003998:	f004 fb52 	bl	8008040 <Keypad_Get_Key>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d042      	beq.n	8003a28 <main+0x38b8>
					&& (current_tick >= general_delay)) {
 80039a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d33e      	bcc.n	8003a28 <main+0x38b8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80039aa:	2300      	movs	r3, #0
 80039ac:	2200      	movs	r2, #0
 80039ae:	2101      	movs	r1, #1
 80039b0:	48b2      	ldr	r0, [pc, #712]	@ (8003c7c <main+0x3b0c>)
 80039b2:	f004 fa0c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80039b6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d827      	bhi.n	8003a0e <main+0x389e>
					time_date_buffer[input_index] = '0';
 80039be:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80039c2:	3368      	adds	r3, #104	@ 0x68
 80039c4:	443b      	add	r3, r7
 80039c6:	2230      	movs	r2, #48	@ 0x30
 80039c8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80039cc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80039d0:	3301      	adds	r3, #1
 80039d2:	3368      	adds	r3, #104	@ 0x68
 80039d4:	443b      	add	r3, r7
 80039d6:	2200      	movs	r2, #0
 80039d8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80039dc:	48a8      	ldr	r0, [pc, #672]	@ (8003c80 <main+0x3b10>)
 80039de:	f004 fa39 	bl	8007e54 <Str_Len>
 80039e2:	4603      	mov	r3, r0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4ba4      	ldr	r3, [pc, #656]	@ (8003c80 <main+0x3b10>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	48a2      	ldr	r0, [pc, #648]	@ (8003c7c <main+0x3b0c>)
 80039f2:	f004 f9c2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80039f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80039fa:	3301      	adds	r3, #1
 80039fc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003a00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a04:	461a      	mov	r2, r3
 8003a06:	2101      	movs	r1, #1
 8003a08:	489c      	ldr	r0, [pc, #624]	@ (8003c7c <main+0x3b0c>)
 8003a0a:	f004 f97a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003a0e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003a12:	2301      	movs	r3, #1
 8003a14:	2101      	movs	r1, #1
 8003a16:	4899      	ldr	r0, [pc, #612]	@ (8003c7c <main+0x3b0c>)
 8003a18:	f004 f9d9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003a1c:	f004 fb80 	bl	8008120 <HAL_GetTick>
 8003a20:	4603      	mov	r3, r0
 8003a22:	33fa      	adds	r3, #250	@ 0xfa
 8003a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a26:	e2b2      	b.n	8003f8e <main+0x3e1e>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4893      	ldr	r0, [pc, #588]	@ (8003c78 <main+0x3b08>)
 8003a2c:	f004 fb08 	bl	8008040 <Keypad_Get_Key>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d042      	beq.n	8003abc <main+0x394c>
					&& (current_tick >= general_delay)) {
 8003a36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d33e      	bcc.n	8003abc <main+0x394c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2200      	movs	r2, #0
 8003a42:	2101      	movs	r1, #1
 8003a44:	488d      	ldr	r0, [pc, #564]	@ (8003c7c <main+0x3b0c>)
 8003a46:	f004 f9c2 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003a4a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d827      	bhi.n	8003aa2 <main+0x3932>
					time_date_buffer[input_index] = '1';
 8003a52:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a56:	3368      	adds	r3, #104	@ 0x68
 8003a58:	443b      	add	r3, r7
 8003a5a:	2231      	movs	r2, #49	@ 0x31
 8003a5c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003a60:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a64:	3301      	adds	r3, #1
 8003a66:	3368      	adds	r3, #104	@ 0x68
 8003a68:	443b      	add	r3, r7
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8003a70:	4884      	ldr	r0, [pc, #528]	@ (8003c84 <main+0x3b14>)
 8003a72:	f004 f9ef 	bl	8007e54 <Str_Len>
 8003a76:	4603      	mov	r3, r0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4b80      	ldr	r3, [pc, #512]	@ (8003c84 <main+0x3b14>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	487d      	ldr	r0, [pc, #500]	@ (8003c7c <main+0x3b0c>)
 8003a86:	f004 f978 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003a8a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003a94:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4877      	ldr	r0, [pc, #476]	@ (8003c7c <main+0x3b0c>)
 8003a9e:	f004 f930 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003aa2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4874      	ldr	r0, [pc, #464]	@ (8003c7c <main+0x3b0c>)
 8003aac:	f004 f98f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003ab0:	f004 fb36 	bl	8008120 <HAL_GetTick>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	33fa      	adds	r3, #250	@ 0xfa
 8003ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aba:	e268      	b.n	8003f8e <main+0x3e1e>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8003abc:	2101      	movs	r1, #1
 8003abe:	486e      	ldr	r0, [pc, #440]	@ (8003c78 <main+0x3b08>)
 8003ac0:	f004 fabe 	bl	8008040 <Keypad_Get_Key>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d042      	beq.n	8003b50 <main+0x39e0>
					&& (current_tick >= general_delay)) {
 8003aca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d33e      	bcc.n	8003b50 <main+0x39e0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4868      	ldr	r0, [pc, #416]	@ (8003c7c <main+0x3b0c>)
 8003ada:	f004 f978 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003ade:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d827      	bhi.n	8003b36 <main+0x39c6>
					time_date_buffer[input_index] = '2';
 8003ae6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003aea:	3368      	adds	r3, #104	@ 0x68
 8003aec:	443b      	add	r3, r7
 8003aee:	2232      	movs	r2, #50	@ 0x32
 8003af0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003af4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003af8:	3301      	adds	r3, #1
 8003afa:	3368      	adds	r3, #104	@ 0x68
 8003afc:	443b      	add	r3, r7
 8003afe:	2200      	movs	r2, #0
 8003b00:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8003b04:	4860      	ldr	r0, [pc, #384]	@ (8003c88 <main+0x3b18>)
 8003b06:	f004 f9a5 	bl	8007e54 <Str_Len>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4b5c      	ldr	r3, [pc, #368]	@ (8003c88 <main+0x3b18>)
 8003b16:	2101      	movs	r1, #1
 8003b18:	4858      	ldr	r0, [pc, #352]	@ (8003c7c <main+0x3b0c>)
 8003b1a:	f004 f92e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003b1e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003b22:	3301      	adds	r3, #1
 8003b24:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003b28:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4852      	ldr	r0, [pc, #328]	@ (8003c7c <main+0x3b0c>)
 8003b32:	f004 f8e6 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003b36:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	484f      	ldr	r0, [pc, #316]	@ (8003c7c <main+0x3b0c>)
 8003b40:	f004 f945 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003b44:	f004 faec 	bl	8008120 <HAL_GetTick>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	33fa      	adds	r3, #250	@ 0xfa
 8003b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b4e:	e21e      	b.n	8003f8e <main+0x3e1e>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8003b50:	2102      	movs	r1, #2
 8003b52:	4849      	ldr	r0, [pc, #292]	@ (8003c78 <main+0x3b08>)
 8003b54:	f004 fa74 	bl	8008040 <Keypad_Get_Key>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d042      	beq.n	8003be4 <main+0x3a74>
					&& (current_tick >= general_delay)) {
 8003b5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d33e      	bcc.n	8003be4 <main+0x3a74>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003b66:	2300      	movs	r3, #0
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4843      	ldr	r0, [pc, #268]	@ (8003c7c <main+0x3b0c>)
 8003b6e:	f004 f92e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003b72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d827      	bhi.n	8003bca <main+0x3a5a>
					time_date_buffer[input_index] = '3';
 8003b7a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003b7e:	3368      	adds	r3, #104	@ 0x68
 8003b80:	443b      	add	r3, r7
 8003b82:	2233      	movs	r2, #51	@ 0x33
 8003b84:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003b88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	3368      	adds	r3, #104	@ 0x68
 8003b90:	443b      	add	r3, r7
 8003b92:	2200      	movs	r2, #0
 8003b94:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8003b98:	483c      	ldr	r0, [pc, #240]	@ (8003c8c <main+0x3b1c>)
 8003b9a:	f004 f95b 	bl	8007e54 <Str_Len>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4b38      	ldr	r3, [pc, #224]	@ (8003c8c <main+0x3b1c>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	4833      	ldr	r0, [pc, #204]	@ (8003c7c <main+0x3b0c>)
 8003bae:	f004 f8e4 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003bb2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003bbc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	482d      	ldr	r0, [pc, #180]	@ (8003c7c <main+0x3b0c>)
 8003bc6:	f004 f89c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003bca:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003bce:	2301      	movs	r3, #1
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	482a      	ldr	r0, [pc, #168]	@ (8003c7c <main+0x3b0c>)
 8003bd4:	f004 f8fb 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003bd8:	f004 faa2 	bl	8008120 <HAL_GetTick>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	33fa      	adds	r3, #250	@ 0xfa
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be2:	e1d4      	b.n	8003f8e <main+0x3e1e>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8003be4:	2104      	movs	r1, #4
 8003be6:	4824      	ldr	r0, [pc, #144]	@ (8003c78 <main+0x3b08>)
 8003be8:	f004 fa2a 	bl	8008040 <Keypad_Get_Key>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d050      	beq.n	8003c94 <main+0x3b24>
					&& (current_tick >= general_delay)) {
 8003bf2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d34c      	bcc.n	8003c94 <main+0x3b24>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2101      	movs	r1, #1
 8003c00:	481e      	ldr	r0, [pc, #120]	@ (8003c7c <main+0x3b0c>)
 8003c02:	f004 f8e4 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003c06:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d827      	bhi.n	8003c5e <main+0x3aee>
					time_date_buffer[input_index] = '4';
 8003c0e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003c12:	3368      	adds	r3, #104	@ 0x68
 8003c14:	443b      	add	r3, r7
 8003c16:	2234      	movs	r2, #52	@ 0x34
 8003c18:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003c1c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003c20:	3301      	adds	r3, #1
 8003c22:	3368      	adds	r3, #104	@ 0x68
 8003c24:	443b      	add	r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8003c2c:	4818      	ldr	r0, [pc, #96]	@ (8003c90 <main+0x3b20>)
 8003c2e:	f004 f911 	bl	8007e54 <Str_Len>
 8003c32:	4603      	mov	r3, r0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <main+0x3b20>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	480e      	ldr	r0, [pc, #56]	@ (8003c7c <main+0x3b0c>)
 8003c42:	f004 f89a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003c46:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003c50:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003c54:	461a      	mov	r2, r3
 8003c56:	2101      	movs	r1, #1
 8003c58:	4808      	ldr	r0, [pc, #32]	@ (8003c7c <main+0x3b0c>)
 8003c5a:	f004 f852 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003c5e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003c62:	2301      	movs	r3, #1
 8003c64:	2101      	movs	r1, #1
 8003c66:	4805      	ldr	r0, [pc, #20]	@ (8003c7c <main+0x3b0c>)
 8003c68:	f004 f8b1 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003c6c:	f004 fa58 	bl	8008120 <HAL_GetTick>
 8003c70:	4603      	mov	r3, r0
 8003c72:	33fa      	adds	r3, #250	@ 0xfa
 8003c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c76:	e18a      	b.n	8003f8e <main+0x3e1e>
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	2000001c 	.word	0x2000001c
 8003c80:	0800be0c 	.word	0x0800be0c
 8003c84:	0800be10 	.word	0x0800be10
 8003c88:	0800be14 	.word	0x0800be14
 8003c8c:	0800be18 	.word	0x0800be18
 8003c90:	0800be1c 	.word	0x0800be1c

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8003c94:	2105      	movs	r1, #5
 8003c96:	4893      	ldr	r0, [pc, #588]	@ (8003ee4 <main+0x3d74>)
 8003c98:	f004 f9d2 	bl	8008040 <Keypad_Get_Key>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d042      	beq.n	8003d28 <main+0x3bb8>
					&& (current_tick >= general_delay)) {
 8003ca2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d33e      	bcc.n	8003d28 <main+0x3bb8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003caa:	2300      	movs	r3, #0
 8003cac:	2200      	movs	r2, #0
 8003cae:	2101      	movs	r1, #1
 8003cb0:	488d      	ldr	r0, [pc, #564]	@ (8003ee8 <main+0x3d78>)
 8003cb2:	f004 f88c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003cb6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d827      	bhi.n	8003d0e <main+0x3b9e>
					time_date_buffer[input_index] = '5';
 8003cbe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003cc2:	3368      	adds	r3, #104	@ 0x68
 8003cc4:	443b      	add	r3, r7
 8003cc6:	2235      	movs	r2, #53	@ 0x35
 8003cc8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003ccc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	3368      	adds	r3, #104	@ 0x68
 8003cd4:	443b      	add	r3, r7
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8003cdc:	4883      	ldr	r0, [pc, #524]	@ (8003eec <main+0x3d7c>)
 8003cde:	f004 f8b9 	bl	8007e54 <Str_Len>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4b7f      	ldr	r3, [pc, #508]	@ (8003eec <main+0x3d7c>)
 8003cee:	2101      	movs	r1, #1
 8003cf0:	487d      	ldr	r0, [pc, #500]	@ (8003ee8 <main+0x3d78>)
 8003cf2:	f004 f842 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003cf6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003d00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d04:	461a      	mov	r2, r3
 8003d06:	2101      	movs	r1, #1
 8003d08:	4877      	ldr	r0, [pc, #476]	@ (8003ee8 <main+0x3d78>)
 8003d0a:	f003 fffa 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003d0e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003d12:	2301      	movs	r3, #1
 8003d14:	2101      	movs	r1, #1
 8003d16:	4874      	ldr	r0, [pc, #464]	@ (8003ee8 <main+0x3d78>)
 8003d18:	f004 f859 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003d1c:	f004 fa00 	bl	8008120 <HAL_GetTick>
 8003d20:	4603      	mov	r3, r0
 8003d22:	33fa      	adds	r3, #250	@ 0xfa
 8003d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d26:	e132      	b.n	8003f8e <main+0x3e1e>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8003d28:	2106      	movs	r1, #6
 8003d2a:	486e      	ldr	r0, [pc, #440]	@ (8003ee4 <main+0x3d74>)
 8003d2c:	f004 f988 	bl	8008040 <Keypad_Get_Key>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d042      	beq.n	8003dbc <main+0x3c4c>
					&& (current_tick >= general_delay)) {
 8003d36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d33e      	bcc.n	8003dbc <main+0x3c4c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2200      	movs	r2, #0
 8003d42:	2101      	movs	r1, #1
 8003d44:	4868      	ldr	r0, [pc, #416]	@ (8003ee8 <main+0x3d78>)
 8003d46:	f004 f842 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003d4a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d827      	bhi.n	8003da2 <main+0x3c32>
					time_date_buffer[input_index] = '6';
 8003d52:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d56:	3368      	adds	r3, #104	@ 0x68
 8003d58:	443b      	add	r3, r7
 8003d5a:	2236      	movs	r2, #54	@ 0x36
 8003d5c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003d60:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d64:	3301      	adds	r3, #1
 8003d66:	3368      	adds	r3, #104	@ 0x68
 8003d68:	443b      	add	r3, r7
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8003d70:	485f      	ldr	r0, [pc, #380]	@ (8003ef0 <main+0x3d80>)
 8003d72:	f004 f86f 	bl	8007e54 <Str_Len>
 8003d76:	4603      	mov	r3, r0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <main+0x3d80>)
 8003d82:	2101      	movs	r1, #1
 8003d84:	4858      	ldr	r0, [pc, #352]	@ (8003ee8 <main+0x3d78>)
 8003d86:	f003 fff8 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003d8a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003d94:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4852      	ldr	r0, [pc, #328]	@ (8003ee8 <main+0x3d78>)
 8003d9e:	f003 ffb0 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003da2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003da6:	2301      	movs	r3, #1
 8003da8:	2101      	movs	r1, #1
 8003daa:	484f      	ldr	r0, [pc, #316]	@ (8003ee8 <main+0x3d78>)
 8003dac:	f004 f80f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003db0:	f004 f9b6 	bl	8008120 <HAL_GetTick>
 8003db4:	4603      	mov	r3, r0
 8003db6:	33fa      	adds	r3, #250	@ 0xfa
 8003db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dba:	e0e8      	b.n	8003f8e <main+0x3e1e>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	4849      	ldr	r0, [pc, #292]	@ (8003ee4 <main+0x3d74>)
 8003dc0:	f004 f93e 	bl	8008040 <Keypad_Get_Key>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d042      	beq.n	8003e50 <main+0x3ce0>
					&& (current_tick >= general_delay)) {
 8003dca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d33e      	bcc.n	8003e50 <main+0x3ce0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4843      	ldr	r0, [pc, #268]	@ (8003ee8 <main+0x3d78>)
 8003dda:	f003 fff8 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003dde:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d827      	bhi.n	8003e36 <main+0x3cc6>
					time_date_buffer[input_index] = '7';
 8003de6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003dea:	3368      	adds	r3, #104	@ 0x68
 8003dec:	443b      	add	r3, r7
 8003dee:	2237      	movs	r2, #55	@ 0x37
 8003df0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003df4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003df8:	3301      	adds	r3, #1
 8003dfa:	3368      	adds	r3, #104	@ 0x68
 8003dfc:	443b      	add	r3, r7
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8003e04:	483b      	ldr	r0, [pc, #236]	@ (8003ef4 <main+0x3d84>)
 8003e06:	f004 f825 	bl	8007e54 <Str_Len>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <main+0x3d84>)
 8003e16:	2101      	movs	r1, #1
 8003e18:	4833      	ldr	r0, [pc, #204]	@ (8003ee8 <main+0x3d78>)
 8003e1a:	f003 ffae 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003e1e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003e22:	3301      	adds	r3, #1
 8003e24:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003e28:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2101      	movs	r1, #1
 8003e30:	482d      	ldr	r0, [pc, #180]	@ (8003ee8 <main+0x3d78>)
 8003e32:	f003 ff66 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003e36:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	482a      	ldr	r0, [pc, #168]	@ (8003ee8 <main+0x3d78>)
 8003e40:	f003 ffc5 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003e44:	f004 f96c 	bl	8008120 <HAL_GetTick>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	33fa      	adds	r3, #250	@ 0xfa
 8003e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e4e:	e09e      	b.n	8003f8e <main+0x3e1e>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8003e50:	2109      	movs	r1, #9
 8003e52:	4824      	ldr	r0, [pc, #144]	@ (8003ee4 <main+0x3d74>)
 8003e54:	f004 f8f4 	bl	8008040 <Keypad_Get_Key>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04e      	beq.n	8003efc <main+0x3d8c>
					&& (current_tick >= general_delay)) {
 8003e5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d34a      	bcc.n	8003efc <main+0x3d8c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003e66:	2300      	movs	r3, #0
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	481e      	ldr	r0, [pc, #120]	@ (8003ee8 <main+0x3d78>)
 8003e6e:	f003 ffae 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003e72:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d827      	bhi.n	8003eca <main+0x3d5a>
					time_date_buffer[input_index] = '8';
 8003e7a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003e7e:	3368      	adds	r3, #104	@ 0x68
 8003e80:	443b      	add	r3, r7
 8003e82:	2238      	movs	r2, #56	@ 0x38
 8003e84:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003e88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	3368      	adds	r3, #104	@ 0x68
 8003e90:	443b      	add	r3, r7
 8003e92:	2200      	movs	r2, #0
 8003e94:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8003e98:	4817      	ldr	r0, [pc, #92]	@ (8003ef8 <main+0x3d88>)
 8003e9a:	f003 ffdb 	bl	8007e54 <Str_Len>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <main+0x3d88>)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	480e      	ldr	r0, [pc, #56]	@ (8003ee8 <main+0x3d78>)
 8003eae:	f003 ff64 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003eb2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003ebc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4808      	ldr	r0, [pc, #32]	@ (8003ee8 <main+0x3d78>)
 8003ec6:	f003 ff1c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003eca:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4805      	ldr	r0, [pc, #20]	@ (8003ee8 <main+0x3d78>)
 8003ed4:	f003 ff7b 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003ed8:	f004 f922 	bl	8008120 <HAL_GetTick>
 8003edc:	4603      	mov	r3, r0
 8003ede:	33fa      	adds	r3, #250	@ 0xfa
 8003ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ee2:	e054      	b.n	8003f8e <main+0x3e1e>
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	2000001c 	.word	0x2000001c
 8003eec:	0800be20 	.word	0x0800be20
 8003ef0:	0800be24 	.word	0x0800be24
 8003ef4:	0800be28 	.word	0x0800be28
 8003ef8:	0800be2c 	.word	0x0800be2c

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8003efc:	210a      	movs	r1, #10
 8003efe:	48a4      	ldr	r0, [pc, #656]	@ (8004190 <main+0x4020>)
 8003f00:	f004 f89e 	bl	8008040 <Keypad_Get_Key>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d041      	beq.n	8003f8e <main+0x3e1e>
					&& (current_tick >= general_delay)) {
 8003f0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d33d      	bcc.n	8003f8e <main+0x3e1e>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8003f12:	2300      	movs	r3, #0
 8003f14:	2200      	movs	r2, #0
 8003f16:	2101      	movs	r1, #1
 8003f18:	489e      	ldr	r0, [pc, #632]	@ (8004194 <main+0x4024>)
 8003f1a:	f003 ff58 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8003f1e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d827      	bhi.n	8003f76 <main+0x3e06>
					time_date_buffer[input_index] = '9';
 8003f26:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f2a:	3368      	adds	r3, #104	@ 0x68
 8003f2c:	443b      	add	r3, r7
 8003f2e:	2239      	movs	r2, #57	@ 0x39
 8003f30:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8003f34:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f38:	3301      	adds	r3, #1
 8003f3a:	3368      	adds	r3, #104	@ 0x68
 8003f3c:	443b      	add	r3, r7
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8003f44:	4894      	ldr	r0, [pc, #592]	@ (8004198 <main+0x4028>)
 8003f46:	f003 ff85 	bl	8007e54 <Str_Len>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	4b90      	ldr	r3, [pc, #576]	@ (8004198 <main+0x4028>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	488e      	ldr	r0, [pc, #568]	@ (8004194 <main+0x4024>)
 8003f5a:	f003 ff0e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8003f5e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f62:	3301      	adds	r3, #1
 8003f64:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8003f68:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4888      	ldr	r0, [pc, #544]	@ (8004194 <main+0x4024>)
 8003f72:	f003 fec6 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8003f76:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4885      	ldr	r0, [pc, #532]	@ (8004194 <main+0x4024>)
 8003f80:	f003 ff25 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8003f84:	f004 f8cc 	bl	8008120 <HAL_GetTick>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	33fa      	adds	r3, #250	@ 0xfa
 8003f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for month validation (state 38)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8003f8e:	210f      	movs	r1, #15
 8003f90:	487f      	ldr	r0, [pc, #508]	@ (8004190 <main+0x4020>)
 8003f92:	f004 f855 	bl	8008040 <Keypad_Get_Key>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <main+0x3e6e>
					&& (current_tick >= general_delay)) {
 8003f9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d31c      	bcc.n	8003fde <main+0x3e6e>

				Alcd_Clear(&lcd);
 8003fa4:	487b      	ldr	r0, [pc, #492]	@ (8004194 <main+0x4024>)
 8003fa6:	f003 ff01 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	f107 001c 	add.w	r0, r7, #28
 8003fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800419c <main+0x402c>)
 8003fb2:	2132      	movs	r1, #50	@ 0x32
 8003fb4:	f007 f9ce 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8003fb8:	f107 031c 	add.w	r3, r7, #28
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc f8cf 	bl	8000160 <strlen>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f107 021c 	add.w	r2, r7, #28
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4870      	ldr	r0, [pc, #448]	@ (8004194 <main+0x4024>)
 8003fd4:	f003 fed1 	bl	8007d7a <Alcd_PutAt_n>

				status = 38;
 8003fd8:	2326      	movs	r3, #38	@ 0x26
 8003fda:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8003fde:	f004 f89f 	bl	8008120 <HAL_GetTick>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	33fa      	adds	r3, #250	@ 0xfa
 8003fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 37) && (current_tick >= general_delay)) {
 8003fe8:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8003fec:	2b25      	cmp	r3, #37	@ 0x25
 8003fee:	d17b      	bne.n	80040e8 <main+0x3f78>
 8003ff0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	f4bf ac75 	bcs.w	80038e4 <main+0x3774>
		}

//month validation phase
		while ((status == 38) && (current_tick >= general_delay)) {
 8003ffa:	e075      	b.n	80040e8 <main+0x3f78>

			//get the current tick number
			current_tick = HAL_GetTick();
 8003ffc:	f004 f890 	bl	8008120 <HAL_GetTick>
 8004000:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8004002:	4864      	ldr	r0, [pc, #400]	@ (8004194 <main+0x4024>)
 8004004:	f003 fed2 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004008:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800400c:	f107 001c 	add.w	r0, r7, #28
 8004010:	4a62      	ldr	r2, [pc, #392]	@ (800419c <main+0x402c>)
 8004012:	2132      	movs	r1, #50	@ 0x32
 8004014:	f007 f99e 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004018:	f107 031c 	add.w	r3, r7, #28
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc f89f 	bl	8000160 <strlen>
 8004022:	4603      	mov	r3, r0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f107 021c 	add.w	r2, r7, #28
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	220e      	movs	r2, #14
 8004030:	2100      	movs	r1, #0
 8004032:	4858      	ldr	r0, [pc, #352]	@ (8004194 <main+0x4024>)
 8004034:	f003 fea1 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f007 f901 	bl	800b242 <atoi>
 8004040:	4603      	mov	r3, r0
 8004042:	b29b      	uxth	r3, r3
 8004044:	807b      	strh	r3, [r7, #2]

			//check if month is within the range 1 to 12
			if (buffer > 0 && buffer < 13) {
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01a      	beq.n	8004082 <main+0x3f12>
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d817      	bhi.n	8004082 <main+0x3f12>

				//move to the month state
				status = 39;
 8004052:	2327      	movs	r3, #39	@ 0x27
 8004054:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the month value
				CLK.month = buffer;
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	4b50      	ldr	r3, [pc, #320]	@ (80041a0 <main+0x4030>)
 800405e:	735a      	strb	r2, [r3, #13]

				input_index = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004066:	2300      	movs	r3, #0
 8004068:	2200      	movs	r2, #0
 800406a:	2101      	movs	r1, #1
 800406c:	4849      	ldr	r0, [pc, #292]	@ (8004194 <main+0x4024>)
 800406e:	f003 feae 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004072:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004076:	2301      	movs	r3, #1
 8004078:	2101      	movs	r1, #1
 800407a:	4846      	ldr	r0, [pc, #280]	@ (8004194 <main+0x4024>)
 800407c:	f003 fea7 	bl	8007dce <Alcd_Display_Control>
 8004080:	e027      	b.n	80040d2 <main+0x3f62>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8004082:	4848      	ldr	r0, [pc, #288]	@ (80041a4 <main+0x4034>)
 8004084:	f003 fee6 	bl	8007e54 <Str_Len>
 8004088:	4603      	mov	r3, r0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4b45      	ldr	r3, [pc, #276]	@ (80041a4 <main+0x4034>)
 8004090:	2200      	movs	r2, #0
 8004092:	2100      	movs	r1, #0
 8004094:	483f      	ldr	r0, [pc, #252]	@ (8004194 <main+0x4024>)
 8004096:	f003 fe70 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80040a6:	2300      	movs	r3, #0
 80040a8:	2200      	movs	r2, #0
 80040aa:	2101      	movs	r1, #1
 80040ac:	4839      	ldr	r0, [pc, #228]	@ (8004194 <main+0x4024>)
 80040ae:	f003 fe8e 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80040b2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80040b6:	2301      	movs	r3, #1
 80040b8:	2101      	movs	r1, #1
 80040ba:	4836      	ldr	r0, [pc, #216]	@ (8004194 <main+0x4024>)
 80040bc:	f003 fe87 	bl	8007dce <Alcd_Display_Control>
				//return to entering month
				status = 37;
 80040c0:	2325      	movs	r3, #37	@ 0x25
 80040c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80040c6:	f004 f82b 	bl	8008120 <HAL_GetTick>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80040d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80040d2:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d106      	bne.n	80040e8 <main+0x3f78>
 80040da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <main+0x3f78>

				delay_flag = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 38) && (current_tick >= general_delay)) {
 80040e8:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80040ec:	2b26      	cmp	r3, #38	@ 0x26
 80040ee:	f040 8387 	bne.w	8004800 <main+0x4690>
 80040f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d280      	bcs.n	8003ffc <main+0x3e8c>
			}

		}

		//year edit menu -> enter month(state 39)
		while ((status == 39) && (current_tick >= general_delay)) {
 80040fa:	e381      	b.n	8004800 <main+0x4690>

			//get the current tick number
			current_tick = HAL_GetTick();
 80040fc:	f004 f810 	bl	8008120 <HAL_GetTick>
 8004100:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter year");
 8004102:	4829      	ldr	r0, [pc, #164]	@ (80041a8 <main+0x4038>)
 8004104:	f003 fea6 	bl	8007e54 <Str_Len>
 8004108:	4603      	mov	r3, r0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4b26      	ldr	r3, [pc, #152]	@ (80041a8 <main+0x4038>)
 8004110:	2200      	movs	r2, #0
 8004112:	2100      	movs	r1, #0
 8004114:	481f      	ldr	r0, [pc, #124]	@ (8004194 <main+0x4024>)
 8004116:	f003 fe30 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800411a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800411e:	f107 001c 	add.w	r0, r7, #28
 8004122:	4a1e      	ldr	r2, [pc, #120]	@ (800419c <main+0x402c>)
 8004124:	2132      	movs	r1, #50	@ 0x32
 8004126:	f007 f915 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800412a:	f107 031c 	add.w	r3, r7, #28
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc f816 	bl	8000160 <strlen>
 8004134:	4603      	mov	r3, r0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f107 021c 	add.w	r2, r7, #28
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	220e      	movs	r2, #14
 8004142:	2100      	movs	r1, #0
 8004144:	4813      	ldr	r0, [pc, #76]	@ (8004194 <main+0x4024>)
 8004146:	f003 fe18 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 800414a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800414e:	461a      	mov	r2, r3
 8004150:	2101      	movs	r1, #1
 8004152:	4810      	ldr	r0, [pc, #64]	@ (8004194 <main+0x4024>)
 8004154:	f003 fdd5 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8004158:	2301      	movs	r3, #1
 800415a:	2201      	movs	r2, #1
 800415c:	2101      	movs	r1, #1
 800415e:	480d      	ldr	r0, [pc, #52]	@ (8004194 <main+0x4024>)
 8004160:	f003 fe35 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004164:	480a      	ldr	r0, [pc, #40]	@ (8004190 <main+0x4020>)
 8004166:	f003 fecf 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 800416a:	210e      	movs	r1, #14
 800416c:	4808      	ldr	r0, [pc, #32]	@ (8004190 <main+0x4020>)
 800416e:	f003 ff67 	bl	8008040 <Keypad_Get_Key>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <main+0x403c>
					&& (current_tick >= general_delay)) {
 8004178:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800417a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800417c:	429a      	cmp	r2, r3
 800417e:	d315      	bcc.n	80041ac <main+0x403c>

				input_index = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

				//back to previous menu
				status = 37;
 8004186:	2325      	movs	r3, #37	@ 0x25
 8004188:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800418c:	e30b      	b.n	80047a6 <main+0x4636>
 800418e:	bf00      	nop
 8004190:	20000000 	.word	0x20000000
 8004194:	2000001c 	.word	0x2000001c
 8004198:	0800be30 	.word	0x0800be30
 800419c:	0800bd1c 	.word	0x0800bd1c
 80041a0:	20000150 	.word	0x20000150
 80041a4:	0800be34 	.word	0x0800be34
 80041a8:	0800be80 	.word	0x0800be80

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80041ac:	210d      	movs	r1, #13
 80041ae:	48b8      	ldr	r0, [pc, #736]	@ (8004490 <main+0x4320>)
 80041b0:	f003 ff46 	bl	8008040 <Keypad_Get_Key>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d042      	beq.n	8004240 <main+0x40d0>
					&& (current_tick >= general_delay)) {
 80041ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d33e      	bcc.n	8004240 <main+0x40d0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80041c2:	2300      	movs	r3, #0
 80041c4:	2200      	movs	r2, #0
 80041c6:	2101      	movs	r1, #1
 80041c8:	48b2      	ldr	r0, [pc, #712]	@ (8004494 <main+0x4324>)
 80041ca:	f003 fe00 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80041ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d827      	bhi.n	8004226 <main+0x40b6>
					time_date_buffer[input_index] = '0';
 80041d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80041da:	3368      	adds	r3, #104	@ 0x68
 80041dc:	443b      	add	r3, r7
 80041de:	2230      	movs	r2, #48	@ 0x30
 80041e0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80041e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80041e8:	3301      	adds	r3, #1
 80041ea:	3368      	adds	r3, #104	@ 0x68
 80041ec:	443b      	add	r3, r7
 80041ee:	2200      	movs	r2, #0
 80041f0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80041f4:	48a8      	ldr	r0, [pc, #672]	@ (8004498 <main+0x4328>)
 80041f6:	f003 fe2d 	bl	8007e54 <Str_Len>
 80041fa:	4603      	mov	r3, r0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	4ba4      	ldr	r3, [pc, #656]	@ (8004498 <main+0x4328>)
 8004206:	2101      	movs	r1, #1
 8004208:	48a2      	ldr	r0, [pc, #648]	@ (8004494 <main+0x4324>)
 800420a:	f003 fdb6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800420e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004212:	3301      	adds	r3, #1
 8004214:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004218:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800421c:	461a      	mov	r2, r3
 800421e:	2101      	movs	r1, #1
 8004220:	489c      	ldr	r0, [pc, #624]	@ (8004494 <main+0x4324>)
 8004222:	f003 fd6e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004226:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800422a:	2301      	movs	r3, #1
 800422c:	2101      	movs	r1, #1
 800422e:	4899      	ldr	r0, [pc, #612]	@ (8004494 <main+0x4324>)
 8004230:	f003 fdcd 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004234:	f003 ff74 	bl	8008120 <HAL_GetTick>
 8004238:	4603      	mov	r3, r0
 800423a:	33fa      	adds	r3, #250	@ 0xfa
 800423c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800423e:	e2b2      	b.n	80047a6 <main+0x4636>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8004240:	2100      	movs	r1, #0
 8004242:	4893      	ldr	r0, [pc, #588]	@ (8004490 <main+0x4320>)
 8004244:	f003 fefc 	bl	8008040 <Keypad_Get_Key>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d042      	beq.n	80042d4 <main+0x4164>
					&& (current_tick >= general_delay)) {
 800424e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004252:	429a      	cmp	r2, r3
 8004254:	d33e      	bcc.n	80042d4 <main+0x4164>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004256:	2300      	movs	r3, #0
 8004258:	2200      	movs	r2, #0
 800425a:	2101      	movs	r1, #1
 800425c:	488d      	ldr	r0, [pc, #564]	@ (8004494 <main+0x4324>)
 800425e:	f003 fdb6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 8004262:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004266:	2b03      	cmp	r3, #3
 8004268:	d827      	bhi.n	80042ba <main+0x414a>
					time_date_buffer[input_index] = '1';
 800426a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800426e:	3368      	adds	r3, #104	@ 0x68
 8004270:	443b      	add	r3, r7
 8004272:	2231      	movs	r2, #49	@ 0x31
 8004274:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004278:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800427c:	3301      	adds	r3, #1
 800427e:	3368      	adds	r3, #104	@ 0x68
 8004280:	443b      	add	r3, r7
 8004282:	2200      	movs	r2, #0
 8004284:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8004288:	4884      	ldr	r0, [pc, #528]	@ (800449c <main+0x432c>)
 800428a:	f003 fde3 	bl	8007e54 <Str_Len>
 800428e:	4603      	mov	r3, r0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4b80      	ldr	r3, [pc, #512]	@ (800449c <main+0x432c>)
 800429a:	2101      	movs	r1, #1
 800429c:	487d      	ldr	r0, [pc, #500]	@ (8004494 <main+0x4324>)
 800429e:	f003 fd6c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80042a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80042a6:	3301      	adds	r3, #1
 80042a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80042ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80042b0:	461a      	mov	r2, r3
 80042b2:	2101      	movs	r1, #1
 80042b4:	4877      	ldr	r0, [pc, #476]	@ (8004494 <main+0x4324>)
 80042b6:	f003 fd24 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80042ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80042be:	2301      	movs	r3, #1
 80042c0:	2101      	movs	r1, #1
 80042c2:	4874      	ldr	r0, [pc, #464]	@ (8004494 <main+0x4324>)
 80042c4:	f003 fd83 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80042c8:	f003 ff2a 	bl	8008120 <HAL_GetTick>
 80042cc:	4603      	mov	r3, r0
 80042ce:	33fa      	adds	r3, #250	@ 0xfa
 80042d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d2:	e268      	b.n	80047a6 <main+0x4636>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80042d4:	2101      	movs	r1, #1
 80042d6:	486e      	ldr	r0, [pc, #440]	@ (8004490 <main+0x4320>)
 80042d8:	f003 feb2 	bl	8008040 <Keypad_Get_Key>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d042      	beq.n	8004368 <main+0x41f8>
					&& (current_tick >= general_delay)) {
 80042e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d33e      	bcc.n	8004368 <main+0x41f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80042ea:	2300      	movs	r3, #0
 80042ec:	2200      	movs	r2, #0
 80042ee:	2101      	movs	r1, #1
 80042f0:	4868      	ldr	r0, [pc, #416]	@ (8004494 <main+0x4324>)
 80042f2:	f003 fd6c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80042f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d827      	bhi.n	800434e <main+0x41de>
					time_date_buffer[input_index] = '2';
 80042fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004302:	3368      	adds	r3, #104	@ 0x68
 8004304:	443b      	add	r3, r7
 8004306:	2232      	movs	r2, #50	@ 0x32
 8004308:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800430c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004310:	3301      	adds	r3, #1
 8004312:	3368      	adds	r3, #104	@ 0x68
 8004314:	443b      	add	r3, r7
 8004316:	2200      	movs	r2, #0
 8004318:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 800431c:	4860      	ldr	r0, [pc, #384]	@ (80044a0 <main+0x4330>)
 800431e:	f003 fd99 	bl	8007e54 <Str_Len>
 8004322:	4603      	mov	r3, r0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4b5c      	ldr	r3, [pc, #368]	@ (80044a0 <main+0x4330>)
 800432e:	2101      	movs	r1, #1
 8004330:	4858      	ldr	r0, [pc, #352]	@ (8004494 <main+0x4324>)
 8004332:	f003 fd22 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004336:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800433a:	3301      	adds	r3, #1
 800433c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004340:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004344:	461a      	mov	r2, r3
 8004346:	2101      	movs	r1, #1
 8004348:	4852      	ldr	r0, [pc, #328]	@ (8004494 <main+0x4324>)
 800434a:	f003 fcda 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800434e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	484f      	ldr	r0, [pc, #316]	@ (8004494 <main+0x4324>)
 8004358:	f003 fd39 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800435c:	f003 fee0 	bl	8008120 <HAL_GetTick>
 8004360:	4603      	mov	r3, r0
 8004362:	33fa      	adds	r3, #250	@ 0xfa
 8004364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004366:	e21e      	b.n	80047a6 <main+0x4636>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8004368:	2102      	movs	r1, #2
 800436a:	4849      	ldr	r0, [pc, #292]	@ (8004490 <main+0x4320>)
 800436c:	f003 fe68 	bl	8008040 <Keypad_Get_Key>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d042      	beq.n	80043fc <main+0x428c>
					&& (current_tick >= general_delay)) {
 8004376:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800437a:	429a      	cmp	r2, r3
 800437c:	d33e      	bcc.n	80043fc <main+0x428c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800437e:	2300      	movs	r3, #0
 8004380:	2200      	movs	r2, #0
 8004382:	2101      	movs	r1, #1
 8004384:	4843      	ldr	r0, [pc, #268]	@ (8004494 <main+0x4324>)
 8004386:	f003 fd22 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800438a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800438e:	2b03      	cmp	r3, #3
 8004390:	d827      	bhi.n	80043e2 <main+0x4272>
					time_date_buffer[input_index] = '3';
 8004392:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004396:	3368      	adds	r3, #104	@ 0x68
 8004398:	443b      	add	r3, r7
 800439a:	2233      	movs	r2, #51	@ 0x33
 800439c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80043a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80043a4:	3301      	adds	r3, #1
 80043a6:	3368      	adds	r3, #104	@ 0x68
 80043a8:	443b      	add	r3, r7
 80043aa:	2200      	movs	r2, #0
 80043ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80043b0:	483c      	ldr	r0, [pc, #240]	@ (80044a4 <main+0x4334>)
 80043b2:	f003 fd4f 	bl	8007e54 <Str_Len>
 80043b6:	4603      	mov	r3, r0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4b38      	ldr	r3, [pc, #224]	@ (80044a4 <main+0x4334>)
 80043c2:	2101      	movs	r1, #1
 80043c4:	4833      	ldr	r0, [pc, #204]	@ (8004494 <main+0x4324>)
 80043c6:	f003 fcd8 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80043ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80043ce:	3301      	adds	r3, #1
 80043d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80043d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80043d8:	461a      	mov	r2, r3
 80043da:	2101      	movs	r1, #1
 80043dc:	482d      	ldr	r0, [pc, #180]	@ (8004494 <main+0x4324>)
 80043de:	f003 fc90 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80043e2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80043e6:	2301      	movs	r3, #1
 80043e8:	2101      	movs	r1, #1
 80043ea:	482a      	ldr	r0, [pc, #168]	@ (8004494 <main+0x4324>)
 80043ec:	f003 fcef 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80043f0:	f003 fe96 	bl	8008120 <HAL_GetTick>
 80043f4:	4603      	mov	r3, r0
 80043f6:	33fa      	adds	r3, #250	@ 0xfa
 80043f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043fa:	e1d4      	b.n	80047a6 <main+0x4636>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80043fc:	2104      	movs	r1, #4
 80043fe:	4824      	ldr	r0, [pc, #144]	@ (8004490 <main+0x4320>)
 8004400:	f003 fe1e 	bl	8008040 <Keypad_Get_Key>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d050      	beq.n	80044ac <main+0x433c>
					&& (current_tick >= general_delay)) {
 800440a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800440c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800440e:	429a      	cmp	r2, r3
 8004410:	d34c      	bcc.n	80044ac <main+0x433c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004412:	2300      	movs	r3, #0
 8004414:	2200      	movs	r2, #0
 8004416:	2101      	movs	r1, #1
 8004418:	481e      	ldr	r0, [pc, #120]	@ (8004494 <main+0x4324>)
 800441a:	f003 fcd8 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800441e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004422:	2b03      	cmp	r3, #3
 8004424:	d827      	bhi.n	8004476 <main+0x4306>
					time_date_buffer[input_index] = '4';
 8004426:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800442a:	3368      	adds	r3, #104	@ 0x68
 800442c:	443b      	add	r3, r7
 800442e:	2234      	movs	r2, #52	@ 0x34
 8004430:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004434:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004438:	3301      	adds	r3, #1
 800443a:	3368      	adds	r3, #104	@ 0x68
 800443c:	443b      	add	r3, r7
 800443e:	2200      	movs	r2, #0
 8004440:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8004444:	4818      	ldr	r0, [pc, #96]	@ (80044a8 <main+0x4338>)
 8004446:	f003 fd05 	bl	8007e54 <Str_Len>
 800444a:	4603      	mov	r3, r0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <main+0x4338>)
 8004456:	2101      	movs	r1, #1
 8004458:	480e      	ldr	r0, [pc, #56]	@ (8004494 <main+0x4324>)
 800445a:	f003 fc8e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800445e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004462:	3301      	adds	r3, #1
 8004464:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004468:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800446c:	461a      	mov	r2, r3
 800446e:	2101      	movs	r1, #1
 8004470:	4808      	ldr	r0, [pc, #32]	@ (8004494 <main+0x4324>)
 8004472:	f003 fc46 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004476:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800447a:	2301      	movs	r3, #1
 800447c:	2101      	movs	r1, #1
 800447e:	4805      	ldr	r0, [pc, #20]	@ (8004494 <main+0x4324>)
 8004480:	f003 fca5 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004484:	f003 fe4c 	bl	8008120 <HAL_GetTick>
 8004488:	4603      	mov	r3, r0
 800448a:	33fa      	adds	r3, #250	@ 0xfa
 800448c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800448e:	e18a      	b.n	80047a6 <main+0x4636>
 8004490:	20000000 	.word	0x20000000
 8004494:	2000001c 	.word	0x2000001c
 8004498:	0800be0c 	.word	0x0800be0c
 800449c:	0800be10 	.word	0x0800be10
 80044a0:	0800be14 	.word	0x0800be14
 80044a4:	0800be18 	.word	0x0800be18
 80044a8:	0800be1c 	.word	0x0800be1c

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80044ac:	2105      	movs	r1, #5
 80044ae:	4893      	ldr	r0, [pc, #588]	@ (80046fc <main+0x458c>)
 80044b0:	f003 fdc6 	bl	8008040 <Keypad_Get_Key>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d042      	beq.n	8004540 <main+0x43d0>
					&& (current_tick >= general_delay)) {
 80044ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044be:	429a      	cmp	r2, r3
 80044c0:	d33e      	bcc.n	8004540 <main+0x43d0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80044c2:	2300      	movs	r3, #0
 80044c4:	2200      	movs	r2, #0
 80044c6:	2101      	movs	r1, #1
 80044c8:	488d      	ldr	r0, [pc, #564]	@ (8004700 <main+0x4590>)
 80044ca:	f003 fc80 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80044ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d827      	bhi.n	8004526 <main+0x43b6>
					time_date_buffer[input_index] = '5';
 80044d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80044da:	3368      	adds	r3, #104	@ 0x68
 80044dc:	443b      	add	r3, r7
 80044de:	2235      	movs	r2, #53	@ 0x35
 80044e0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80044e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80044e8:	3301      	adds	r3, #1
 80044ea:	3368      	adds	r3, #104	@ 0x68
 80044ec:	443b      	add	r3, r7
 80044ee:	2200      	movs	r2, #0
 80044f0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80044f4:	4883      	ldr	r0, [pc, #524]	@ (8004704 <main+0x4594>)
 80044f6:	f003 fcad 	bl	8007e54 <Str_Len>
 80044fa:	4603      	mov	r3, r0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4b7f      	ldr	r3, [pc, #508]	@ (8004704 <main+0x4594>)
 8004506:	2101      	movs	r1, #1
 8004508:	487d      	ldr	r0, [pc, #500]	@ (8004700 <main+0x4590>)
 800450a:	f003 fc36 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800450e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004512:	3301      	adds	r3, #1
 8004514:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004518:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800451c:	461a      	mov	r2, r3
 800451e:	2101      	movs	r1, #1
 8004520:	4877      	ldr	r0, [pc, #476]	@ (8004700 <main+0x4590>)
 8004522:	f003 fbee 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004526:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800452a:	2301      	movs	r3, #1
 800452c:	2101      	movs	r1, #1
 800452e:	4874      	ldr	r0, [pc, #464]	@ (8004700 <main+0x4590>)
 8004530:	f003 fc4d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004534:	f003 fdf4 	bl	8008120 <HAL_GetTick>
 8004538:	4603      	mov	r3, r0
 800453a:	33fa      	adds	r3, #250	@ 0xfa
 800453c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800453e:	e132      	b.n	80047a6 <main+0x4636>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8004540:	2106      	movs	r1, #6
 8004542:	486e      	ldr	r0, [pc, #440]	@ (80046fc <main+0x458c>)
 8004544:	f003 fd7c 	bl	8008040 <Keypad_Get_Key>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d042      	beq.n	80045d4 <main+0x4464>
					&& (current_tick >= general_delay)) {
 800454e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004552:	429a      	cmp	r2, r3
 8004554:	d33e      	bcc.n	80045d4 <main+0x4464>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004556:	2300      	movs	r3, #0
 8004558:	2200      	movs	r2, #0
 800455a:	2101      	movs	r1, #1
 800455c:	4868      	ldr	r0, [pc, #416]	@ (8004700 <main+0x4590>)
 800455e:	f003 fc36 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 8004562:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004566:	2b03      	cmp	r3, #3
 8004568:	d827      	bhi.n	80045ba <main+0x444a>
					time_date_buffer[input_index] = '6';
 800456a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800456e:	3368      	adds	r3, #104	@ 0x68
 8004570:	443b      	add	r3, r7
 8004572:	2236      	movs	r2, #54	@ 0x36
 8004574:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8004578:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800457c:	3301      	adds	r3, #1
 800457e:	3368      	adds	r3, #104	@ 0x68
 8004580:	443b      	add	r3, r7
 8004582:	2200      	movs	r2, #0
 8004584:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8004588:	485f      	ldr	r0, [pc, #380]	@ (8004708 <main+0x4598>)
 800458a:	f003 fc63 	bl	8007e54 <Str_Len>
 800458e:	4603      	mov	r3, r0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4b5b      	ldr	r3, [pc, #364]	@ (8004708 <main+0x4598>)
 800459a:	2101      	movs	r1, #1
 800459c:	4858      	ldr	r0, [pc, #352]	@ (8004700 <main+0x4590>)
 800459e:	f003 fbec 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80045a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80045a6:	3301      	adds	r3, #1
 80045a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80045ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80045b0:	461a      	mov	r2, r3
 80045b2:	2101      	movs	r1, #1
 80045b4:	4852      	ldr	r0, [pc, #328]	@ (8004700 <main+0x4590>)
 80045b6:	f003 fba4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80045ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80045be:	2301      	movs	r3, #1
 80045c0:	2101      	movs	r1, #1
 80045c2:	484f      	ldr	r0, [pc, #316]	@ (8004700 <main+0x4590>)
 80045c4:	f003 fc03 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80045c8:	f003 fdaa 	bl	8008120 <HAL_GetTick>
 80045cc:	4603      	mov	r3, r0
 80045ce:	33fa      	adds	r3, #250	@ 0xfa
 80045d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d2:	e0e8      	b.n	80047a6 <main+0x4636>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80045d4:	2108      	movs	r1, #8
 80045d6:	4849      	ldr	r0, [pc, #292]	@ (80046fc <main+0x458c>)
 80045d8:	f003 fd32 	bl	8008040 <Keypad_Get_Key>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d042      	beq.n	8004668 <main+0x44f8>
					&& (current_tick >= general_delay)) {
 80045e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d33e      	bcc.n	8004668 <main+0x44f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80045ea:	2300      	movs	r3, #0
 80045ec:	2200      	movs	r2, #0
 80045ee:	2101      	movs	r1, #1
 80045f0:	4843      	ldr	r0, [pc, #268]	@ (8004700 <main+0x4590>)
 80045f2:	f003 fbec 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 80045f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d827      	bhi.n	800464e <main+0x44de>
					time_date_buffer[input_index] = '7';
 80045fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004602:	3368      	adds	r3, #104	@ 0x68
 8004604:	443b      	add	r3, r7
 8004606:	2237      	movs	r2, #55	@ 0x37
 8004608:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800460c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004610:	3301      	adds	r3, #1
 8004612:	3368      	adds	r3, #104	@ 0x68
 8004614:	443b      	add	r3, r7
 8004616:	2200      	movs	r2, #0
 8004618:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 800461c:	483b      	ldr	r0, [pc, #236]	@ (800470c <main+0x459c>)
 800461e:	f003 fc19 	bl	8007e54 <Str_Len>
 8004622:	4603      	mov	r3, r0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4b37      	ldr	r3, [pc, #220]	@ (800470c <main+0x459c>)
 800462e:	2101      	movs	r1, #1
 8004630:	4833      	ldr	r0, [pc, #204]	@ (8004700 <main+0x4590>)
 8004632:	f003 fba2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004636:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800463a:	3301      	adds	r3, #1
 800463c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004640:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004644:	461a      	mov	r2, r3
 8004646:	2101      	movs	r1, #1
 8004648:	482d      	ldr	r0, [pc, #180]	@ (8004700 <main+0x4590>)
 800464a:	f003 fb5a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800464e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004652:	2301      	movs	r3, #1
 8004654:	2101      	movs	r1, #1
 8004656:	482a      	ldr	r0, [pc, #168]	@ (8004700 <main+0x4590>)
 8004658:	f003 fbb9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800465c:	f003 fd60 	bl	8008120 <HAL_GetTick>
 8004660:	4603      	mov	r3, r0
 8004662:	33fa      	adds	r3, #250	@ 0xfa
 8004664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004666:	e09e      	b.n	80047a6 <main+0x4636>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8004668:	2109      	movs	r1, #9
 800466a:	4824      	ldr	r0, [pc, #144]	@ (80046fc <main+0x458c>)
 800466c:	f003 fce8 	bl	8008040 <Keypad_Get_Key>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d04e      	beq.n	8004714 <main+0x45a4>
					&& (current_tick >= general_delay)) {
 8004676:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800467a:	429a      	cmp	r2, r3
 800467c:	d34a      	bcc.n	8004714 <main+0x45a4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800467e:	2300      	movs	r3, #0
 8004680:	2200      	movs	r2, #0
 8004682:	2101      	movs	r1, #1
 8004684:	481e      	ldr	r0, [pc, #120]	@ (8004700 <main+0x4590>)
 8004686:	f003 fba2 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 800468a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800468e:	2b03      	cmp	r3, #3
 8004690:	d827      	bhi.n	80046e2 <main+0x4572>
					time_date_buffer[input_index] = '8';
 8004692:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004696:	3368      	adds	r3, #104	@ 0x68
 8004698:	443b      	add	r3, r7
 800469a:	2238      	movs	r2, #56	@ 0x38
 800469c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80046a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80046a4:	3301      	adds	r3, #1
 80046a6:	3368      	adds	r3, #104	@ 0x68
 80046a8:	443b      	add	r3, r7
 80046aa:	2200      	movs	r2, #0
 80046ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80046b0:	4817      	ldr	r0, [pc, #92]	@ (8004710 <main+0x45a0>)
 80046b2:	f003 fbcf 	bl	8007e54 <Str_Len>
 80046b6:	4603      	mov	r3, r0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <main+0x45a0>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	480e      	ldr	r0, [pc, #56]	@ (8004700 <main+0x4590>)
 80046c6:	f003 fb58 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80046ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80046ce:	3301      	adds	r3, #1
 80046d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80046d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80046d8:	461a      	mov	r2, r3
 80046da:	2101      	movs	r1, #1
 80046dc:	4808      	ldr	r0, [pc, #32]	@ (8004700 <main+0x4590>)
 80046de:	f003 fb10 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80046e2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80046e6:	2301      	movs	r3, #1
 80046e8:	2101      	movs	r1, #1
 80046ea:	4805      	ldr	r0, [pc, #20]	@ (8004700 <main+0x4590>)
 80046ec:	f003 fb6f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80046f0:	f003 fd16 	bl	8008120 <HAL_GetTick>
 80046f4:	4603      	mov	r3, r0
 80046f6:	33fa      	adds	r3, #250	@ 0xfa
 80046f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046fa:	e054      	b.n	80047a6 <main+0x4636>
 80046fc:	20000000 	.word	0x20000000
 8004700:	2000001c 	.word	0x2000001c
 8004704:	0800be20 	.word	0x0800be20
 8004708:	0800be24 	.word	0x0800be24
 800470c:	0800be28 	.word	0x0800be28
 8004710:	0800be2c 	.word	0x0800be2c

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8004714:	210a      	movs	r1, #10
 8004716:	48ae      	ldr	r0, [pc, #696]	@ (80049d0 <main+0x4860>)
 8004718:	f003 fc92 	bl	8008040 <Keypad_Get_Key>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d041      	beq.n	80047a6 <main+0x4636>
					&& (current_tick >= general_delay)) {
 8004722:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004726:	429a      	cmp	r2, r3
 8004728:	d33d      	bcc.n	80047a6 <main+0x4636>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800472a:	2300      	movs	r3, #0
 800472c:	2200      	movs	r2, #0
 800472e:	2101      	movs	r1, #1
 8004730:	48a8      	ldr	r0, [pc, #672]	@ (80049d4 <main+0x4864>)
 8004732:	f003 fb4c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 4) {
 8004736:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800473a:	2b03      	cmp	r3, #3
 800473c:	d827      	bhi.n	800478e <main+0x461e>
					time_date_buffer[input_index] = '9';
 800473e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004742:	3368      	adds	r3, #104	@ 0x68
 8004744:	443b      	add	r3, r7
 8004746:	2239      	movs	r2, #57	@ 0x39
 8004748:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800474c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004750:	3301      	adds	r3, #1
 8004752:	3368      	adds	r3, #104	@ 0x68
 8004754:	443b      	add	r3, r7
 8004756:	2200      	movs	r2, #0
 8004758:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 800475c:	489e      	ldr	r0, [pc, #632]	@ (80049d8 <main+0x4868>)
 800475e:	f003 fb79 	bl	8007e54 <Str_Len>
 8004762:	4603      	mov	r3, r0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4b9a      	ldr	r3, [pc, #616]	@ (80049d8 <main+0x4868>)
 800476e:	2101      	movs	r1, #1
 8004770:	4898      	ldr	r0, [pc, #608]	@ (80049d4 <main+0x4864>)
 8004772:	f003 fb02 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004776:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800477a:	3301      	adds	r3, #1
 800477c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004780:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004784:	461a      	mov	r2, r3
 8004786:	2101      	movs	r1, #1
 8004788:	4892      	ldr	r0, [pc, #584]	@ (80049d4 <main+0x4864>)
 800478a:	f003 faba 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800478e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004792:	2301      	movs	r3, #1
 8004794:	2101      	movs	r1, #1
 8004796:	488f      	ldr	r0, [pc, #572]	@ (80049d4 <main+0x4864>)
 8004798:	f003 fb19 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800479c:	f003 fcc0 	bl	8008120 <HAL_GetTick>
 80047a0:	4603      	mov	r3, r0
 80047a2:	33fa      	adds	r3, #250	@ 0xfa
 80047a4:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for year validation (state 40)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80047a6:	210f      	movs	r1, #15
 80047a8:	4889      	ldr	r0, [pc, #548]	@ (80049d0 <main+0x4860>)
 80047aa:	f003 fc49 	bl	8008040 <Keypad_Get_Key>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <main+0x4686>
					&& (current_tick >= general_delay)) {
 80047b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d31c      	bcc.n	80047f6 <main+0x4686>

				Alcd_Clear(&lcd);
 80047bc:	4885      	ldr	r0, [pc, #532]	@ (80049d4 <main+0x4864>)
 80047be:	f003 faf5 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	f107 001c 	add.w	r0, r7, #28
 80047c8:	4a84      	ldr	r2, [pc, #528]	@ (80049dc <main+0x486c>)
 80047ca:	2132      	movs	r1, #50	@ 0x32
 80047cc:	f006 fdc2 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80047d0:	f107 031c 	add.w	r3, r7, #28
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fb fcc3 	bl	8000160 <strlen>
 80047da:	4603      	mov	r3, r0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f107 021c 	add.w	r2, r7, #28
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	2101      	movs	r1, #1
 80047ea:	487a      	ldr	r0, [pc, #488]	@ (80049d4 <main+0x4864>)
 80047ec:	f003 fac5 	bl	8007d7a <Alcd_PutAt_n>

				status = 40;
 80047f0:	2328      	movs	r3, #40	@ 0x28
 80047f2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 80047f6:	f003 fc93 	bl	8008120 <HAL_GetTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	33fa      	adds	r3, #250	@ 0xfa
 80047fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 39) && (current_tick >= general_delay)) {
 8004800:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004804:	2b27      	cmp	r3, #39	@ 0x27
 8004806:	d17d      	bne.n	8004904 <main+0x4794>
 8004808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800480a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800480c:	429a      	cmp	r2, r3
 800480e:	f4bf ac75 	bcs.w	80040fc <main+0x3f8c>
		}

//year validation phase
		while ((status == 40) && (current_tick >= general_delay)) {
 8004812:	e077      	b.n	8004904 <main+0x4794>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004814:	f003 fc84 	bl	8008120 <HAL_GetTick>
 8004818:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 800481a:	486e      	ldr	r0, [pc, #440]	@ (80049d4 <main+0x4864>)
 800481c:	f003 fac6 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004820:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004824:	f107 001c 	add.w	r0, r7, #28
 8004828:	4a6c      	ldr	r2, [pc, #432]	@ (80049dc <main+0x486c>)
 800482a:	2132      	movs	r1, #50	@ 0x32
 800482c:	f006 fd92 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004830:	f107 031c 	add.w	r3, r7, #28
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fc93 	bl	8000160 <strlen>
 800483a:	4603      	mov	r3, r0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f107 021c 	add.w	r2, r7, #28
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	220e      	movs	r2, #14
 8004848:	2100      	movs	r1, #0
 800484a:	4862      	ldr	r0, [pc, #392]	@ (80049d4 <main+0x4864>)
 800484c:	f003 fa95 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8004850:	1d3b      	adds	r3, r7, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f006 fcf5 	bl	800b242 <atoi>
 8004858:	4603      	mov	r3, r0
 800485a:	b29b      	uxth	r3, r3
 800485c:	807b      	strh	r3, [r7, #2]

			//check if year is within the range 2024 to 2099
			if (buffer > 2023 && buffer < 2100) {
 800485e:	887b      	ldrh	r3, [r7, #2]
 8004860:	f5b3 6ffd 	cmp.w	r3, #2024	@ 0x7e8
 8004864:	d31b      	bcc.n	800489e <main+0x472e>
 8004866:	887b      	ldrh	r3, [r7, #2]
 8004868:	f640 0233 	movw	r2, #2099	@ 0x833
 800486c:	4293      	cmp	r3, r2
 800486e:	d816      	bhi.n	800489e <main+0x472e>

				//move to confirm save state
				status = 41;
 8004870:	2329      	movs	r3, #41	@ 0x29
 8004872:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the year value
				CLK.year = buffer;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	4b59      	ldr	r3, [pc, #356]	@ (80049e0 <main+0x4870>)
 800487a:	81da      	strh	r2, [r3, #14]

				input_index = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004882:	2300      	movs	r3, #0
 8004884:	2200      	movs	r2, #0
 8004886:	2101      	movs	r1, #1
 8004888:	4852      	ldr	r0, [pc, #328]	@ (80049d4 <main+0x4864>)
 800488a:	f003 faa0 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800488e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004892:	2301      	movs	r3, #1
 8004894:	2101      	movs	r1, #1
 8004896:	484f      	ldr	r0, [pc, #316]	@ (80049d4 <main+0x4864>)
 8004898:	f003 fa99 	bl	8007dce <Alcd_Display_Control>
 800489c:	e027      	b.n	80048ee <main+0x477e>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 800489e:	4851      	ldr	r0, [pc, #324]	@ (80049e4 <main+0x4874>)
 80048a0:	f003 fad8 	bl	8007e54 <Str_Len>
 80048a4:	4603      	mov	r3, r0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4b4e      	ldr	r3, [pc, #312]	@ (80049e4 <main+0x4874>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	2100      	movs	r1, #0
 80048b0:	4848      	ldr	r0, [pc, #288]	@ (80049d4 <main+0x4864>)
 80048b2:	f003 fa62 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80048c2:	2300      	movs	r3, #0
 80048c4:	2200      	movs	r2, #0
 80048c6:	2101      	movs	r1, #1
 80048c8:	4842      	ldr	r0, [pc, #264]	@ (80049d4 <main+0x4864>)
 80048ca:	f003 fa80 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80048ce:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80048d2:	2301      	movs	r3, #1
 80048d4:	2101      	movs	r1, #1
 80048d6:	483f      	ldr	r0, [pc, #252]	@ (80049d4 <main+0x4864>)
 80048d8:	f003 fa79 	bl	8007dce <Alcd_Display_Control>
				//return to entering year
				status = 39;
 80048dc:	2327      	movs	r3, #39	@ 0x27
 80048de:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80048e2:	f003 fc1d 	bl	8008120 <HAL_GetTick>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80048ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80048ee:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d106      	bne.n	8004904 <main+0x4794>
 80048f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <main+0x4794>

				delay_flag = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 40) && (current_tick >= general_delay)) {
 8004904:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004908:	2b28      	cmp	r3, #40	@ 0x28
 800490a:	d157      	bne.n	80049bc <main+0x484c>
 800490c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800490e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004910:	429a      	cmp	r2, r3
 8004912:	f4bf af7f 	bcs.w	8004814 <main+0x46a4>
			}

		}

//date confirmation menu (state 41)
		while ((status == 41) && (current_tick >= general_delay)) {
 8004916:	e051      	b.n	80049bc <main+0x484c>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004918:	f003 fc02 	bl	8008120 <HAL_GetTick>
 800491c:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 800491e:	482d      	ldr	r0, [pc, #180]	@ (80049d4 <main+0x4864>)
 8004920:	f003 fa44 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "confirm?");
 8004924:	4830      	ldr	r0, [pc, #192]	@ (80049e8 <main+0x4878>)
 8004926:	f003 fa95 	bl	8007e54 <Str_Len>
 800492a:	4603      	mov	r3, r0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4b2d      	ldr	r3, [pc, #180]	@ (80049e8 <main+0x4878>)
 8004932:	2200      	movs	r2, #0
 8004934:	2100      	movs	r1, #0
 8004936:	4827      	ldr	r0, [pc, #156]	@ (80049d4 <main+0x4864>)
 8004938:	f003 fa1f 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800493c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004940:	f107 001c 	add.w	r0, r7, #28
 8004944:	4a25      	ldr	r2, [pc, #148]	@ (80049dc <main+0x486c>)
 8004946:	2132      	movs	r1, #50	@ 0x32
 8004948:	f006 fd04 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800494c:	f107 031c 	add.w	r3, r7, #28
 8004950:	4618      	mov	r0, r3
 8004952:	f7fb fc05 	bl	8000160 <strlen>
 8004956:	4603      	mov	r3, r0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f107 021c 	add.w	r2, r7, #28
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	220e      	movs	r2, #14
 8004964:	2100      	movs	r1, #0
 8004966:	481b      	ldr	r0, [pc, #108]	@ (80049d4 <main+0x4864>)
 8004968:	f003 fa07 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800496c:	4818      	ldr	r0, [pc, #96]	@ (80049d0 <main+0x4860>)
 800496e:	f003 facb 	bl	8007f08 <Keypad_Refresh>

			//yes is selected
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8004972:	210f      	movs	r1, #15
 8004974:	4816      	ldr	r0, [pc, #88]	@ (80049d0 <main+0x4860>)
 8004976:	f003 fb63 	bl	8008040 <Keypad_Get_Key>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <main+0x4826>
					&& (current_tick >= general_delay)) {
 8004980:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004984:	429a      	cmp	r2, r3
 8004986:	d306      	bcc.n	8004996 <main+0x4826>

				Ds1307_set(&CLK);
 8004988:	4815      	ldr	r0, [pc, #84]	@ (80049e0 <main+0x4870>)
 800498a:	f002 ff26 	bl	80077da <Ds1307_set>

				//return to edit menu
				status = 21;
 800498e:	2315      	movs	r3, #21
 8004990:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004994:	e00d      	b.n	80049b2 <main+0x4842>

			}

			//back is selected -> back to enter year state
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004996:	210e      	movs	r1, #14
 8004998:	480d      	ldr	r0, [pc, #52]	@ (80049d0 <main+0x4860>)
 800499a:	f003 fb51 	bl	8008040 <Keypad_Get_Key>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <main+0x4842>
					&& (current_tick >= general_delay)) {
 80049a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <main+0x4842>

				status = 39;
 80049ac:	2327      	movs	r3, #39	@ 0x27
 80049ae:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 80049b2:	f003 fbb5 	bl	8008120 <HAL_GetTick>
 80049b6:	4603      	mov	r3, r0
 80049b8:	33fa      	adds	r3, #250	@ 0xfa
 80049ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 41) && (current_tick >= general_delay)) {
 80049bc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80049c0:	2b29      	cmp	r3, #41	@ 0x29
 80049c2:	f040 8097 	bne.w	8004af4 <main+0x4984>
 80049c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d2a4      	bcs.n	8004918 <main+0x47a8>
		}

//status 24 -> calibrate dosing
		while ((status == 24) && (current_tick >= general_delay)) {
 80049ce:	e091      	b.n	8004af4 <main+0x4984>
 80049d0:	20000000 	.word	0x20000000
 80049d4:	2000001c 	.word	0x2000001c
 80049d8:	0800be30 	.word	0x0800be30
 80049dc:	0800bd1c 	.word	0x0800bd1c
 80049e0:	20000150 	.word	0x20000150
 80049e4:	0800be34 	.word	0x0800be34
 80049e8:	0800be5c 	.word	0x0800be5c

			//get the current tick number
			current_tick = HAL_GetTick();
 80049ec:	f003 fb98 	bl	8008120 <HAL_GetTick>
 80049f0:	6638      	str	r0, [r7, #96]	@ 0x60

			//moving the motor to the 0 position
			TIM1->CCR1 = 999;
 80049f2:	4ba8      	ldr	r3, [pc, #672]	@ (8004c94 <main+0x4b24>)
 80049f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34

			Alcd_Clear(&lcd);
 80049fa:	48a7      	ldr	r0, [pc, #668]	@ (8004c98 <main+0x4b28>)
 80049fc:	f003 f9d6 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "hold feeding");
 8004a00:	48a6      	ldr	r0, [pc, #664]	@ (8004c9c <main+0x4b2c>)
 8004a02:	f003 fa27 	bl	8007e54 <Str_Len>
 8004a06:	4603      	mov	r3, r0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4ba3      	ldr	r3, [pc, #652]	@ (8004c9c <main+0x4b2c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	48a1      	ldr	r0, [pc, #644]	@ (8004c98 <main+0x4b28>)
 8004a14:	f003 f9b1 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "till finishing");
 8004a18:	48a1      	ldr	r0, [pc, #644]	@ (8004ca0 <main+0x4b30>)
 8004a1a:	f003 fa1b 	bl	8007e54 <Str_Len>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4b9e      	ldr	r3, [pc, #632]	@ (8004ca0 <main+0x4b30>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	2101      	movs	r1, #1
 8004a2a:	489b      	ldr	r0, [pc, #620]	@ (8004c98 <main+0x4b28>)
 8004a2c:	f003 f9a5 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004a30:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004a34:	f107 001c 	add.w	r0, r7, #28
 8004a38:	4a9a      	ldr	r2, [pc, #616]	@ (8004ca4 <main+0x4b34>)
 8004a3a:	2132      	movs	r1, #50	@ 0x32
 8004a3c:	f006 fc8a 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fb8b 	bl	8000160 <strlen>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f107 021c 	add.w	r2, r7, #28
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	220e      	movs	r2, #14
 8004a58:	2100      	movs	r1, #0
 8004a5a:	488f      	ldr	r0, [pc, #572]	@ (8004c98 <main+0x4b28>)
 8004a5c:	f003 f98d 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004a60:	4891      	ldr	r0, [pc, #580]	@ (8004ca8 <main+0x4b38>)
 8004a62:	f003 fa51 	bl	8007f08 <Keypad_Refresh>

			//in case feeding is selected -> start moving the motor
			if (Keypad_Get_Key(&kp, kp_button_force_feed)
 8004a66:	210b      	movs	r1, #11
 8004a68:	488f      	ldr	r0, [pc, #572]	@ (8004ca8 <main+0x4b38>)
 8004a6a:	f003 fae9 	bl	8008040 <Keypad_Get_Key>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01d      	beq.n	8004ab0 <main+0x4940>
					&& (current_tick >= general_delay)) {
 8004a74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d319      	bcc.n	8004ab0 <main+0x4940>
				Alcd_Clear(&lcd);
 8004a7c:	4886      	ldr	r0, [pc, #536]	@ (8004c98 <main+0x4b28>)
 8004a7e:	f003 f995 	bl	8007dac <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "calibrating");
 8004a82:	488a      	ldr	r0, [pc, #552]	@ (8004cac <main+0x4b3c>)
 8004a84:	f003 f9e6 	bl	8007e54 <Str_Len>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4b87      	ldr	r3, [pc, #540]	@ (8004cac <main+0x4b3c>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	2100      	movs	r1, #0
 8004a94:	4880      	ldr	r0, [pc, #512]	@ (8004c98 <main+0x4b28>)
 8004a96:	f003 f970 	bl	8007d7a <Alcd_PutAt_n>

				dosing_tick = dosing_tick + HAL_GetTick();
 8004a9a:	f003 fb41 	bl	8008120 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aa2:	4413      	add	r3, r2
 8004aa4:	653b      	str	r3, [r7, #80]	@ 0x50

				//moving the motor to the 180 position
				TIM1->CCR1 = 1999;
 8004aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8004c94 <main+0x4b24>)
 8004aa8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8004aac:	635a      	str	r2, [r3, #52]	@ 0x34
 8004aae:	e01c      	b.n	8004aea <main+0x497a>

			}

			//yes is selected
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 8004ab0:	210f      	movs	r1, #15
 8004ab2:	487d      	ldr	r0, [pc, #500]	@ (8004ca8 <main+0x4b38>)
 8004ab4:	f003 fac4 	bl	8008040 <Keypad_Get_Key>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <main+0x495e>
					&& (current_tick >= general_delay)) {
 8004abe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d303      	bcc.n	8004ace <main+0x495e>

				status = 42;
 8004ac6:	232a      	movs	r3, #42	@ 0x2a
 8004ac8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004acc:	e00d      	b.n	8004aea <main+0x497a>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004ace:	210e      	movs	r1, #14
 8004ad0:	4875      	ldr	r0, [pc, #468]	@ (8004ca8 <main+0x4b38>)
 8004ad2:	f003 fab5 	bl	8008040 <Keypad_Get_Key>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d006      	beq.n	8004aea <main+0x497a>
					&& (current_tick >= general_delay)) {
 8004adc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <main+0x497a>

				status = 21;
 8004ae4:	2315      	movs	r3, #21
 8004ae6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8004aea:	f003 fb19 	bl	8008120 <HAL_GetTick>
 8004aee:	4603      	mov	r3, r0
 8004af0:	33fa      	adds	r3, #250	@ 0xfa
 8004af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 24) && (current_tick >= general_delay)) {
 8004af4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004af8:	2b18      	cmp	r3, #24
 8004afa:	d151      	bne.n	8004ba0 <main+0x4a30>
 8004afc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	f4bf af73 	bcs.w	80049ec <main+0x487c>
		}

		//status 42 -> calibrate saving
		while ((status == 42) && (current_tick >= general_delay)) {
 8004b06:	e04b      	b.n	8004ba0 <main+0x4a30>

			// Update current_tick to the current time
			current_tick = HAL_GetTick();
 8004b08:	f003 fb0a 	bl	8008120 <HAL_GetTick>
 8004b0c:	6638      	str	r0, [r7, #96]	@ 0x60
			Alcd_Clear(&lcd);
 8004b0e:	4862      	ldr	r0, [pc, #392]	@ (8004c98 <main+0x4b28>)
 8004b10:	f003 f94c 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "saved");
 8004b14:	4866      	ldr	r0, [pc, #408]	@ (8004cb0 <main+0x4b40>)
 8004b16:	f003 f99d 	bl	8007e54 <Str_Len>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4b63      	ldr	r3, [pc, #396]	@ (8004cb0 <main+0x4b40>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	2100      	movs	r1, #0
 8004b26:	485c      	ldr	r0, [pc, #368]	@ (8004c98 <main+0x4b28>)
 8004b28:	f003 f927 	bl	8007d7a <Alcd_PutAt_n>

			// Check if the current tick has passed the general delay time
			if (current_tick >= general_delay) {
 8004b2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d335      	bcc.n	8004ba0 <main+0x4a30>
				Alcd_Clear(&lcd);
 8004b34:	4858      	ldr	r0, [pc, #352]	@ (8004c98 <main+0x4b28>)
 8004b36:	f003 f939 	bl	8007dac <Alcd_Clear>
				Alcd_PutAt(&lcd, 0, 0, "saved");
 8004b3a:	485d      	ldr	r0, [pc, #372]	@ (8004cb0 <main+0x4b40>)
 8004b3c:	f003 f98a 	bl	8007e54 <Str_Len>
 8004b40:	4603      	mov	r3, r0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb0 <main+0x4b40>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4852      	ldr	r0, [pc, #328]	@ (8004c98 <main+0x4b28>)
 8004b4e:	f003 f914 	bl	8007d7a <Alcd_PutAt_n>

				snprintf(timeString, sizeof(timeString), "ticks= %09d",
 8004b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b54:	f107 001c 	add.w	r0, r7, #28
 8004b58:	4a56      	ldr	r2, [pc, #344]	@ (8004cb4 <main+0x4b44>)
 8004b5a:	2132      	movs	r1, #50	@ 0x32
 8004b5c:	f006 fbfa 	bl	800b354 <sniprintf>
						dosing_tick);
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8004b60:	f107 031c 	add.w	r3, r7, #28
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fb fafb 	bl	8000160 <strlen>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f107 021c 	add.w	r2, r7, #28
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4847      	ldr	r0, [pc, #284]	@ (8004c98 <main+0x4b28>)
 8004b7c:	f003 f8fd 	bl	8007d7a <Alcd_PutAt_n>

				// Writing the ticks to the EEPROM
				eeprom24c32_write(&memory, &dosing_tick, dosing_period);
 8004b80:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb8 <main+0x4b48>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	484a      	ldr	r0, [pc, #296]	@ (8004cb8 <main+0x4b48>)
 8004b8e:	f002 fd25 	bl	80075dc <eeprom24c32_write>

				// Set general_delay to 1000ms after the current tick
				general_delay = current_tick + 1000;
 8004b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b94:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8004b98:	65fb      	str	r3, [r7, #92]	@ 0x5c

				// Set the status
				status = 21;
 8004b9a:	2315      	movs	r3, #21
 8004b9c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
		while ((status == 42) && (current_tick >= general_delay)) {
 8004ba0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ba6:	f040 80a3 	bne.w	8004cf0 <main+0x4b80>
 8004baa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d2aa      	bcs.n	8004b08 <main+0x4998>
			}
		}

		//edit parameters state 23
		while ((status == 23) && (current_tick >= general_delay)) {
 8004bb2:	e09d      	b.n	8004cf0 <main+0x4b80>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004bb4:	f003 fab4 	bl	8008120 <HAL_GetTick>
 8004bb8:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8004bba:	4837      	ldr	r0, [pc, #220]	@ (8004c98 <main+0x4b28>)
 8004bbc:	f003 f8f6 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "1: doses no.");
 8004bc0:	483e      	ldr	r0, [pc, #248]	@ (8004cbc <main+0x4b4c>)
 8004bc2:	f003 f947 	bl	8007e54 <Str_Len>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cbc <main+0x4b4c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4831      	ldr	r0, [pc, #196]	@ (8004c98 <main+0x4b28>)
 8004bd4:	f003 f8d1 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "2: dosing hour");
 8004bd8:	4839      	ldr	r0, [pc, #228]	@ (8004cc0 <main+0x4b50>)
 8004bda:	f003 f93b 	bl	8007e54 <Str_Len>
 8004bde:	4603      	mov	r3, r0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <main+0x4b50>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	2101      	movs	r1, #1
 8004bea:	482b      	ldr	r0, [pc, #172]	@ (8004c98 <main+0x4b28>)
 8004bec:	f003 f8c5 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004bf0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004bf4:	f107 001c 	add.w	r0, r7, #28
 8004bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca4 <main+0x4b34>)
 8004bfa:	2132      	movs	r1, #50	@ 0x32
 8004bfc:	f006 fbaa 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004c00:	f107 031c 	add.w	r3, r7, #28
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb faab 	bl	8000160 <strlen>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f107 021c 	add.w	r2, r7, #28
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	220e      	movs	r2, #14
 8004c18:	2100      	movs	r1, #0
 8004c1a:	481f      	ldr	r0, [pc, #124]	@ (8004c98 <main+0x4b28>)
 8004c1c:	f003 f8ad 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8004c20:	4821      	ldr	r0, [pc, #132]	@ (8004ca8 <main+0x4b38>)
 8004c22:	f003 f971 	bl	8007f08 <Keypad_Refresh>

			//in case 1 is selected -> no. of doses (status 43)
			if (Keypad_Get_Key(&kp, kp_button_1)
 8004c26:	2100      	movs	r1, #0
 8004c28:	481f      	ldr	r0, [pc, #124]	@ (8004ca8 <main+0x4b38>)
 8004c2a:	f003 fa09 	bl	8008040 <Keypad_Get_Key>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <main+0x4ada>
					&& (current_tick >= general_delay)) {
 8004c34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d306      	bcc.n	8004c4a <main+0x4ada>
				Alcd_Clear(&lcd);
 8004c3c:	4816      	ldr	r0, [pc, #88]	@ (8004c98 <main+0x4b28>)
 8004c3e:	f003 f8b5 	bl	8007dac <Alcd_Clear>

				status = 43;
 8004c42:	232b      	movs	r3, #43	@ 0x2b
 8004c44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004c48:	e04d      	b.n	8004ce6 <main+0x4b76>

			}

			//2 is selected -> edit hour
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4816      	ldr	r0, [pc, #88]	@ (8004ca8 <main+0x4b38>)
 8004c4e:	f003 f9f7 	bl	8008040 <Keypad_Get_Key>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <main+0x4afe>
					&& (current_tick >= general_delay)) {
 8004c58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d306      	bcc.n	8004c6e <main+0x4afe>

				Alcd_Clear(&lcd);
 8004c60:	480d      	ldr	r0, [pc, #52]	@ (8004c98 <main+0x4b28>)
 8004c62:	f003 f8a3 	bl	8007dac <Alcd_Clear>
				status = 44;
 8004c66:	232c      	movs	r3, #44	@ 0x2c
 8004c68:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004c6c:	e03b      	b.n	8004ce6 <main+0x4b76>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004c6e:	210e      	movs	r1, #14
 8004c70:	480d      	ldr	r0, [pc, #52]	@ (8004ca8 <main+0x4b38>)
 8004c72:	f003 f9e5 	bl	8008040 <Keypad_Get_Key>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d023      	beq.n	8004cc4 <main+0x4b54>
					&& (current_tick >= general_delay)) {
 8004c7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d31f      	bcc.n	8004cc4 <main+0x4b54>

				Alcd_Clear(&lcd);
 8004c84:	4804      	ldr	r0, [pc, #16]	@ (8004c98 <main+0x4b28>)
 8004c86:	f003 f891 	bl	8007dac <Alcd_Clear>
				//save? menu
				status = 48;
 8004c8a:	2330      	movs	r3, #48	@ 0x30
 8004c8c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004c90:	e029      	b.n	8004ce6 <main+0x4b76>
 8004c92:	bf00      	nop
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	2000001c 	.word	0x2000001c
 8004c9c:	0800be8c 	.word	0x0800be8c
 8004ca0:	0800be9c 	.word	0x0800be9c
 8004ca4:	0800bd1c 	.word	0x0800bd1c
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	0800beac 	.word	0x0800beac
 8004cb0:	0800beb8 	.word	0x0800beb8
 8004cb4:	0800bec0 	.word	0x0800bec0
 8004cb8:	20000168 	.word	0x20000168
 8004cbc:	0800becc 	.word	0x0800becc
 8004cc0:	0800bedc 	.word	0x0800bedc

			}

			//next is selected
			else if (Keypad_Get_Key(&kp, kp_button_next)
 8004cc4:	2103      	movs	r1, #3
 8004cc6:	48a3      	ldr	r0, [pc, #652]	@ (8004f54 <main+0x4de4>)
 8004cc8:	f003 f9ba 	bl	8008040 <Keypad_Get_Key>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <main+0x4b76>
					&& (current_tick >= general_delay)) {
 8004cd2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d305      	bcc.n	8004ce6 <main+0x4b76>

				Alcd_Clear(&lcd);
 8004cda:	489f      	ldr	r0, [pc, #636]	@ (8004f58 <main+0x4de8>)
 8004cdc:	f003 f866 	bl	8007dac <Alcd_Clear>
				//go to extended parameters menu (state 49)
				status = 49;
 8004ce0:	2331      	movs	r3, #49	@ 0x31
 8004ce2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8004ce6:	f003 fa1b 	bl	8008120 <HAL_GetTick>
 8004cea:	4603      	mov	r3, r0
 8004cec:	33fa      	adds	r3, #250	@ 0xfa
 8004cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 23) && (current_tick >= general_delay)) {
 8004cf0:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004cf4:	2b17      	cmp	r3, #23
 8004cf6:	f040 8370 	bne.w	80053da <main+0x526a>
 8004cfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	f4bf af58 	bcs.w	8004bb4 <main+0x4a44>
		}

		//enter no. of doses (state 43)
		while ((status == 43) && (current_tick >= general_delay)) {
 8004d04:	e369      	b.n	80053da <main+0x526a>

			//get the current tick number
			current_tick = HAL_GetTick();
 8004d06:	f003 fa0b 	bl	8008120 <HAL_GetTick>
 8004d0a:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_PutAt(&lcd, 0, 0, "doses no.?");
 8004d0c:	4893      	ldr	r0, [pc, #588]	@ (8004f5c <main+0x4dec>)
 8004d0e:	f003 f8a1 	bl	8007e54 <Str_Len>
 8004d12:	4603      	mov	r3, r0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4b90      	ldr	r3, [pc, #576]	@ (8004f5c <main+0x4dec>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	488e      	ldr	r0, [pc, #568]	@ (8004f58 <main+0x4de8>)
 8004d20:	f003 f82b 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8004d24:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8004d28:	f107 001c 	add.w	r0, r7, #28
 8004d2c:	4a8c      	ldr	r2, [pc, #560]	@ (8004f60 <main+0x4df0>)
 8004d2e:	2132      	movs	r1, #50	@ 0x32
 8004d30:	f006 fb10 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8004d34:	f107 031c 	add.w	r3, r7, #28
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb fa11 	bl	8000160 <strlen>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f107 021c 	add.w	r2, r7, #28
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	220e      	movs	r2, #14
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4882      	ldr	r0, [pc, #520]	@ (8004f58 <main+0x4de8>)
 8004d50:	f003 f813 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8004d54:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	487e      	ldr	r0, [pc, #504]	@ (8004f58 <main+0x4de8>)
 8004d5e:	f002 ffd0 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8004d62:	2301      	movs	r3, #1
 8004d64:	2201      	movs	r2, #1
 8004d66:	2101      	movs	r1, #1
 8004d68:	487b      	ldr	r0, [pc, #492]	@ (8004f58 <main+0x4de8>)
 8004d6a:	f003 f830 	bl	8007dce <Alcd_Display_Control>

			Keypad_Refresh(&kp);
 8004d6e:	4879      	ldr	r0, [pc, #484]	@ (8004f54 <main+0x4de4>)
 8004d70:	f003 f8ca 	bl	8007f08 <Keypad_Refresh>

			//in case back is selected
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8004d74:	210e      	movs	r1, #14
 8004d76:	4877      	ldr	r0, [pc, #476]	@ (8004f54 <main+0x4de4>)
 8004d78:	f003 f962 	bl	8008040 <Keypad_Get_Key>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <main+0x4c28>
					&& (current_tick >= general_delay)) {
 8004d82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d306      	bcc.n	8004d98 <main+0x4c28>

				input_index = 0;  // Reset input index
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

				//back to previous menu
				status = 23;
 8004d90:	2317      	movs	r3, #23
 8004d92:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8004d96:	e320      	b.n	80053da <main+0x526a>

			}

			//if 0 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_0)
 8004d98:	210d      	movs	r1, #13
 8004d9a:	486e      	ldr	r0, [pc, #440]	@ (8004f54 <main+0x4de4>)
 8004d9c:	f003 f950 	bl	8008040 <Keypad_Get_Key>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d042      	beq.n	8004e2c <main+0x4cbc>
					&& (current_tick >= general_delay)) {
 8004da6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d33e      	bcc.n	8004e2c <main+0x4cbc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004dae:	2300      	movs	r3, #0
 8004db0:	2200      	movs	r2, #0
 8004db2:	2101      	movs	r1, #1
 8004db4:	4868      	ldr	r0, [pc, #416]	@ (8004f58 <main+0x4de8>)
 8004db6:	f003 f80a 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004dba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d827      	bhi.n	8004e12 <main+0x4ca2>
					entered_password[input_index] = '0';
 8004dc2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004dc6:	3368      	adds	r3, #104	@ 0x68
 8004dc8:	443b      	add	r3, r7
 8004dca:	2230      	movs	r2, #48	@ 0x30
 8004dcc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004dd0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	3368      	adds	r3, #104	@ 0x68
 8004dd8:	443b      	add	r3, r7
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8004de0:	4860      	ldr	r0, [pc, #384]	@ (8004f64 <main+0x4df4>)
 8004de2:	f003 f837 	bl	8007e54 <Str_Len>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4b5c      	ldr	r3, [pc, #368]	@ (8004f64 <main+0x4df4>)
 8004df2:	2101      	movs	r1, #1
 8004df4:	4858      	ldr	r0, [pc, #352]	@ (8004f58 <main+0x4de8>)
 8004df6:	f002 ffc0 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004dfa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004e04:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	4852      	ldr	r0, [pc, #328]	@ (8004f58 <main+0x4de8>)
 8004e0e:	f002 ff78 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004e12:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004e16:	2301      	movs	r3, #1
 8004e18:	2101      	movs	r1, #1
 8004e1a:	484f      	ldr	r0, [pc, #316]	@ (8004f58 <main+0x4de8>)
 8004e1c:	f002 ffd7 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004e20:	f003 f97e 	bl	8008120 <HAL_GetTick>
 8004e24:	4603      	mov	r3, r0
 8004e26:	33fa      	adds	r3, #250	@ 0xfa
 8004e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e2a:	e2d6      	b.n	80053da <main+0x526a>
			}

			//if 1 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4849      	ldr	r0, [pc, #292]	@ (8004f54 <main+0x4de4>)
 8004e30:	f003 f906 	bl	8008040 <Keypad_Get_Key>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d042      	beq.n	8004ec0 <main+0x4d50>
					&& (current_tick >= general_delay)) {
 8004e3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d33e      	bcc.n	8004ec0 <main+0x4d50>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004e42:	2300      	movs	r3, #0
 8004e44:	2200      	movs	r2, #0
 8004e46:	2101      	movs	r1, #1
 8004e48:	4843      	ldr	r0, [pc, #268]	@ (8004f58 <main+0x4de8>)
 8004e4a:	f002 ffc0 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004e4e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d827      	bhi.n	8004ea6 <main+0x4d36>
					entered_password[input_index] = '1';
 8004e56:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e5a:	3368      	adds	r3, #104	@ 0x68
 8004e5c:	443b      	add	r3, r7
 8004e5e:	2231      	movs	r2, #49	@ 0x31
 8004e60:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004e64:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e68:	3301      	adds	r3, #1
 8004e6a:	3368      	adds	r3, #104	@ 0x68
 8004e6c:	443b      	add	r3, r7
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8004e74:	483c      	ldr	r0, [pc, #240]	@ (8004f68 <main+0x4df8>)
 8004e76:	f002 ffed 	bl	8007e54 <Str_Len>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	4b38      	ldr	r3, [pc, #224]	@ (8004f68 <main+0x4df8>)
 8004e86:	2101      	movs	r1, #1
 8004e88:	4833      	ldr	r0, [pc, #204]	@ (8004f58 <main+0x4de8>)
 8004e8a:	f002 ff76 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004e8e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e92:	3301      	adds	r3, #1
 8004e94:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004e98:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	482d      	ldr	r0, [pc, #180]	@ (8004f58 <main+0x4de8>)
 8004ea2:	f002 ff2e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004ea6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004eaa:	2301      	movs	r3, #1
 8004eac:	2101      	movs	r1, #1
 8004eae:	482a      	ldr	r0, [pc, #168]	@ (8004f58 <main+0x4de8>)
 8004eb0:	f002 ff8d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004eb4:	f003 f934 	bl	8008120 <HAL_GetTick>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	33fa      	adds	r3, #250	@ 0xfa
 8004ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ebe:	e28c      	b.n	80053da <main+0x526a>
			}

			//if 2 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_2)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4824      	ldr	r0, [pc, #144]	@ (8004f54 <main+0x4de4>)
 8004ec4:	f003 f8bc 	bl	8008040 <Keypad_Get_Key>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d050      	beq.n	8004f70 <main+0x4e00>
					&& (current_tick >= general_delay)) {
 8004ece:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d34c      	bcc.n	8004f70 <main+0x4e00>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2101      	movs	r1, #1
 8004edc:	481e      	ldr	r0, [pc, #120]	@ (8004f58 <main+0x4de8>)
 8004ede:	f002 ff76 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004ee2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d827      	bhi.n	8004f3a <main+0x4dca>
					entered_password[input_index] = '2';
 8004eea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004eee:	3368      	adds	r3, #104	@ 0x68
 8004ef0:	443b      	add	r3, r7
 8004ef2:	2232      	movs	r2, #50	@ 0x32
 8004ef4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004ef8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004efc:	3301      	adds	r3, #1
 8004efe:	3368      	adds	r3, #104	@ 0x68
 8004f00:	443b      	add	r3, r7
 8004f02:	2200      	movs	r2, #0
 8004f04:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8004f08:	4818      	ldr	r0, [pc, #96]	@ (8004f6c <main+0x4dfc>)
 8004f0a:	f002 ffa3 	bl	8007e54 <Str_Len>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	4b14      	ldr	r3, [pc, #80]	@ (8004f6c <main+0x4dfc>)
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	480e      	ldr	r0, [pc, #56]	@ (8004f58 <main+0x4de8>)
 8004f1e:	f002 ff2c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004f22:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004f26:	3301      	adds	r3, #1
 8004f28:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004f2c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004f30:	461a      	mov	r2, r3
 8004f32:	2101      	movs	r1, #1
 8004f34:	4808      	ldr	r0, [pc, #32]	@ (8004f58 <main+0x4de8>)
 8004f36:	f002 fee4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004f3a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004f3e:	2301      	movs	r3, #1
 8004f40:	2101      	movs	r1, #1
 8004f42:	4805      	ldr	r0, [pc, #20]	@ (8004f58 <main+0x4de8>)
 8004f44:	f002 ff43 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004f48:	f003 f8ea 	bl	8008120 <HAL_GetTick>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	33fa      	adds	r3, #250	@ 0xfa
 8004f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f52:	e242      	b.n	80053da <main+0x526a>
 8004f54:	20000000 	.word	0x20000000
 8004f58:	2000001c 	.word	0x2000001c
 8004f5c:	0800beec 	.word	0x0800beec
 8004f60:	0800bd1c 	.word	0x0800bd1c
 8004f64:	0800be0c 	.word	0x0800be0c
 8004f68:	0800be10 	.word	0x0800be10
 8004f6c:	0800be14 	.word	0x0800be14
			}

			//if 3 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8004f70:	2102      	movs	r1, #2
 8004f72:	48b8      	ldr	r0, [pc, #736]	@ (8005254 <main+0x50e4>)
 8004f74:	f003 f864 	bl	8008040 <Keypad_Get_Key>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d042      	beq.n	8005004 <main+0x4e94>
					&& (current_tick >= general_delay)) {
 8004f7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d33e      	bcc.n	8005004 <main+0x4e94>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8004f86:	2300      	movs	r3, #0
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	48b2      	ldr	r0, [pc, #712]	@ (8005258 <main+0x50e8>)
 8004f8e:	f002 ff1e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8004f92:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d827      	bhi.n	8004fea <main+0x4e7a>
					entered_password[input_index] = '3';
 8004f9a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004f9e:	3368      	adds	r3, #104	@ 0x68
 8004fa0:	443b      	add	r3, r7
 8004fa2:	2233      	movs	r2, #51	@ 0x33
 8004fa4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8004fa8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004fac:	3301      	adds	r3, #1
 8004fae:	3368      	adds	r3, #104	@ 0x68
 8004fb0:	443b      	add	r3, r7
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8004fb8:	48a8      	ldr	r0, [pc, #672]	@ (800525c <main+0x50ec>)
 8004fba:	f002 ff4b 	bl	8007e54 <Str_Len>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	4ba4      	ldr	r3, [pc, #656]	@ (800525c <main+0x50ec>)
 8004fca:	2101      	movs	r1, #1
 8004fcc:	48a2      	ldr	r0, [pc, #648]	@ (8005258 <main+0x50e8>)
 8004fce:	f002 fed4 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8004fd2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8004fdc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	489c      	ldr	r0, [pc, #624]	@ (8005258 <main+0x50e8>)
 8004fe6:	f002 fe8c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8004fea:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8004fee:	2301      	movs	r3, #1
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4899      	ldr	r0, [pc, #612]	@ (8005258 <main+0x50e8>)
 8004ff4:	f002 feeb 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8004ff8:	f003 f892 	bl	8008120 <HAL_GetTick>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	33fa      	adds	r3, #250	@ 0xfa
 8005000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005002:	e1ea      	b.n	80053da <main+0x526a>
			}
			//if 4 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005004:	2104      	movs	r1, #4
 8005006:	4893      	ldr	r0, [pc, #588]	@ (8005254 <main+0x50e4>)
 8005008:	f003 f81a 	bl	8008040 <Keypad_Get_Key>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d042      	beq.n	8005098 <main+0x4f28>
					&& (current_tick >= general_delay)) {
 8005012:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005016:	429a      	cmp	r2, r3
 8005018:	d33e      	bcc.n	8005098 <main+0x4f28>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800501a:	2300      	movs	r3, #0
 800501c:	2200      	movs	r2, #0
 800501e:	2101      	movs	r1, #1
 8005020:	488d      	ldr	r0, [pc, #564]	@ (8005258 <main+0x50e8>)
 8005022:	f002 fed4 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005026:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800502a:	2b01      	cmp	r3, #1
 800502c:	d827      	bhi.n	800507e <main+0x4f0e>
					entered_password[input_index] = '4';
 800502e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005032:	3368      	adds	r3, #104	@ 0x68
 8005034:	443b      	add	r3, r7
 8005036:	2234      	movs	r2, #52	@ 0x34
 8005038:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800503c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005040:	3301      	adds	r3, #1
 8005042:	3368      	adds	r3, #104	@ 0x68
 8005044:	443b      	add	r3, r7
 8005046:	2200      	movs	r2, #0
 8005048:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800504c:	4884      	ldr	r0, [pc, #528]	@ (8005260 <main+0x50f0>)
 800504e:	f002 ff01 	bl	8007e54 <Str_Len>
 8005052:	4603      	mov	r3, r0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4b80      	ldr	r3, [pc, #512]	@ (8005260 <main+0x50f0>)
 800505e:	2101      	movs	r1, #1
 8005060:	487d      	ldr	r0, [pc, #500]	@ (8005258 <main+0x50e8>)
 8005062:	f002 fe8a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005066:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800506a:	3301      	adds	r3, #1
 800506c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005070:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005074:	461a      	mov	r2, r3
 8005076:	2101      	movs	r1, #1
 8005078:	4877      	ldr	r0, [pc, #476]	@ (8005258 <main+0x50e8>)
 800507a:	f002 fe42 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800507e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005082:	2301      	movs	r3, #1
 8005084:	2101      	movs	r1, #1
 8005086:	4874      	ldr	r0, [pc, #464]	@ (8005258 <main+0x50e8>)
 8005088:	f002 fea1 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800508c:	f003 f848 	bl	8008120 <HAL_GetTick>
 8005090:	4603      	mov	r3, r0
 8005092:	33fa      	adds	r3, #250	@ 0xfa
 8005094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005096:	e1a0      	b.n	80053da <main+0x526a>
			}

			//if 5 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8005098:	2105      	movs	r1, #5
 800509a:	486e      	ldr	r0, [pc, #440]	@ (8005254 <main+0x50e4>)
 800509c:	f002 ffd0 	bl	8008040 <Keypad_Get_Key>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d042      	beq.n	800512c <main+0x4fbc>
					&& (current_tick >= general_delay)) {
 80050a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d33e      	bcc.n	800512c <main+0x4fbc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80050ae:	2300      	movs	r3, #0
 80050b0:	2200      	movs	r2, #0
 80050b2:	2101      	movs	r1, #1
 80050b4:	4868      	ldr	r0, [pc, #416]	@ (8005258 <main+0x50e8>)
 80050b6:	f002 fe8a 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 80050ba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d827      	bhi.n	8005112 <main+0x4fa2>
					entered_password[input_index] = '5';
 80050c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80050c6:	3368      	adds	r3, #104	@ 0x68
 80050c8:	443b      	add	r3, r7
 80050ca:	2235      	movs	r2, #53	@ 0x35
 80050cc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80050d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80050d4:	3301      	adds	r3, #1
 80050d6:	3368      	adds	r3, #104	@ 0x68
 80050d8:	443b      	add	r3, r7
 80050da:	2200      	movs	r2, #0
 80050dc:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80050e0:	4860      	ldr	r0, [pc, #384]	@ (8005264 <main+0x50f4>)
 80050e2:	f002 feb7 	bl	8007e54 <Str_Len>
 80050e6:	4603      	mov	r3, r0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005264 <main+0x50f4>)
 80050f2:	2101      	movs	r1, #1
 80050f4:	4858      	ldr	r0, [pc, #352]	@ (8005258 <main+0x50e8>)
 80050f6:	f002 fe40 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80050fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80050fe:	3301      	adds	r3, #1
 8005100:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005104:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005108:	461a      	mov	r2, r3
 800510a:	2101      	movs	r1, #1
 800510c:	4852      	ldr	r0, [pc, #328]	@ (8005258 <main+0x50e8>)
 800510e:	f002 fdf8 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005112:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005116:	2301      	movs	r3, #1
 8005118:	2101      	movs	r1, #1
 800511a:	484f      	ldr	r0, [pc, #316]	@ (8005258 <main+0x50e8>)
 800511c:	f002 fe57 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005120:	f002 fffe 	bl	8008120 <HAL_GetTick>
 8005124:	4603      	mov	r3, r0
 8005126:	33fa      	adds	r3, #250	@ 0xfa
 8005128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800512a:	e156      	b.n	80053da <main+0x526a>
			}

			//if 6 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_6)
 800512c:	2106      	movs	r1, #6
 800512e:	4849      	ldr	r0, [pc, #292]	@ (8005254 <main+0x50e4>)
 8005130:	f002 ff86 	bl	8008040 <Keypad_Get_Key>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d042      	beq.n	80051c0 <main+0x5050>
					&& (current_tick >= general_delay)) {
 800513a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800513c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800513e:	429a      	cmp	r2, r3
 8005140:	d33e      	bcc.n	80051c0 <main+0x5050>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005142:	2300      	movs	r3, #0
 8005144:	2200      	movs	r2, #0
 8005146:	2101      	movs	r1, #1
 8005148:	4843      	ldr	r0, [pc, #268]	@ (8005258 <main+0x50e8>)
 800514a:	f002 fe40 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 800514e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005152:	2b01      	cmp	r3, #1
 8005154:	d827      	bhi.n	80051a6 <main+0x5036>
					entered_password[input_index] = '6';
 8005156:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800515a:	3368      	adds	r3, #104	@ 0x68
 800515c:	443b      	add	r3, r7
 800515e:	2236      	movs	r2, #54	@ 0x36
 8005160:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 8005164:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005168:	3301      	adds	r3, #1
 800516a:	3368      	adds	r3, #104	@ 0x68
 800516c:	443b      	add	r3, r7
 800516e:	2200      	movs	r2, #0
 8005170:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8005174:	483c      	ldr	r0, [pc, #240]	@ (8005268 <main+0x50f8>)
 8005176:	f002 fe6d 	bl	8007e54 <Str_Len>
 800517a:	4603      	mov	r3, r0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4b38      	ldr	r3, [pc, #224]	@ (8005268 <main+0x50f8>)
 8005186:	2101      	movs	r1, #1
 8005188:	4833      	ldr	r0, [pc, #204]	@ (8005258 <main+0x50e8>)
 800518a:	f002 fdf6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800518e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005192:	3301      	adds	r3, #1
 8005194:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005198:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800519c:	461a      	mov	r2, r3
 800519e:	2101      	movs	r1, #1
 80051a0:	482d      	ldr	r0, [pc, #180]	@ (8005258 <main+0x50e8>)
 80051a2:	f002 fdae 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80051a6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80051aa:	2301      	movs	r3, #1
 80051ac:	2101      	movs	r1, #1
 80051ae:	482a      	ldr	r0, [pc, #168]	@ (8005258 <main+0x50e8>)
 80051b0:	f002 fe0d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80051b4:	f002 ffb4 	bl	8008120 <HAL_GetTick>
 80051b8:	4603      	mov	r3, r0
 80051ba:	33fa      	adds	r3, #250	@ 0xfa
 80051bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051be:	e10c      	b.n	80053da <main+0x526a>
			}
			//if 7 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80051c0:	2108      	movs	r1, #8
 80051c2:	4824      	ldr	r0, [pc, #144]	@ (8005254 <main+0x50e4>)
 80051c4:	f002 ff3c 	bl	8008040 <Keypad_Get_Key>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d050      	beq.n	8005270 <main+0x5100>
					&& (current_tick >= general_delay)) {
 80051ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80051d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d34c      	bcc.n	8005270 <main+0x5100>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80051d6:	2300      	movs	r3, #0
 80051d8:	2200      	movs	r2, #0
 80051da:	2101      	movs	r1, #1
 80051dc:	481e      	ldr	r0, [pc, #120]	@ (8005258 <main+0x50e8>)
 80051de:	f002 fdf6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 80051e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d827      	bhi.n	800523a <main+0x50ca>
					entered_password[input_index] = '7';
 80051ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80051ee:	3368      	adds	r3, #104	@ 0x68
 80051f0:	443b      	add	r3, r7
 80051f2:	2237      	movs	r2, #55	@ 0x37
 80051f4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80051f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80051fc:	3301      	adds	r3, #1
 80051fe:	3368      	adds	r3, #104	@ 0x68
 8005200:	443b      	add	r3, r7
 8005202:	2200      	movs	r2, #0
 8005204:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8005208:	4818      	ldr	r0, [pc, #96]	@ (800526c <main+0x50fc>)
 800520a:	f002 fe23 	bl	8007e54 <Str_Len>
 800520e:	4603      	mov	r3, r0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4b14      	ldr	r3, [pc, #80]	@ (800526c <main+0x50fc>)
 800521a:	2101      	movs	r1, #1
 800521c:	480e      	ldr	r0, [pc, #56]	@ (8005258 <main+0x50e8>)
 800521e:	f002 fdac 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005222:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005226:	3301      	adds	r3, #1
 8005228:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 800522c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005230:	461a      	mov	r2, r3
 8005232:	2101      	movs	r1, #1
 8005234:	4808      	ldr	r0, [pc, #32]	@ (8005258 <main+0x50e8>)
 8005236:	f002 fd64 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800523a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800523e:	2301      	movs	r3, #1
 8005240:	2101      	movs	r1, #1
 8005242:	4805      	ldr	r0, [pc, #20]	@ (8005258 <main+0x50e8>)
 8005244:	f002 fdc3 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005248:	f002 ff6a 	bl	8008120 <HAL_GetTick>
 800524c:	4603      	mov	r3, r0
 800524e:	33fa      	adds	r3, #250	@ 0xfa
 8005250:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005252:	e0c2      	b.n	80053da <main+0x526a>
 8005254:	20000000 	.word	0x20000000
 8005258:	2000001c 	.word	0x2000001c
 800525c:	0800be18 	.word	0x0800be18
 8005260:	0800be1c 	.word	0x0800be1c
 8005264:	0800be20 	.word	0x0800be20
 8005268:	0800be24 	.word	0x0800be24
 800526c:	0800be28 	.word	0x0800be28
			}
			//if 8 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8005270:	2109      	movs	r1, #9
 8005272:	48ac      	ldr	r0, [pc, #688]	@ (8005524 <main+0x53b4>)
 8005274:	f002 fee4 	bl	8008040 <Keypad_Get_Key>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d042      	beq.n	8005304 <main+0x5194>
					&& (current_tick >= general_delay)) {
 800527e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005282:	429a      	cmp	r2, r3
 8005284:	d33e      	bcc.n	8005304 <main+0x5194>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005286:	2300      	movs	r3, #0
 8005288:	2200      	movs	r2, #0
 800528a:	2101      	movs	r1, #1
 800528c:	48a6      	ldr	r0, [pc, #664]	@ (8005528 <main+0x53b8>)
 800528e:	f002 fd9e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005292:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005296:	2b01      	cmp	r3, #1
 8005298:	d827      	bhi.n	80052ea <main+0x517a>
					entered_password[input_index] = '8';
 800529a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800529e:	3368      	adds	r3, #104	@ 0x68
 80052a0:	443b      	add	r3, r7
 80052a2:	2238      	movs	r2, #56	@ 0x38
 80052a4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 80052a8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80052ac:	3301      	adds	r3, #1
 80052ae:	3368      	adds	r3, #104	@ 0x68
 80052b0:	443b      	add	r3, r7
 80052b2:	2200      	movs	r2, #0
 80052b4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80052b8:	489c      	ldr	r0, [pc, #624]	@ (800552c <main+0x53bc>)
 80052ba:	f002 fdcb 	bl	8007e54 <Str_Len>
 80052be:	4603      	mov	r3, r0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	4b98      	ldr	r3, [pc, #608]	@ (800552c <main+0x53bc>)
 80052ca:	2101      	movs	r1, #1
 80052cc:	4896      	ldr	r0, [pc, #600]	@ (8005528 <main+0x53b8>)
 80052ce:	f002 fd54 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80052d2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80052d6:	3301      	adds	r3, #1
 80052d8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80052dc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80052e0:	461a      	mov	r2, r3
 80052e2:	2101      	movs	r1, #1
 80052e4:	4890      	ldr	r0, [pc, #576]	@ (8005528 <main+0x53b8>)
 80052e6:	f002 fd0c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80052ea:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80052ee:	2301      	movs	r3, #1
 80052f0:	2101      	movs	r1, #1
 80052f2:	488d      	ldr	r0, [pc, #564]	@ (8005528 <main+0x53b8>)
 80052f4:	f002 fd6b 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80052f8:	f002 ff12 	bl	8008120 <HAL_GetTick>
 80052fc:	4603      	mov	r3, r0
 80052fe:	33fa      	adds	r3, #250	@ 0xfa
 8005300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005302:	e06a      	b.n	80053da <main+0x526a>
			}
			//if 9 is pressed
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8005304:	210a      	movs	r1, #10
 8005306:	4887      	ldr	r0, [pc, #540]	@ (8005524 <main+0x53b4>)
 8005308:	f002 fe9a 	bl	8008040 <Keypad_Get_Key>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d042      	beq.n	8005398 <main+0x5228>
					&& (current_tick >= general_delay)) {
 8005312:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005316:	429a      	cmp	r2, r3
 8005318:	d33e      	bcc.n	8005398 <main+0x5228>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800531a:	2300      	movs	r3, #0
 800531c:	2200      	movs	r2, #0
 800531e:	2101      	movs	r1, #1
 8005320:	4881      	ldr	r0, [pc, #516]	@ (8005528 <main+0x53b8>)
 8005322:	f002 fd54 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered password
				if (input_index < 2) {
 8005326:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800532a:	2b01      	cmp	r3, #1
 800532c:	d827      	bhi.n	800537e <main+0x520e>
					entered_password[input_index] = '9';
 800532e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005332:	3368      	adds	r3, #104	@ 0x68
 8005334:	443b      	add	r3, r7
 8005336:	2239      	movs	r2, #57	@ 0x39
 8005338:	f803 2c5c 	strb.w	r2, [r3, #-92]
					entered_password[input_index + 1] = '\0'; // Null-terminate the string
 800533c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005340:	3301      	adds	r3, #1
 8005342:	3368      	adds	r3, #104	@ 0x68
 8005344:	443b      	add	r3, r7
 8005346:	2200      	movs	r2, #0
 8005348:	f803 2c5c 	strb.w	r2, [r3, #-92]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 800534c:	4878      	ldr	r0, [pc, #480]	@ (8005530 <main+0x53c0>)
 800534e:	f002 fd81 	bl	8007e54 <Str_Len>
 8005352:	4603      	mov	r3, r0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4b74      	ldr	r3, [pc, #464]	@ (8005530 <main+0x53c0>)
 800535e:	2101      	movs	r1, #1
 8005360:	4871      	ldr	r0, [pc, #452]	@ (8005528 <main+0x53b8>)
 8005362:	f002 fd0a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005366:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800536a:	3301      	adds	r3, #1
 800536c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005370:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005374:	461a      	mov	r2, r3
 8005376:	2101      	movs	r1, #1
 8005378:	486b      	ldr	r0, [pc, #428]	@ (8005528 <main+0x53b8>)
 800537a:	f002 fcc2 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800537e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005382:	2301      	movs	r3, #1
 8005384:	2101      	movs	r1, #1
 8005386:	4868      	ldr	r0, [pc, #416]	@ (8005528 <main+0x53b8>)
 8005388:	f002 fd21 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800538c:	f002 fec8 	bl	8008120 <HAL_GetTick>
 8005390:	4603      	mov	r3, r0
 8005392:	33fa      	adds	r3, #250	@ 0xfa
 8005394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005396:	e020      	b.n	80053da <main+0x526a>
			}

			//if yes is pressed
			else if (Keypad_Get_Key(&kp, kp_button_yes)
 8005398:	210f      	movs	r1, #15
 800539a:	4862      	ldr	r0, [pc, #392]	@ (8005524 <main+0x53b4>)
 800539c:	f002 fe50 	bl	8008040 <Keypad_Get_Key>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d019      	beq.n	80053da <main+0x526a>
					&& (current_tick >= general_delay)) {
 80053a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d315      	bcc.n	80053da <main+0x526a>

				//convert the string into integer
				buffer = atoi(entered_password);
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4618      	mov	r0, r3
 80053b4:	f005 ff45 	bl	800b242 <atoi>
 80053b8:	4603      	mov	r3, r0
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	807b      	strh	r3, [r7, #2]

				//write the value to eeprom
				eeprom24c32_write(&memory, &buffer, doses_number);
 80053be:	4b5d      	ldr	r3, [pc, #372]	@ (8005534 <main+0x53c4>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	1cbb      	adds	r3, r7, #2
 80053c6:	4619      	mov	r1, r3
 80053c8:	485a      	ldr	r0, [pc, #360]	@ (8005534 <main+0x53c4>)
 80053ca:	f002 f907 	bl	80075dc <eeprom24c32_write>

				input_index = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

				//return to the previous menu
				status = 23;
 80053d4:	2317      	movs	r3, #23
 80053d6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
		while ((status == 43) && (current_tick >= general_delay)) {
 80053da:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80053de:	2b2b      	cmp	r3, #43	@ 0x2b
 80053e0:	f040 8095 	bne.w	800550e <main+0x539e>
 80053e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80053e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f4bf ac8c 	bcs.w	8004d06 <main+0x4b96>
			}
		}

		//time entry state 44
		while ((status == 44) && (current_tick >= general_delay)) {
 80053ee:	e08e      	b.n	800550e <main+0x539e>

			//get the current tick number
			current_tick = HAL_GetTick();
 80053f0:	f002 fe96 	bl	8008120 <HAL_GetTick>
 80053f4:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 80053f6:	484c      	ldr	r0, [pc, #304]	@ (8005528 <main+0x53b8>)
 80053f8:	f002 fcd8 	bl	8007dac <Alcd_Clear>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 80053fc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005400:	f107 001c 	add.w	r0, r7, #28
 8005404:	4a4c      	ldr	r2, [pc, #304]	@ (8005538 <main+0x53c8>)
 8005406:	2132      	movs	r1, #50	@ 0x32
 8005408:	f005 ffa4 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800540c:	f107 031c 	add.w	r3, r7, #28
 8005410:	4618      	mov	r0, r3
 8005412:	f7fa fea5 	bl	8000160 <strlen>
 8005416:	4603      	mov	r3, r0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f107 021c 	add.w	r2, r7, #28
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	220e      	movs	r2, #14
 8005424:	2100      	movs	r1, #0
 8005426:	4840      	ldr	r0, [pc, #256]	@ (8005528 <main+0x53b8>)
 8005428:	f002 fca7 	bl	8007d7a <Alcd_PutAt_n>

			//check if the time format is 12h or 24h
			//in case 12h
			if (CLK.format == 1) {
 800542c:	4b43      	ldr	r3, [pc, #268]	@ (800553c <main+0x53cc>)
 800542e:	7c5b      	ldrb	r3, [r3, #17]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d05a      	beq.n	80054f0 <main+0x5380>

				Alcd_PutAt(&lcd, 0, 0, "select time");
 800543a:	4841      	ldr	r0, [pc, #260]	@ (8005540 <main+0x53d0>)
 800543c:	f002 fd0a 	bl	8007e54 <Str_Len>
 8005440:	4603      	mov	r3, r0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4b3e      	ldr	r3, [pc, #248]	@ (8005540 <main+0x53d0>)
 8005448:	2200      	movs	r2, #0
 800544a:	2100      	movs	r1, #0
 800544c:	4836      	ldr	r0, [pc, #216]	@ (8005528 <main+0x53b8>)
 800544e:	f002 fc94 	bl	8007d7a <Alcd_PutAt_n>
				Alcd_PutAt(&lcd, 1, 0, "1: AM   2: PM");
 8005452:	483c      	ldr	r0, [pc, #240]	@ (8005544 <main+0x53d4>)
 8005454:	f002 fcfe 	bl	8007e54 <Str_Len>
 8005458:	4603      	mov	r3, r0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	4b39      	ldr	r3, [pc, #228]	@ (8005544 <main+0x53d4>)
 8005460:	2200      	movs	r2, #0
 8005462:	2101      	movs	r1, #1
 8005464:	4830      	ldr	r0, [pc, #192]	@ (8005528 <main+0x53b8>)
 8005466:	f002 fc88 	bl	8007d7a <Alcd_PutAt_n>

				//check for any keypad input
				Keypad_Refresh(&kp);
 800546a:	482e      	ldr	r0, [pc, #184]	@ (8005524 <main+0x53b4>)
 800546c:	f002 fd4c 	bl	8007f08 <Keypad_Refresh>

				//in case 1 is selected -> AM
				if (Keypad_Get_Key(&kp, kp_button_1)
 8005470:	2100      	movs	r1, #0
 8005472:	482c      	ldr	r0, [pc, #176]	@ (8005524 <main+0x53b4>)
 8005474:	f002 fde4 	bl	8008040 <Keypad_Get_Key>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00f      	beq.n	800549e <main+0x532e>
						&& (current_tick >= general_delay)) {
 800547e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005482:	429a      	cmp	r2, r3
 8005484:	d30b      	bcc.n	800549e <main+0x532e>
					CLK.AM_PM = 0;
 8005486:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <main+0x53cc>)
 8005488:	7c53      	ldrb	r3, [r2, #17]
 800548a:	f36f 0341 	bfc	r3, #1, #1
 800548e:	7453      	strb	r3, [r2, #17]

					Alcd_Clear(&lcd);
 8005490:	4825      	ldr	r0, [pc, #148]	@ (8005528 <main+0x53b8>)
 8005492:	f002 fc8b 	bl	8007dac <Alcd_Clear>

					status = 46;
 8005496:	232e      	movs	r3, #46	@ 0x2e
 8005498:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800549c:	e032      	b.n	8005504 <main+0x5394>

				}

				//2 is selected -> PM
				else if (Keypad_Get_Key(&kp, kp_button_2)
 800549e:	2101      	movs	r1, #1
 80054a0:	4820      	ldr	r0, [pc, #128]	@ (8005524 <main+0x53b4>)
 80054a2:	f002 fdcd 	bl	8008040 <Keypad_Get_Key>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00f      	beq.n	80054cc <main+0x535c>
						&& (current_tick >= general_delay)) {
 80054ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d30b      	bcc.n	80054cc <main+0x535c>

					CLK.AM_PM = 1;
 80054b4:	4a21      	ldr	r2, [pc, #132]	@ (800553c <main+0x53cc>)
 80054b6:	7c53      	ldrb	r3, [r2, #17]
 80054b8:	f043 0302 	orr.w	r3, r3, #2
 80054bc:	7453      	strb	r3, [r2, #17]
					Alcd_Clear(&lcd);
 80054be:	481a      	ldr	r0, [pc, #104]	@ (8005528 <main+0x53b8>)
 80054c0:	f002 fc74 	bl	8007dac <Alcd_Clear>
					status = 46;
 80054c4:	232e      	movs	r3, #46	@ 0x2e
 80054c6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80054ca:	e01b      	b.n	8005504 <main+0x5394>

				}

				//back is selected
				else if (Keypad_Get_Key(&kp, kp_button_no_back)
 80054cc:	210e      	movs	r1, #14
 80054ce:	4815      	ldr	r0, [pc, #84]	@ (8005524 <main+0x53b4>)
 80054d0:	f002 fdb6 	bl	8008040 <Keypad_Get_Key>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <main+0x5394>
						&& (current_tick >= general_delay)) {
 80054da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054de:	429a      	cmp	r2, r3
 80054e0:	d310      	bcc.n	8005504 <main+0x5394>

					Alcd_Clear(&lcd);
 80054e2:	4811      	ldr	r0, [pc, #68]	@ (8005528 <main+0x53b8>)
 80054e4:	f002 fc62 	bl	8007dac <Alcd_Clear>
					//go to previous menu
					status = 23;
 80054e8:	2317      	movs	r3, #23
 80054ea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80054ee:	e009      	b.n	8005504 <main+0x5394>

				}

			}

			else if (CLK.format == 0) {
 80054f0:	4b12      	ldr	r3, [pc, #72]	@ (800553c <main+0x53cc>)
 80054f2:	7c5b      	ldrb	r3, [r3, #17]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <main+0x5394>

				status = 46;
 80054fe:	232e      	movs	r3, #46	@ 0x2e
 8005500:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8005504:	f002 fe0c 	bl	8008120 <HAL_GetTick>
 8005508:	4603      	mov	r3, r0
 800550a:	33fa      	adds	r3, #250	@ 0xfa
 800550c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 44) && (current_tick >= general_delay)) {
 800550e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005512:	2b2c      	cmp	r3, #44	@ 0x2c
 8005514:	f040 838c 	bne.w	8005c30 <main+0x5ac0>
 8005518:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800551a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800551c:	429a      	cmp	r2, r3
 800551e:	f4bf af67 	bcs.w	80053f0 <main+0x5280>
		}

		//entering the hours state (46)
		while ((status == 46) && (current_tick >= general_delay)) {
 8005522:	e385      	b.n	8005c30 <main+0x5ac0>
 8005524:	20000000 	.word	0x20000000
 8005528:	2000001c 	.word	0x2000001c
 800552c:	0800be2c 	.word	0x0800be2c
 8005530:	0800be30 	.word	0x0800be30
 8005534:	20000168 	.word	0x20000168
 8005538:	0800bd1c 	.word	0x0800bd1c
 800553c:	20000150 	.word	0x20000150
 8005540:	0800bef8 	.word	0x0800bef8
 8005544:	0800bf04 	.word	0x0800bf04

			//get the current tick number
			current_tick = HAL_GetTick();
 8005548:	f002 fdea 	bl	8008120 <HAL_GetTick>
 800554c:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter hours");
 800554e:	48b5      	ldr	r0, [pc, #724]	@ (8005824 <main+0x56b4>)
 8005550:	f002 fc80 	bl	8007e54 <Str_Len>
 8005554:	4603      	mov	r3, r0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	4bb2      	ldr	r3, [pc, #712]	@ (8005824 <main+0x56b4>)
 800555c:	2200      	movs	r2, #0
 800555e:	2100      	movs	r1, #0
 8005560:	48b1      	ldr	r0, [pc, #708]	@ (8005828 <main+0x56b8>)
 8005562:	f002 fc0a 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005566:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800556a:	f107 001c 	add.w	r0, r7, #28
 800556e:	4aaf      	ldr	r2, [pc, #700]	@ (800582c <main+0x56bc>)
 8005570:	2132      	movs	r1, #50	@ 0x32
 8005572:	f005 feef 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005576:	f107 031c 	add.w	r3, r7, #28
 800557a:	4618      	mov	r0, r3
 800557c:	f7fa fdf0 	bl	8000160 <strlen>
 8005580:	4603      	mov	r3, r0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f107 021c 	add.w	r2, r7, #28
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	220e      	movs	r2, #14
 800558e:	2100      	movs	r1, #0
 8005590:	48a5      	ldr	r0, [pc, #660]	@ (8005828 <main+0x56b8>)
 8005592:	f002 fbf2 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8005596:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800559a:	461a      	mov	r2, r3
 800559c:	2101      	movs	r1, #1
 800559e:	48a2      	ldr	r0, [pc, #648]	@ (8005828 <main+0x56b8>)
 80055a0:	f002 fbaf 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 80055a4:	2301      	movs	r3, #1
 80055a6:	2201      	movs	r2, #1
 80055a8:	2101      	movs	r1, #1
 80055aa:	489f      	ldr	r0, [pc, #636]	@ (8005828 <main+0x56b8>)
 80055ac:	f002 fc0f 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 80055b0:	489f      	ldr	r0, [pc, #636]	@ (8005830 <main+0x56c0>)
 80055b2:	f002 fca9 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 80055b6:	210e      	movs	r1, #14
 80055b8:	489d      	ldr	r0, [pc, #628]	@ (8005830 <main+0x56c0>)
 80055ba:	f002 fd41 	bl	8008040 <Keypad_Get_Key>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <main+0x5464>
					&& (current_tick >= general_delay)) {
 80055c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d303      	bcc.n	80055d4 <main+0x5464>

				//back to previous menu
				status = 23;
 80055cc:	2317      	movs	r3, #23
 80055ce:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80055d2:	e300      	b.n	8005bd6 <main+0x5a66>

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80055d4:	210d      	movs	r1, #13
 80055d6:	4896      	ldr	r0, [pc, #600]	@ (8005830 <main+0x56c0>)
 80055d8:	f002 fd32 	bl	8008040 <Keypad_Get_Key>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d042      	beq.n	8005668 <main+0x54f8>
					&& (current_tick >= general_delay)) {
 80055e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d33e      	bcc.n	8005668 <main+0x54f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80055ea:	2300      	movs	r3, #0
 80055ec:	2200      	movs	r2, #0
 80055ee:	2101      	movs	r1, #1
 80055f0:	488d      	ldr	r0, [pc, #564]	@ (8005828 <main+0x56b8>)
 80055f2:	f002 fbec 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80055f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d827      	bhi.n	800564e <main+0x54de>
					time_date_buffer[input_index] = '0';
 80055fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005602:	3368      	adds	r3, #104	@ 0x68
 8005604:	443b      	add	r3, r7
 8005606:	2230      	movs	r2, #48	@ 0x30
 8005608:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800560c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005610:	3301      	adds	r3, #1
 8005612:	3368      	adds	r3, #104	@ 0x68
 8005614:	443b      	add	r3, r7
 8005616:	2200      	movs	r2, #0
 8005618:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 800561c:	4885      	ldr	r0, [pc, #532]	@ (8005834 <main+0x56c4>)
 800561e:	f002 fc19 	bl	8007e54 <Str_Len>
 8005622:	4603      	mov	r3, r0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4b81      	ldr	r3, [pc, #516]	@ (8005834 <main+0x56c4>)
 800562e:	2101      	movs	r1, #1
 8005630:	487d      	ldr	r0, [pc, #500]	@ (8005828 <main+0x56b8>)
 8005632:	f002 fba2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005636:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800563a:	3301      	adds	r3, #1
 800563c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005640:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005644:	461a      	mov	r2, r3
 8005646:	2101      	movs	r1, #1
 8005648:	4877      	ldr	r0, [pc, #476]	@ (8005828 <main+0x56b8>)
 800564a:	f002 fb5a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800564e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005652:	2301      	movs	r3, #1
 8005654:	2101      	movs	r1, #1
 8005656:	4874      	ldr	r0, [pc, #464]	@ (8005828 <main+0x56b8>)
 8005658:	f002 fbb9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800565c:	f002 fd60 	bl	8008120 <HAL_GetTick>
 8005660:	4603      	mov	r3, r0
 8005662:	33fa      	adds	r3, #250	@ 0xfa
 8005664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005666:	e2b6      	b.n	8005bd6 <main+0x5a66>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8005668:	2100      	movs	r1, #0
 800566a:	4871      	ldr	r0, [pc, #452]	@ (8005830 <main+0x56c0>)
 800566c:	f002 fce8 	bl	8008040 <Keypad_Get_Key>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d042      	beq.n	80056fc <main+0x558c>
					&& (current_tick >= general_delay)) {
 8005676:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800567a:	429a      	cmp	r2, r3
 800567c:	d33e      	bcc.n	80056fc <main+0x558c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800567e:	2300      	movs	r3, #0
 8005680:	2200      	movs	r2, #0
 8005682:	2101      	movs	r1, #1
 8005684:	4868      	ldr	r0, [pc, #416]	@ (8005828 <main+0x56b8>)
 8005686:	f002 fba2 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800568a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800568e:	2b01      	cmp	r3, #1
 8005690:	d827      	bhi.n	80056e2 <main+0x5572>
					time_date_buffer[input_index] = '1';
 8005692:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005696:	3368      	adds	r3, #104	@ 0x68
 8005698:	443b      	add	r3, r7
 800569a:	2231      	movs	r2, #49	@ 0x31
 800569c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80056a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80056a4:	3301      	adds	r3, #1
 80056a6:	3368      	adds	r3, #104	@ 0x68
 80056a8:	443b      	add	r3, r7
 80056aa:	2200      	movs	r2, #0
 80056ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 80056b0:	4861      	ldr	r0, [pc, #388]	@ (8005838 <main+0x56c8>)
 80056b2:	f002 fbcf 	bl	8007e54 <Str_Len>
 80056b6:	4603      	mov	r3, r0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4b5d      	ldr	r3, [pc, #372]	@ (8005838 <main+0x56c8>)
 80056c2:	2101      	movs	r1, #1
 80056c4:	4858      	ldr	r0, [pc, #352]	@ (8005828 <main+0x56b8>)
 80056c6:	f002 fb58 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80056ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80056ce:	3301      	adds	r3, #1
 80056d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80056d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80056d8:	461a      	mov	r2, r3
 80056da:	2101      	movs	r1, #1
 80056dc:	4852      	ldr	r0, [pc, #328]	@ (8005828 <main+0x56b8>)
 80056de:	f002 fb10 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80056e2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80056e6:	2301      	movs	r3, #1
 80056e8:	2101      	movs	r1, #1
 80056ea:	484f      	ldr	r0, [pc, #316]	@ (8005828 <main+0x56b8>)
 80056ec:	f002 fb6f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80056f0:	f002 fd16 	bl	8008120 <HAL_GetTick>
 80056f4:	4603      	mov	r3, r0
 80056f6:	33fa      	adds	r3, #250	@ 0xfa
 80056f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056fa:	e26c      	b.n	8005bd6 <main+0x5a66>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80056fc:	2101      	movs	r1, #1
 80056fe:	484c      	ldr	r0, [pc, #304]	@ (8005830 <main+0x56c0>)
 8005700:	f002 fc9e 	bl	8008040 <Keypad_Get_Key>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d042      	beq.n	8005790 <main+0x5620>
					&& (current_tick >= general_delay)) {
 800570a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800570c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570e:	429a      	cmp	r2, r3
 8005710:	d33e      	bcc.n	8005790 <main+0x5620>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005712:	2300      	movs	r3, #0
 8005714:	2200      	movs	r2, #0
 8005716:	2101      	movs	r1, #1
 8005718:	4843      	ldr	r0, [pc, #268]	@ (8005828 <main+0x56b8>)
 800571a:	f002 fb58 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800571e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005722:	2b01      	cmp	r3, #1
 8005724:	d827      	bhi.n	8005776 <main+0x5606>
					time_date_buffer[input_index] = '2';
 8005726:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800572a:	3368      	adds	r3, #104	@ 0x68
 800572c:	443b      	add	r3, r7
 800572e:	2232      	movs	r2, #50	@ 0x32
 8005730:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005734:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005738:	3301      	adds	r3, #1
 800573a:	3368      	adds	r3, #104	@ 0x68
 800573c:	443b      	add	r3, r7
 800573e:	2200      	movs	r2, #0
 8005740:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8005744:	483d      	ldr	r0, [pc, #244]	@ (800583c <main+0x56cc>)
 8005746:	f002 fb85 	bl	8007e54 <Str_Len>
 800574a:	4603      	mov	r3, r0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4b39      	ldr	r3, [pc, #228]	@ (800583c <main+0x56cc>)
 8005756:	2101      	movs	r1, #1
 8005758:	4833      	ldr	r0, [pc, #204]	@ (8005828 <main+0x56b8>)
 800575a:	f002 fb0e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800575e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005762:	3301      	adds	r3, #1
 8005764:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005768:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800576c:	461a      	mov	r2, r3
 800576e:	2101      	movs	r1, #1
 8005770:	482d      	ldr	r0, [pc, #180]	@ (8005828 <main+0x56b8>)
 8005772:	f002 fac6 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005776:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800577a:	2301      	movs	r3, #1
 800577c:	2101      	movs	r1, #1
 800577e:	482a      	ldr	r0, [pc, #168]	@ (8005828 <main+0x56b8>)
 8005780:	f002 fb25 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005784:	f002 fccc 	bl	8008120 <HAL_GetTick>
 8005788:	4603      	mov	r3, r0
 800578a:	33fa      	adds	r3, #250	@ 0xfa
 800578c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800578e:	e222      	b.n	8005bd6 <main+0x5a66>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8005790:	2102      	movs	r1, #2
 8005792:	4827      	ldr	r0, [pc, #156]	@ (8005830 <main+0x56c0>)
 8005794:	f002 fc54 	bl	8008040 <Keypad_Get_Key>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d052      	beq.n	8005844 <main+0x56d4>
					&& (current_tick >= general_delay)) {
 800579e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d34e      	bcc.n	8005844 <main+0x56d4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80057a6:	2300      	movs	r3, #0
 80057a8:	2200      	movs	r2, #0
 80057aa:	2101      	movs	r1, #1
 80057ac:	481e      	ldr	r0, [pc, #120]	@ (8005828 <main+0x56b8>)
 80057ae:	f002 fb0e 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80057b2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d827      	bhi.n	800580a <main+0x569a>
					time_date_buffer[input_index] = '3';
 80057ba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80057be:	3368      	adds	r3, #104	@ 0x68
 80057c0:	443b      	add	r3, r7
 80057c2:	2233      	movs	r2, #51	@ 0x33
 80057c4:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80057c8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80057cc:	3301      	adds	r3, #1
 80057ce:	3368      	adds	r3, #104	@ 0x68
 80057d0:	443b      	add	r3, r7
 80057d2:	2200      	movs	r2, #0
 80057d4:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80057d8:	4819      	ldr	r0, [pc, #100]	@ (8005840 <main+0x56d0>)
 80057da:	f002 fb3b 	bl	8007e54 <Str_Len>
 80057de:	4603      	mov	r3, r0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <main+0x56d0>)
 80057ea:	2101      	movs	r1, #1
 80057ec:	480e      	ldr	r0, [pc, #56]	@ (8005828 <main+0x56b8>)
 80057ee:	f002 fac4 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80057f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80057f6:	3301      	adds	r3, #1
 80057f8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80057fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005800:	461a      	mov	r2, r3
 8005802:	2101      	movs	r1, #1
 8005804:	4808      	ldr	r0, [pc, #32]	@ (8005828 <main+0x56b8>)
 8005806:	f002 fa7c 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800580a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800580e:	2301      	movs	r3, #1
 8005810:	2101      	movs	r1, #1
 8005812:	4805      	ldr	r0, [pc, #20]	@ (8005828 <main+0x56b8>)
 8005814:	f002 fadb 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005818:	f002 fc82 	bl	8008120 <HAL_GetTick>
 800581c:	4603      	mov	r3, r0
 800581e:	33fa      	adds	r3, #250	@ 0xfa
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005822:	e1d8      	b.n	8005bd6 <main+0x5a66>
 8005824:	0800be00 	.word	0x0800be00
 8005828:	2000001c 	.word	0x2000001c
 800582c:	0800bd1c 	.word	0x0800bd1c
 8005830:	20000000 	.word	0x20000000
 8005834:	0800be0c 	.word	0x0800be0c
 8005838:	0800be10 	.word	0x0800be10
 800583c:	0800be14 	.word	0x0800be14
 8005840:	0800be18 	.word	0x0800be18

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005844:	2104      	movs	r1, #4
 8005846:	48b8      	ldr	r0, [pc, #736]	@ (8005b28 <main+0x59b8>)
 8005848:	f002 fbfa 	bl	8008040 <Keypad_Get_Key>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d042      	beq.n	80058d8 <main+0x5768>
					&& (current_tick >= general_delay)) {
 8005852:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005856:	429a      	cmp	r2, r3
 8005858:	d33e      	bcc.n	80058d8 <main+0x5768>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800585a:	2300      	movs	r3, #0
 800585c:	2200      	movs	r2, #0
 800585e:	2101      	movs	r1, #1
 8005860:	48b2      	ldr	r0, [pc, #712]	@ (8005b2c <main+0x59bc>)
 8005862:	f002 fab4 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005866:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800586a:	2b01      	cmp	r3, #1
 800586c:	d827      	bhi.n	80058be <main+0x574e>
					time_date_buffer[input_index] = '4';
 800586e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005872:	3368      	adds	r3, #104	@ 0x68
 8005874:	443b      	add	r3, r7
 8005876:	2234      	movs	r2, #52	@ 0x34
 8005878:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800587c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005880:	3301      	adds	r3, #1
 8005882:	3368      	adds	r3, #104	@ 0x68
 8005884:	443b      	add	r3, r7
 8005886:	2200      	movs	r2, #0
 8005888:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 800588c:	48a8      	ldr	r0, [pc, #672]	@ (8005b30 <main+0x59c0>)
 800588e:	f002 fae1 	bl	8007e54 <Str_Len>
 8005892:	4603      	mov	r3, r0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4ba4      	ldr	r3, [pc, #656]	@ (8005b30 <main+0x59c0>)
 800589e:	2101      	movs	r1, #1
 80058a0:	48a2      	ldr	r0, [pc, #648]	@ (8005b2c <main+0x59bc>)
 80058a2:	f002 fa6a 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80058a6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80058aa:	3301      	adds	r3, #1
 80058ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80058b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80058b4:	461a      	mov	r2, r3
 80058b6:	2101      	movs	r1, #1
 80058b8:	489c      	ldr	r0, [pc, #624]	@ (8005b2c <main+0x59bc>)
 80058ba:	f002 fa22 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80058be:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80058c2:	2301      	movs	r3, #1
 80058c4:	2101      	movs	r1, #1
 80058c6:	4899      	ldr	r0, [pc, #612]	@ (8005b2c <main+0x59bc>)
 80058c8:	f002 fa81 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80058cc:	f002 fc28 	bl	8008120 <HAL_GetTick>
 80058d0:	4603      	mov	r3, r0
 80058d2:	33fa      	adds	r3, #250	@ 0xfa
 80058d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d6:	e17e      	b.n	8005bd6 <main+0x5a66>

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80058d8:	2105      	movs	r1, #5
 80058da:	4893      	ldr	r0, [pc, #588]	@ (8005b28 <main+0x59b8>)
 80058dc:	f002 fbb0 	bl	8008040 <Keypad_Get_Key>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d042      	beq.n	800596c <main+0x57fc>
					&& (current_tick >= general_delay)) {
 80058e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d33e      	bcc.n	800596c <main+0x57fc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80058ee:	2300      	movs	r3, #0
 80058f0:	2200      	movs	r2, #0
 80058f2:	2101      	movs	r1, #1
 80058f4:	488d      	ldr	r0, [pc, #564]	@ (8005b2c <main+0x59bc>)
 80058f6:	f002 fa6a 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80058fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d827      	bhi.n	8005952 <main+0x57e2>
					time_date_buffer[input_index] = '5';
 8005902:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005906:	3368      	adds	r3, #104	@ 0x68
 8005908:	443b      	add	r3, r7
 800590a:	2235      	movs	r2, #53	@ 0x35
 800590c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005910:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005914:	3301      	adds	r3, #1
 8005916:	3368      	adds	r3, #104	@ 0x68
 8005918:	443b      	add	r3, r7
 800591a:	2200      	movs	r2, #0
 800591c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8005920:	4884      	ldr	r0, [pc, #528]	@ (8005b34 <main+0x59c4>)
 8005922:	f002 fa97 	bl	8007e54 <Str_Len>
 8005926:	4603      	mov	r3, r0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4b80      	ldr	r3, [pc, #512]	@ (8005b34 <main+0x59c4>)
 8005932:	2101      	movs	r1, #1
 8005934:	487d      	ldr	r0, [pc, #500]	@ (8005b2c <main+0x59bc>)
 8005936:	f002 fa20 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800593a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800593e:	3301      	adds	r3, #1
 8005940:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005944:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005948:	461a      	mov	r2, r3
 800594a:	2101      	movs	r1, #1
 800594c:	4877      	ldr	r0, [pc, #476]	@ (8005b2c <main+0x59bc>)
 800594e:	f002 f9d8 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005952:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005956:	2301      	movs	r3, #1
 8005958:	2101      	movs	r1, #1
 800595a:	4874      	ldr	r0, [pc, #464]	@ (8005b2c <main+0x59bc>)
 800595c:	f002 fa37 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005960:	f002 fbde 	bl	8008120 <HAL_GetTick>
 8005964:	4603      	mov	r3, r0
 8005966:	33fa      	adds	r3, #250	@ 0xfa
 8005968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800596a:	e134      	b.n	8005bd6 <main+0x5a66>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 800596c:	2106      	movs	r1, #6
 800596e:	486e      	ldr	r0, [pc, #440]	@ (8005b28 <main+0x59b8>)
 8005970:	f002 fb66 	bl	8008040 <Keypad_Get_Key>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d042      	beq.n	8005a00 <main+0x5890>
					&& (current_tick >= general_delay)) {
 800597a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800597c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800597e:	429a      	cmp	r2, r3
 8005980:	d33e      	bcc.n	8005a00 <main+0x5890>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005982:	2300      	movs	r3, #0
 8005984:	2200      	movs	r2, #0
 8005986:	2101      	movs	r1, #1
 8005988:	4868      	ldr	r0, [pc, #416]	@ (8005b2c <main+0x59bc>)
 800598a:	f002 fa20 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800598e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005992:	2b01      	cmp	r3, #1
 8005994:	d827      	bhi.n	80059e6 <main+0x5876>
					time_date_buffer[input_index] = '6';
 8005996:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800599a:	3368      	adds	r3, #104	@ 0x68
 800599c:	443b      	add	r3, r7
 800599e:	2236      	movs	r2, #54	@ 0x36
 80059a0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80059a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80059a8:	3301      	adds	r3, #1
 80059aa:	3368      	adds	r3, #104	@ 0x68
 80059ac:	443b      	add	r3, r7
 80059ae:	2200      	movs	r2, #0
 80059b0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 80059b4:	4860      	ldr	r0, [pc, #384]	@ (8005b38 <main+0x59c8>)
 80059b6:	f002 fa4d 	bl	8007e54 <Str_Len>
 80059ba:	4603      	mov	r3, r0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005b38 <main+0x59c8>)
 80059c6:	2101      	movs	r1, #1
 80059c8:	4858      	ldr	r0, [pc, #352]	@ (8005b2c <main+0x59bc>)
 80059ca:	f002 f9d6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80059ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80059d2:	3301      	adds	r3, #1
 80059d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80059d8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80059dc:	461a      	mov	r2, r3
 80059de:	2101      	movs	r1, #1
 80059e0:	4852      	ldr	r0, [pc, #328]	@ (8005b2c <main+0x59bc>)
 80059e2:	f002 f98e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80059e6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80059ea:	2301      	movs	r3, #1
 80059ec:	2101      	movs	r1, #1
 80059ee:	484f      	ldr	r0, [pc, #316]	@ (8005b2c <main+0x59bc>)
 80059f0:	f002 f9ed 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80059f4:	f002 fb94 	bl	8008120 <HAL_GetTick>
 80059f8:	4603      	mov	r3, r0
 80059fa:	33fa      	adds	r3, #250	@ 0xfa
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059fe:	e0ea      	b.n	8005bd6 <main+0x5a66>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8005a00:	2108      	movs	r1, #8
 8005a02:	4849      	ldr	r0, [pc, #292]	@ (8005b28 <main+0x59b8>)
 8005a04:	f002 fb1c 	bl	8008040 <Keypad_Get_Key>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d042      	beq.n	8005a94 <main+0x5924>
					&& (current_tick >= general_delay)) {
 8005a0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d33e      	bcc.n	8005a94 <main+0x5924>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005a16:	2300      	movs	r3, #0
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	4843      	ldr	r0, [pc, #268]	@ (8005b2c <main+0x59bc>)
 8005a1e:	f002 f9d6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005a22:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d827      	bhi.n	8005a7a <main+0x590a>
					time_date_buffer[input_index] = '7';
 8005a2a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005a2e:	3368      	adds	r3, #104	@ 0x68
 8005a30:	443b      	add	r3, r7
 8005a32:	2237      	movs	r2, #55	@ 0x37
 8005a34:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005a38:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	3368      	adds	r3, #104	@ 0x68
 8005a40:	443b      	add	r3, r7
 8005a42:	2200      	movs	r2, #0
 8005a44:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8005a48:	483c      	ldr	r0, [pc, #240]	@ (8005b3c <main+0x59cc>)
 8005a4a:	f002 fa03 	bl	8007e54 <Str_Len>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	4b38      	ldr	r3, [pc, #224]	@ (8005b3c <main+0x59cc>)
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4833      	ldr	r0, [pc, #204]	@ (8005b2c <main+0x59bc>)
 8005a5e:	f002 f98c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005a62:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005a66:	3301      	adds	r3, #1
 8005a68:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005a6c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005a70:	461a      	mov	r2, r3
 8005a72:	2101      	movs	r1, #1
 8005a74:	482d      	ldr	r0, [pc, #180]	@ (8005b2c <main+0x59bc>)
 8005a76:	f002 f944 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005a7a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005a7e:	2301      	movs	r3, #1
 8005a80:	2101      	movs	r1, #1
 8005a82:	482a      	ldr	r0, [pc, #168]	@ (8005b2c <main+0x59bc>)
 8005a84:	f002 f9a3 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005a88:	f002 fb4a 	bl	8008120 <HAL_GetTick>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	33fa      	adds	r3, #250	@ 0xfa
 8005a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a92:	e0a0      	b.n	8005bd6 <main+0x5a66>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8005a94:	2109      	movs	r1, #9
 8005a96:	4824      	ldr	r0, [pc, #144]	@ (8005b28 <main+0x59b8>)
 8005a98:	f002 fad2 	bl	8008040 <Keypad_Get_Key>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d050      	beq.n	8005b44 <main+0x59d4>
					&& (current_tick >= general_delay)) {
 8005aa2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d34c      	bcc.n	8005b44 <main+0x59d4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2200      	movs	r2, #0
 8005aae:	2101      	movs	r1, #1
 8005ab0:	481e      	ldr	r0, [pc, #120]	@ (8005b2c <main+0x59bc>)
 8005ab2:	f002 f98c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005ab6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d827      	bhi.n	8005b0e <main+0x599e>
					time_date_buffer[input_index] = '8';
 8005abe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005ac2:	3368      	adds	r3, #104	@ 0x68
 8005ac4:	443b      	add	r3, r7
 8005ac6:	2238      	movs	r2, #56	@ 0x38
 8005ac8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005acc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	3368      	adds	r3, #104	@ 0x68
 8005ad4:	443b      	add	r3, r7
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8005adc:	4818      	ldr	r0, [pc, #96]	@ (8005b40 <main+0x59d0>)
 8005ade:	f002 f9b9 	bl	8007e54 <Str_Len>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <main+0x59d0>)
 8005aee:	2101      	movs	r1, #1
 8005af0:	480e      	ldr	r0, [pc, #56]	@ (8005b2c <main+0x59bc>)
 8005af2:	f002 f942 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005af6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005afa:	3301      	adds	r3, #1
 8005afc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005b00:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005b04:	461a      	mov	r2, r3
 8005b06:	2101      	movs	r1, #1
 8005b08:	4808      	ldr	r0, [pc, #32]	@ (8005b2c <main+0x59bc>)
 8005b0a:	f002 f8fa 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005b0e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005b12:	2301      	movs	r3, #1
 8005b14:	2101      	movs	r1, #1
 8005b16:	4805      	ldr	r0, [pc, #20]	@ (8005b2c <main+0x59bc>)
 8005b18:	f002 f959 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005b1c:	f002 fb00 	bl	8008120 <HAL_GetTick>
 8005b20:	4603      	mov	r3, r0
 8005b22:	33fa      	adds	r3, #250	@ 0xfa
 8005b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b26:	e056      	b.n	8005bd6 <main+0x5a66>
 8005b28:	20000000 	.word	0x20000000
 8005b2c:	2000001c 	.word	0x2000001c
 8005b30:	0800be1c 	.word	0x0800be1c
 8005b34:	0800be20 	.word	0x0800be20
 8005b38:	0800be24 	.word	0x0800be24
 8005b3c:	0800be28 	.word	0x0800be28
 8005b40:	0800be2c 	.word	0x0800be2c

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8005b44:	210a      	movs	r1, #10
 8005b46:	48aa      	ldr	r0, [pc, #680]	@ (8005df0 <main+0x5c80>)
 8005b48:	f002 fa7a 	bl	8008040 <Keypad_Get_Key>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d041      	beq.n	8005bd6 <main+0x5a66>
					&& (current_tick >= general_delay)) {
 8005b52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d33d      	bcc.n	8005bd6 <main+0x5a66>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2101      	movs	r1, #1
 8005b60:	48a4      	ldr	r0, [pc, #656]	@ (8005df4 <main+0x5c84>)
 8005b62:	f002 f934 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8005b66:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d827      	bhi.n	8005bbe <main+0x5a4e>
					time_date_buffer[input_index] = '9';
 8005b6e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005b72:	3368      	adds	r3, #104	@ 0x68
 8005b74:	443b      	add	r3, r7
 8005b76:	2239      	movs	r2, #57	@ 0x39
 8005b78:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8005b7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005b80:	3301      	adds	r3, #1
 8005b82:	3368      	adds	r3, #104	@ 0x68
 8005b84:	443b      	add	r3, r7
 8005b86:	2200      	movs	r2, #0
 8005b88:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8005b8c:	489a      	ldr	r0, [pc, #616]	@ (8005df8 <main+0x5c88>)
 8005b8e:	f002 f961 	bl	8007e54 <Str_Len>
 8005b92:	4603      	mov	r3, r0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4b96      	ldr	r3, [pc, #600]	@ (8005df8 <main+0x5c88>)
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	4894      	ldr	r0, [pc, #592]	@ (8005df4 <main+0x5c84>)
 8005ba2:	f002 f8ea 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8005ba6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005baa:	3301      	adds	r3, #1
 8005bac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8005bb0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	488e      	ldr	r0, [pc, #568]	@ (8005df4 <main+0x5c84>)
 8005bba:	f002 f8a2 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005bbe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	488b      	ldr	r0, [pc, #556]	@ (8005df4 <main+0x5c84>)
 8005bc8:	f002 f901 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8005bcc:	f002 faa8 	bl	8008120 <HAL_GetTick>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	33fa      	adds	r3, #250	@ 0xfa
 8005bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for hour validity (state 47)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8005bd6:	210f      	movs	r1, #15
 8005bd8:	4885      	ldr	r0, [pc, #532]	@ (8005df0 <main+0x5c80>)
 8005bda:	f002 fa31 	bl	8008040 <Keypad_Get_Key>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d020      	beq.n	8005c26 <main+0x5ab6>
					&& (current_tick >= general_delay)) {
 8005be4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d31c      	bcc.n	8005c26 <main+0x5ab6>

				Alcd_Clear(&lcd);
 8005bec:	4881      	ldr	r0, [pc, #516]	@ (8005df4 <main+0x5c84>)
 8005bee:	f002 f8dd 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8005bf2:	887b      	ldrh	r3, [r7, #2]
 8005bf4:	f107 001c 	add.w	r0, r7, #28
 8005bf8:	4a80      	ldr	r2, [pc, #512]	@ (8005dfc <main+0x5c8c>)
 8005bfa:	2132      	movs	r1, #50	@ 0x32
 8005bfc:	f005 fbaa 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8005c00:	f107 031c 	add.w	r3, r7, #28
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fa faab 	bl	8000160 <strlen>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f107 021c 	add.w	r2, r7, #28
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	2101      	movs	r1, #1
 8005c1a:	4876      	ldr	r0, [pc, #472]	@ (8005df4 <main+0x5c84>)
 8005c1c:	f002 f8ad 	bl	8007d7a <Alcd_PutAt_n>

				status = 47;
 8005c20:	232f      	movs	r3, #47	@ 0x2f
 8005c22:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8005c26:	f002 fa7b 	bl	8008120 <HAL_GetTick>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	33fa      	adds	r3, #250	@ 0xfa
 8005c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 46) && (current_tick >= general_delay)) {
 8005c30:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c36:	f040 80d0 	bne.w	8005dda <main+0x5c6a>
 8005c3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	f4bf ac82 	bcs.w	8005548 <main+0x53d8>
		}

		//hours validation phase
		while ((status == 47) && (current_tick >= general_delay)) {
 8005c44:	e0c9      	b.n	8005dda <main+0x5c6a>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005c46:	f002 fa6b 	bl	8008120 <HAL_GetTick>
 8005c4a:	6638      	str	r0, [r7, #96]	@ 0x60
			input_index = 0;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

			Alcd_Clear(&lcd);
 8005c52:	4868      	ldr	r0, [pc, #416]	@ (8005df4 <main+0x5c84>)
 8005c54:	f002 f8aa 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005c58:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005c5c:	f107 001c 	add.w	r0, r7, #28
 8005c60:	4a66      	ldr	r2, [pc, #408]	@ (8005dfc <main+0x5c8c>)
 8005c62:	2132      	movs	r1, #50	@ 0x32
 8005c64:	f005 fb76 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005c68:	f107 031c 	add.w	r3, r7, #28
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fa77 	bl	8000160 <strlen>
 8005c72:	4603      	mov	r3, r0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f107 021c 	add.w	r2, r7, #28
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	220e      	movs	r2, #14
 8005c80:	2100      	movs	r1, #0
 8005c82:	485c      	ldr	r0, [pc, #368]	@ (8005df4 <main+0x5c84>)
 8005c84:	f002 f879 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f005 fad9 	bl	800b242 <atoi>
 8005c90:	4603      	mov	r3, r0
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	807b      	strh	r3, [r7, #2]

			//in case of 12h format
			if (CLK.format == 1) {
 8005c96:	4b5a      	ldr	r3, [pc, #360]	@ (8005e00 <main+0x5c90>)
 8005c98:	7c5b      	ldrb	r3, [r3, #17]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d045      	beq.n	8005d30 <main+0x5bc0>

				//check if time is within rang 1 to 12
				if (buffer > 0 && buffer < 13) {
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01a      	beq.n	8005ce0 <main+0x5b70>
 8005caa:	887b      	ldrh	r3, [r7, #2]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d817      	bhi.n	8005ce0 <main+0x5b70>

					//move to the previous menu
					status = 23;
 8005cb0:	2317      	movs	r3, #23
 8005cb2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					dose_h = buffer;
 8005cb6:	887b      	ldrh	r3, [r7, #2]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

					input_index = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2101      	movs	r1, #1
 8005cca:	484a      	ldr	r0, [pc, #296]	@ (8005df4 <main+0x5c84>)
 8005ccc:	f002 f87f 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005cd0:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4846      	ldr	r0, [pc, #280]	@ (8005df4 <main+0x5c84>)
 8005cda:	f002 f878 	bl	8007dce <Alcd_Display_Control>
 8005cde:	e027      	b.n	8005d30 <main+0x5bc0>

				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8005ce0:	4848      	ldr	r0, [pc, #288]	@ (8005e04 <main+0x5c94>)
 8005ce2:	f002 f8b7 	bl	8007e54 <Str_Len>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4b45      	ldr	r3, [pc, #276]	@ (8005e04 <main+0x5c94>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4840      	ldr	r0, [pc, #256]	@ (8005df4 <main+0x5c84>)
 8005cf4:	f002 f841 	bl	8007d7a <Alcd_PutAt_n>
					delay_flag = 1;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
					input_index = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	2101      	movs	r1, #1
 8005d0a:	483a      	ldr	r0, [pc, #232]	@ (8005df4 <main+0x5c84>)
 8005d0c:	f002 f85f 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005d10:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005d14:	2301      	movs	r3, #1
 8005d16:	2101      	movs	r1, #1
 8005d18:	4836      	ldr	r0, [pc, #216]	@ (8005df4 <main+0x5c84>)
 8005d1a:	f002 f858 	bl	8007dce <Alcd_Display_Control>

					//return to entering hours
					status = 46;
 8005d1e:	232e      	movs	r3, #46	@ 0x2e
 8005d20:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8005d24:	f002 f9fc 	bl	8008120 <HAL_GetTick>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
			}

			//in case of 24h format
			if (CLK.format == 0) {
 8005d30:	4b33      	ldr	r3, [pc, #204]	@ (8005e00 <main+0x5c90>)
 8005d32:	7c5b      	ldrb	r3, [r3, #17]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d142      	bne.n	8005dc4 <main+0x5c54>

				//check if time is within rang 0 to 24
				if (buffer >= 0 && buffer < 25) {
 8005d3e:	887b      	ldrh	r3, [r7, #2]
 8005d40:	2b18      	cmp	r3, #24
 8005d42:	d817      	bhi.n	8005d74 <main+0x5c04>

					//move to menu
					status = 23;
 8005d44:	2317      	movs	r3, #23
 8005d46:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					//set the hours to the value
					dose_h = buffer;
 8005d4a:	887b      	ldrh	r3, [r7, #2]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

					input_index = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4825      	ldr	r0, [pc, #148]	@ (8005df4 <main+0x5c84>)
 8005d60:	f002 f835 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005d64:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005d68:	2301      	movs	r3, #1
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4821      	ldr	r0, [pc, #132]	@ (8005df4 <main+0x5c84>)
 8005d6e:	f002 f82e 	bl	8007dce <Alcd_Display_Control>
 8005d72:	e027      	b.n	8005dc4 <main+0x5c54>
				} else {
					Alcd_PutAt(&lcd, 0, 0, "invalid");
 8005d74:	4823      	ldr	r0, [pc, #140]	@ (8005e04 <main+0x5c94>)
 8005d76:	f002 f86d 	bl	8007e54 <Str_Len>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <main+0x5c94>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	481b      	ldr	r0, [pc, #108]	@ (8005df4 <main+0x5c84>)
 8005d88:	f001 fff7 	bl	8007d7a <Alcd_PutAt_n>
					delay_flag = 1;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

					input_index = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					//turn off the blinking
					Alcd_Display_Control(&lcd, 1, 0, 0);
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4815      	ldr	r0, [pc, #84]	@ (8005df4 <main+0x5c84>)
 8005da0:	f002 f815 	bl	8007dce <Alcd_Display_Control>
					//turn on the blinking again
					Alcd_Display_Control(&lcd, 1, input_index, 1);
 8005da4:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8005da8:	2301      	movs	r3, #1
 8005daa:	2101      	movs	r1, #1
 8005dac:	4811      	ldr	r0, [pc, #68]	@ (8005df4 <main+0x5c84>)
 8005dae:	f002 f80e 	bl	8007dce <Alcd_Display_Control>
					//return to entering hours
					status = 46;
 8005db2:	232e      	movs	r3, #46	@ 0x2e
 8005db4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

					general_delay = HAL_GetTick() + 1000;
 8005db8:	f002 f9b2 	bl	8008120 <HAL_GetTick>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8005dc4:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d106      	bne.n	8005dda <main+0x5c6a>
 8005dcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d302      	bcc.n	8005dda <main+0x5c6a>

				delay_flag = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 47) && (current_tick >= general_delay)) {
 8005dda:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005dde:	2b2f      	cmp	r3, #47	@ 0x2f
 8005de0:	d17c      	bne.n	8005edc <main+0x5d6c>
 8005de2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de6:	429a      	cmp	r2, r3
 8005de8:	f4bf af2d 	bcs.w	8005c46 <main+0x5ad6>
			}

		}

		//save parameters? (state 48)
		while ((status == 48) && (current_tick >= general_delay)) {
 8005dec:	e076      	b.n	8005edc <main+0x5d6c>
 8005dee:	bf00      	nop
 8005df0:	20000000 	.word	0x20000000
 8005df4:	2000001c 	.word	0x2000001c
 8005df8:	0800be30 	.word	0x0800be30
 8005dfc:	0800bd1c 	.word	0x0800bd1c
 8005e00:	20000150 	.word	0x20000150
 8005e04:	0800be34 	.word	0x0800be34

			//get the current tick number
			current_tick = HAL_GetTick();
 8005e08:	f002 f98a 	bl	8008120 <HAL_GetTick>
 8005e0c:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8005e0e:	489f      	ldr	r0, [pc, #636]	@ (800608c <main+0x5f1c>)
 8005e10:	f001 ffcc 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "save?");
 8005e14:	489e      	ldr	r0, [pc, #632]	@ (8006090 <main+0x5f20>)
 8005e16:	f002 f81d 	bl	8007e54 <Str_Len>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	4b9b      	ldr	r3, [pc, #620]	@ (8006090 <main+0x5f20>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	2100      	movs	r1, #0
 8005e26:	4899      	ldr	r0, [pc, #612]	@ (800608c <main+0x5f1c>)
 8005e28:	f001 ffa7 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005e2c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005e30:	f107 001c 	add.w	r0, r7, #28
 8005e34:	4a97      	ldr	r2, [pc, #604]	@ (8006094 <main+0x5f24>)
 8005e36:	2132      	movs	r1, #50	@ 0x32
 8005e38:	f005 fa8c 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005e3c:	f107 031c 	add.w	r3, r7, #28
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa f98d 	bl	8000160 <strlen>
 8005e46:	4603      	mov	r3, r0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f107 021c 	add.w	r2, r7, #28
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	220e      	movs	r2, #14
 8005e54:	2100      	movs	r1, #0
 8005e56:	488d      	ldr	r0, [pc, #564]	@ (800608c <main+0x5f1c>)
 8005e58:	f001 ff8f 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8005e5c:	488e      	ldr	r0, [pc, #568]	@ (8006098 <main+0x5f28>)
 8005e5e:	f002 f853 	bl	8007f08 <Keypad_Refresh>

			//in case of yes
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8005e62:	210f      	movs	r1, #15
 8005e64:	488c      	ldr	r0, [pc, #560]	@ (8006098 <main+0x5f28>)
 8005e66:	f002 f8eb 	bl	8008040 <Keypad_Get_Key>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d022      	beq.n	8005eb6 <main+0x5d46>
					&& (current_tick >= general_delay)) {
 8005e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d31e      	bcc.n	8005eb6 <main+0x5d46>

				//save the parameters
				eeprom24c32_write(&memory, &dose_h, dosing_time_hours);
 8005e78:	4b88      	ldr	r3, [pc, #544]	@ (800609c <main+0x5f2c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	f107 035a 	add.w	r3, r7, #90	@ 0x5a
 8005e82:	4619      	mov	r1, r3
 8005e84:	4885      	ldr	r0, [pc, #532]	@ (800609c <main+0x5f2c>)
 8005e86:	f001 fba9 	bl	80075dc <eeprom24c32_write>
				eeprom24c32_write(&memory, &dose_m, dosing_time_minutes);
 8005e8a:	4b84      	ldr	r3, [pc, #528]	@ (800609c <main+0x5f2c>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	f107 0359 	add.w	r3, r7, #89	@ 0x59
 8005e94:	4619      	mov	r1, r3
 8005e96:	4881      	ldr	r0, [pc, #516]	@ (800609c <main+0x5f2c>)
 8005e98:	f001 fba0 	bl	80075dc <eeprom24c32_write>
				eeprom24c32_write(&memory, &dose_s, dosing_time_seconds);
 8005e9c:	4b7f      	ldr	r3, [pc, #508]	@ (800609c <main+0x5f2c>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	487c      	ldr	r0, [pc, #496]	@ (800609c <main+0x5f2c>)
 8005eaa:	f001 fb97 	bl	80075dc <eeprom24c32_write>
				status = 21;
 8005eae:	2315      	movs	r3, #21
 8005eb0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005eb4:	e00d      	b.n	8005ed2 <main+0x5d62>

			}

			//no is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8005eb6:	210e      	movs	r1, #14
 8005eb8:	4877      	ldr	r0, [pc, #476]	@ (8006098 <main+0x5f28>)
 8005eba:	f002 f8c1 	bl	8008040 <Keypad_Get_Key>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <main+0x5d62>
					&& (current_tick >= general_delay)) {
 8005ec4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <main+0x5d62>

				status = 21;
 8005ecc:	2315      	movs	r3, #21
 8005ece:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8005ed2:	f002 f925 	bl	8008120 <HAL_GetTick>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	33fa      	adds	r3, #250	@ 0xfa
 8005eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 48) && (current_tick >= general_delay)) {
 8005edc:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005ee0:	2b30      	cmp	r3, #48	@ 0x30
 8005ee2:	f040 8081 	bne.w	8005fe8 <main+0x5e78>
 8005ee6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d28c      	bcs.n	8005e08 <main+0x5c98>
		}
		
		//extended edit parameters menu (state 49)
		while ((status == 49) && (current_tick >= general_delay)) {
 8005eee:	e07b      	b.n	8005fe8 <main+0x5e78>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005ef0:	f002 f916 	bl	8008120 <HAL_GetTick>
 8005ef4:	6638      	str	r0, [r7, #96]	@ 0x60

			Alcd_Clear(&lcd);
 8005ef6:	4865      	ldr	r0, [pc, #404]	@ (800608c <main+0x5f1c>)
 8005ef8:	f001 ff58 	bl	8007dac <Alcd_Clear>
			Alcd_PutAt(&lcd, 0, 0, "3: minutes");
 8005efc:	4868      	ldr	r0, [pc, #416]	@ (80060a0 <main+0x5f30>)
 8005efe:	f001 ffa9 	bl	8007e54 <Str_Len>
 8005f02:	4603      	mov	r3, r0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4b65      	ldr	r3, [pc, #404]	@ (80060a0 <main+0x5f30>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	485f      	ldr	r0, [pc, #380]	@ (800608c <main+0x5f1c>)
 8005f10:	f001 ff33 	bl	8007d7a <Alcd_PutAt_n>
			Alcd_PutAt(&lcd, 1, 0, "4: seconds");
 8005f14:	4863      	ldr	r0, [pc, #396]	@ (80060a4 <main+0x5f34>)
 8005f16:	f001 ff9d 	bl	8007e54 <Str_Len>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	4b60      	ldr	r3, [pc, #384]	@ (80060a4 <main+0x5f34>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	2101      	movs	r1, #1
 8005f26:	4859      	ldr	r0, [pc, #356]	@ (800608c <main+0x5f1c>)
 8005f28:	f001 ff27 	bl	8007d7a <Alcd_PutAt_n>
			snprintf(timeString, sizeof(timeString), "%02d", status);
 8005f2c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005f30:	f107 001c 	add.w	r0, r7, #28
 8005f34:	4a57      	ldr	r2, [pc, #348]	@ (8006094 <main+0x5f24>)
 8005f36:	2132      	movs	r1, #50	@ 0x32
 8005f38:	f005 fa0c 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8005f3c:	f107 031c 	add.w	r3, r7, #28
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa f90d 	bl	8000160 <strlen>
 8005f46:	4603      	mov	r3, r0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f107 021c 	add.w	r2, r7, #28
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	220e      	movs	r2, #14
 8005f54:	2100      	movs	r1, #0
 8005f56:	484d      	ldr	r0, [pc, #308]	@ (800608c <main+0x5f1c>)
 8005f58:	f001 ff0f 	bl	8007d7a <Alcd_PutAt_n>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8005f5c:	484e      	ldr	r0, [pc, #312]	@ (8006098 <main+0x5f28>)
 8005f5e:	f001 ffd3 	bl	8007f08 <Keypad_Refresh>

			//in case 3 is selected -> edit minutes
			if (Keypad_Get_Key(&kp, kp_button_3)
 8005f62:	2102      	movs	r1, #2
 8005f64:	484c      	ldr	r0, [pc, #304]	@ (8006098 <main+0x5f28>)
 8005f66:	f002 f86b 	bl	8008040 <Keypad_Get_Key>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <main+0x5e10>
					&& (current_tick >= general_delay)) {
 8005f70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d303      	bcc.n	8005f80 <main+0x5e10>

				status = 50;
 8005f78:	2332      	movs	r3, #50	@ 0x32
 8005f7a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005f7e:	e02e      	b.n	8005fde <main+0x5e6e>

			}

			//4 is selected -> enter seconds
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8005f80:	2104      	movs	r1, #4
 8005f82:	4845      	ldr	r0, [pc, #276]	@ (8006098 <main+0x5f28>)
 8005f84:	f002 f85c 	bl	8008040 <Keypad_Get_Key>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <main+0x5e34>
					&& (current_tick >= general_delay)) {
 8005f8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d306      	bcc.n	8005fa4 <main+0x5e34>


				Alcd_Clear(&lcd);
 8005f96:	483d      	ldr	r0, [pc, #244]	@ (800608c <main+0x5f1c>)
 8005f98:	f001 ff08 	bl	8007dac <Alcd_Clear>
				status = 51;
 8005f9c:	2333      	movs	r3, #51	@ 0x33
 8005f9e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005fa2:	e01c      	b.n	8005fde <main+0x5e6e>

			}

			//back is selected
			else if (Keypad_Get_Key(&kp, kp_button_no_back)
 8005fa4:	210e      	movs	r1, #14
 8005fa6:	483c      	ldr	r0, [pc, #240]	@ (8006098 <main+0x5f28>)
 8005fa8:	f002 f84a 	bl	8008040 <Keypad_Get_Key>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <main+0x5e52>
					&& (current_tick >= general_delay)) {
 8005fb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d303      	bcc.n	8005fc2 <main+0x5e52>

				status = 23;
 8005fba:	2317      	movs	r3, #23
 8005fbc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8005fc0:	e00d      	b.n	8005fde <main+0x5e6e>

			}
			
			//previous is selected
			else if (Keypad_Get_Key(&kp, kp_button_previous)
 8005fc2:	2107      	movs	r1, #7
 8005fc4:	4834      	ldr	r0, [pc, #208]	@ (8006098 <main+0x5f28>)
 8005fc6:	f002 f83b 	bl	8008040 <Keypad_Get_Key>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d006      	beq.n	8005fde <main+0x5e6e>
					&& (current_tick >= general_delay)) {
 8005fd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d302      	bcc.n	8005fde <main+0x5e6e>

				status = 23;
 8005fd8:	2317      	movs	r3, #23
 8005fda:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			general_delay = HAL_GetTick() + 250;
 8005fde:	f002 f89f 	bl	8008120 <HAL_GetTick>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	33fa      	adds	r3, #250	@ 0xfa
 8005fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 49) && (current_tick >= general_delay)) {
 8005fe8:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8005fec:	2b31      	cmp	r3, #49	@ 0x31
 8005fee:	f040 8387 	bne.w	8006700 <main+0x6590>
 8005ff2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	f4bf af7a 	bcs.w	8005ef0 <main+0x5d80>
		}
		
		//entering the minutes state (50)
		while ((status == 50) && (current_tick >= general_delay)) {
 8005ffc:	e380      	b.n	8006700 <main+0x6590>

			//get the current tick number
			current_tick = HAL_GetTick();
 8005ffe:	f002 f88f 	bl	8008120 <HAL_GetTick>
 8006002:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter minutes");
 8006004:	4828      	ldr	r0, [pc, #160]	@ (80060a8 <main+0x5f38>)
 8006006:	f001 ff25 	bl	8007e54 <Str_Len>
 800600a:	4603      	mov	r3, r0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	4b25      	ldr	r3, [pc, #148]	@ (80060a8 <main+0x5f38>)
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	481d      	ldr	r0, [pc, #116]	@ (800608c <main+0x5f1c>)
 8006018:	f001 feaf 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 800601c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006020:	f107 001c 	add.w	r0, r7, #28
 8006024:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <main+0x5f24>)
 8006026:	2132      	movs	r1, #50	@ 0x32
 8006028:	f005 f994 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 800602c:	f107 031c 	add.w	r3, r7, #28
 8006030:	4618      	mov	r0, r3
 8006032:	f7fa f895 	bl	8000160 <strlen>
 8006036:	4603      	mov	r3, r0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f107 021c 	add.w	r2, r7, #28
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	220e      	movs	r2, #14
 8006044:	2100      	movs	r1, #0
 8006046:	4811      	ldr	r0, [pc, #68]	@ (800608c <main+0x5f1c>)
 8006048:	f001 fe97 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 800604c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006050:	461a      	mov	r2, r3
 8006052:	2101      	movs	r1, #1
 8006054:	480d      	ldr	r0, [pc, #52]	@ (800608c <main+0x5f1c>)
 8006056:	f001 fe54 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 800605a:	2301      	movs	r3, #1
 800605c:	2201      	movs	r2, #1
 800605e:	2101      	movs	r1, #1
 8006060:	480a      	ldr	r0, [pc, #40]	@ (800608c <main+0x5f1c>)
 8006062:	f001 feb4 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 8006066:	480c      	ldr	r0, [pc, #48]	@ (8006098 <main+0x5f28>)
 8006068:	f001 ff4e 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 800606c:	210e      	movs	r1, #14
 800606e:	480a      	ldr	r0, [pc, #40]	@ (8006098 <main+0x5f28>)
 8006070:	f001 ffe6 	bl	8008040 <Keypad_Get_Key>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <main+0x5f3c>
					&& (current_tick >= general_delay)) {
 800607a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800607c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800607e:	429a      	cmp	r2, r3
 8006080:	d314      	bcc.n	80060ac <main+0x5f3c>

				//back to previous menu
				status = 49;
 8006082:	2331      	movs	r3, #49	@ 0x31
 8006084:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8006088:	e30d      	b.n	80066a6 <main+0x6536>
 800608a:	bf00      	nop
 800608c:	2000001c 	.word	0x2000001c
 8006090:	0800bf14 	.word	0x0800bf14
 8006094:	0800bd1c 	.word	0x0800bd1c
 8006098:	20000000 	.word	0x20000000
 800609c:	20000168 	.word	0x20000168
 80060a0:	0800bf1c 	.word	0x0800bf1c
 80060a4:	0800bf28 	.word	0x0800bf28
 80060a8:	0800be3c 	.word	0x0800be3c

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80060ac:	210d      	movs	r1, #13
 80060ae:	48b8      	ldr	r0, [pc, #736]	@ (8006390 <main+0x6220>)
 80060b0:	f001 ffc6 	bl	8008040 <Keypad_Get_Key>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d042      	beq.n	8006140 <main+0x5fd0>
					&& (current_tick >= general_delay)) {
 80060ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80060bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060be:	429a      	cmp	r2, r3
 80060c0:	d33e      	bcc.n	8006140 <main+0x5fd0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80060c2:	2300      	movs	r3, #0
 80060c4:	2200      	movs	r2, #0
 80060c6:	2101      	movs	r1, #1
 80060c8:	48b2      	ldr	r0, [pc, #712]	@ (8006394 <main+0x6224>)
 80060ca:	f001 fe80 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80060ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d827      	bhi.n	8006126 <main+0x5fb6>
					time_date_buffer[input_index] = '0';
 80060d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80060da:	3368      	adds	r3, #104	@ 0x68
 80060dc:	443b      	add	r3, r7
 80060de:	2230      	movs	r2, #48	@ 0x30
 80060e0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80060e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80060e8:	3301      	adds	r3, #1
 80060ea:	3368      	adds	r3, #104	@ 0x68
 80060ec:	443b      	add	r3, r7
 80060ee:	2200      	movs	r2, #0
 80060f0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 80060f4:	48a8      	ldr	r0, [pc, #672]	@ (8006398 <main+0x6228>)
 80060f6:	f001 fead 	bl	8007e54 <Str_Len>
 80060fa:	4603      	mov	r3, r0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	4ba4      	ldr	r3, [pc, #656]	@ (8006398 <main+0x6228>)
 8006106:	2101      	movs	r1, #1
 8006108:	48a2      	ldr	r0, [pc, #648]	@ (8006394 <main+0x6224>)
 800610a:	f001 fe36 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800610e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006112:	3301      	adds	r3, #1
 8006114:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006118:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800611c:	461a      	mov	r2, r3
 800611e:	2101      	movs	r1, #1
 8006120:	489c      	ldr	r0, [pc, #624]	@ (8006394 <main+0x6224>)
 8006122:	f001 fdee 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006126:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800612a:	2301      	movs	r3, #1
 800612c:	2101      	movs	r1, #1
 800612e:	4899      	ldr	r0, [pc, #612]	@ (8006394 <main+0x6224>)
 8006130:	f001 fe4d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006134:	f001 fff4 	bl	8008120 <HAL_GetTick>
 8006138:	4603      	mov	r3, r0
 800613a:	33fa      	adds	r3, #250	@ 0xfa
 800613c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800613e:	e2b2      	b.n	80066a6 <main+0x6536>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 8006140:	2100      	movs	r1, #0
 8006142:	4893      	ldr	r0, [pc, #588]	@ (8006390 <main+0x6220>)
 8006144:	f001 ff7c 	bl	8008040 <Keypad_Get_Key>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d042      	beq.n	80061d4 <main+0x6064>
					&& (current_tick >= general_delay)) {
 800614e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006152:	429a      	cmp	r2, r3
 8006154:	d33e      	bcc.n	80061d4 <main+0x6064>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006156:	2300      	movs	r3, #0
 8006158:	2200      	movs	r2, #0
 800615a:	2101      	movs	r1, #1
 800615c:	488d      	ldr	r0, [pc, #564]	@ (8006394 <main+0x6224>)
 800615e:	f001 fe36 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006162:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006166:	2b01      	cmp	r3, #1
 8006168:	d827      	bhi.n	80061ba <main+0x604a>
					time_date_buffer[input_index] = '1';
 800616a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800616e:	3368      	adds	r3, #104	@ 0x68
 8006170:	443b      	add	r3, r7
 8006172:	2231      	movs	r2, #49	@ 0x31
 8006174:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006178:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800617c:	3301      	adds	r3, #1
 800617e:	3368      	adds	r3, #104	@ 0x68
 8006180:	443b      	add	r3, r7
 8006182:	2200      	movs	r2, #0
 8006184:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8006188:	4884      	ldr	r0, [pc, #528]	@ (800639c <main+0x622c>)
 800618a:	f001 fe63 	bl	8007e54 <Str_Len>
 800618e:	4603      	mov	r3, r0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4b80      	ldr	r3, [pc, #512]	@ (800639c <main+0x622c>)
 800619a:	2101      	movs	r1, #1
 800619c:	487d      	ldr	r0, [pc, #500]	@ (8006394 <main+0x6224>)
 800619e:	f001 fdec 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80061a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80061a6:	3301      	adds	r3, #1
 80061a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80061ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80061b0:	461a      	mov	r2, r3
 80061b2:	2101      	movs	r1, #1
 80061b4:	4877      	ldr	r0, [pc, #476]	@ (8006394 <main+0x6224>)
 80061b6:	f001 fda4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80061ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80061be:	2301      	movs	r3, #1
 80061c0:	2101      	movs	r1, #1
 80061c2:	4874      	ldr	r0, [pc, #464]	@ (8006394 <main+0x6224>)
 80061c4:	f001 fe03 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80061c8:	f001 ffaa 	bl	8008120 <HAL_GetTick>
 80061cc:	4603      	mov	r3, r0
 80061ce:	33fa      	adds	r3, #250	@ 0xfa
 80061d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061d2:	e268      	b.n	80066a6 <main+0x6536>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80061d4:	2101      	movs	r1, #1
 80061d6:	486e      	ldr	r0, [pc, #440]	@ (8006390 <main+0x6220>)
 80061d8:	f001 ff32 	bl	8008040 <Keypad_Get_Key>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d042      	beq.n	8006268 <main+0x60f8>
					&& (current_tick >= general_delay)) {
 80061e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80061e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d33e      	bcc.n	8006268 <main+0x60f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80061ea:	2300      	movs	r3, #0
 80061ec:	2200      	movs	r2, #0
 80061ee:	2101      	movs	r1, #1
 80061f0:	4868      	ldr	r0, [pc, #416]	@ (8006394 <main+0x6224>)
 80061f2:	f001 fdec 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80061f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d827      	bhi.n	800624e <main+0x60de>
					time_date_buffer[input_index] = '2';
 80061fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006202:	3368      	adds	r3, #104	@ 0x68
 8006204:	443b      	add	r3, r7
 8006206:	2232      	movs	r2, #50	@ 0x32
 8006208:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800620c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006210:	3301      	adds	r3, #1
 8006212:	3368      	adds	r3, #104	@ 0x68
 8006214:	443b      	add	r3, r7
 8006216:	2200      	movs	r2, #0
 8006218:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 800621c:	4860      	ldr	r0, [pc, #384]	@ (80063a0 <main+0x6230>)
 800621e:	f001 fe19 	bl	8007e54 <Str_Len>
 8006222:	4603      	mov	r3, r0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4b5c      	ldr	r3, [pc, #368]	@ (80063a0 <main+0x6230>)
 800622e:	2101      	movs	r1, #1
 8006230:	4858      	ldr	r0, [pc, #352]	@ (8006394 <main+0x6224>)
 8006232:	f001 fda2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006236:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800623a:	3301      	adds	r3, #1
 800623c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006240:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006244:	461a      	mov	r2, r3
 8006246:	2101      	movs	r1, #1
 8006248:	4852      	ldr	r0, [pc, #328]	@ (8006394 <main+0x6224>)
 800624a:	f001 fd5a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800624e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006252:	2301      	movs	r3, #1
 8006254:	2101      	movs	r1, #1
 8006256:	484f      	ldr	r0, [pc, #316]	@ (8006394 <main+0x6224>)
 8006258:	f001 fdb9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800625c:	f001 ff60 	bl	8008120 <HAL_GetTick>
 8006260:	4603      	mov	r3, r0
 8006262:	33fa      	adds	r3, #250	@ 0xfa
 8006264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006266:	e21e      	b.n	80066a6 <main+0x6536>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8006268:	2102      	movs	r1, #2
 800626a:	4849      	ldr	r0, [pc, #292]	@ (8006390 <main+0x6220>)
 800626c:	f001 fee8 	bl	8008040 <Keypad_Get_Key>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d042      	beq.n	80062fc <main+0x618c>
					&& (current_tick >= general_delay)) {
 8006276:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800627a:	429a      	cmp	r2, r3
 800627c:	d33e      	bcc.n	80062fc <main+0x618c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	2101      	movs	r1, #1
 8006284:	4843      	ldr	r0, [pc, #268]	@ (8006394 <main+0x6224>)
 8006286:	f001 fda2 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800628a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800628e:	2b01      	cmp	r3, #1
 8006290:	d827      	bhi.n	80062e2 <main+0x6172>
					time_date_buffer[input_index] = '3';
 8006292:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006296:	3368      	adds	r3, #104	@ 0x68
 8006298:	443b      	add	r3, r7
 800629a:	2233      	movs	r2, #51	@ 0x33
 800629c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80062a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062a4:	3301      	adds	r3, #1
 80062a6:	3368      	adds	r3, #104	@ 0x68
 80062a8:	443b      	add	r3, r7
 80062aa:	2200      	movs	r2, #0
 80062ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 80062b0:	483c      	ldr	r0, [pc, #240]	@ (80063a4 <main+0x6234>)
 80062b2:	f001 fdcf 	bl	8007e54 <Str_Len>
 80062b6:	4603      	mov	r3, r0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	4b38      	ldr	r3, [pc, #224]	@ (80063a4 <main+0x6234>)
 80062c2:	2101      	movs	r1, #1
 80062c4:	4833      	ldr	r0, [pc, #204]	@ (8006394 <main+0x6224>)
 80062c6:	f001 fd58 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80062ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062ce:	3301      	adds	r3, #1
 80062d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80062d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062d8:	461a      	mov	r2, r3
 80062da:	2101      	movs	r1, #1
 80062dc:	482d      	ldr	r0, [pc, #180]	@ (8006394 <main+0x6224>)
 80062de:	f001 fd10 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80062e2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80062e6:	2301      	movs	r3, #1
 80062e8:	2101      	movs	r1, #1
 80062ea:	482a      	ldr	r0, [pc, #168]	@ (8006394 <main+0x6224>)
 80062ec:	f001 fd6f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80062f0:	f001 ff16 	bl	8008120 <HAL_GetTick>
 80062f4:	4603      	mov	r3, r0
 80062f6:	33fa      	adds	r3, #250	@ 0xfa
 80062f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062fa:	e1d4      	b.n	80066a6 <main+0x6536>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 80062fc:	2104      	movs	r1, #4
 80062fe:	4824      	ldr	r0, [pc, #144]	@ (8006390 <main+0x6220>)
 8006300:	f001 fe9e 	bl	8008040 <Keypad_Get_Key>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d050      	beq.n	80063ac <main+0x623c>
					&& (current_tick >= general_delay)) {
 800630a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800630c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800630e:	429a      	cmp	r2, r3
 8006310:	d34c      	bcc.n	80063ac <main+0x623c>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006312:	2300      	movs	r3, #0
 8006314:	2200      	movs	r2, #0
 8006316:	2101      	movs	r1, #1
 8006318:	481e      	ldr	r0, [pc, #120]	@ (8006394 <main+0x6224>)
 800631a:	f001 fd58 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800631e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006322:	2b01      	cmp	r3, #1
 8006324:	d827      	bhi.n	8006376 <main+0x6206>
					time_date_buffer[input_index] = '4';
 8006326:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800632a:	3368      	adds	r3, #104	@ 0x68
 800632c:	443b      	add	r3, r7
 800632e:	2234      	movs	r2, #52	@ 0x34
 8006330:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006334:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006338:	3301      	adds	r3, #1
 800633a:	3368      	adds	r3, #104	@ 0x68
 800633c:	443b      	add	r3, r7
 800633e:	2200      	movs	r2, #0
 8006340:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8006344:	4818      	ldr	r0, [pc, #96]	@ (80063a8 <main+0x6238>)
 8006346:	f001 fd85 	bl	8007e54 <Str_Len>
 800634a:	4603      	mov	r3, r0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4b14      	ldr	r3, [pc, #80]	@ (80063a8 <main+0x6238>)
 8006356:	2101      	movs	r1, #1
 8006358:	480e      	ldr	r0, [pc, #56]	@ (8006394 <main+0x6224>)
 800635a:	f001 fd0e 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800635e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006362:	3301      	adds	r3, #1
 8006364:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006368:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800636c:	461a      	mov	r2, r3
 800636e:	2101      	movs	r1, #1
 8006370:	4808      	ldr	r0, [pc, #32]	@ (8006394 <main+0x6224>)
 8006372:	f001 fcc6 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006376:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800637a:	2301      	movs	r3, #1
 800637c:	2101      	movs	r1, #1
 800637e:	4805      	ldr	r0, [pc, #20]	@ (8006394 <main+0x6224>)
 8006380:	f001 fd25 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006384:	f001 fecc 	bl	8008120 <HAL_GetTick>
 8006388:	4603      	mov	r3, r0
 800638a:	33fa      	adds	r3, #250	@ 0xfa
 800638c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800638e:	e18a      	b.n	80066a6 <main+0x6536>
 8006390:	20000000 	.word	0x20000000
 8006394:	2000001c 	.word	0x2000001c
 8006398:	0800be0c 	.word	0x0800be0c
 800639c:	0800be10 	.word	0x0800be10
 80063a0:	0800be14 	.word	0x0800be14
 80063a4:	0800be18 	.word	0x0800be18
 80063a8:	0800be1c 	.word	0x0800be1c

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 80063ac:	2105      	movs	r1, #5
 80063ae:	4893      	ldr	r0, [pc, #588]	@ (80065fc <main+0x648c>)
 80063b0:	f001 fe46 	bl	8008040 <Keypad_Get_Key>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d042      	beq.n	8006440 <main+0x62d0>
					&& (current_tick >= general_delay)) {
 80063ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063be:	429a      	cmp	r2, r3
 80063c0:	d33e      	bcc.n	8006440 <main+0x62d0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80063c2:	2300      	movs	r3, #0
 80063c4:	2200      	movs	r2, #0
 80063c6:	2101      	movs	r1, #1
 80063c8:	488d      	ldr	r0, [pc, #564]	@ (8006600 <main+0x6490>)
 80063ca:	f001 fd00 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80063ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d827      	bhi.n	8006426 <main+0x62b6>
					time_date_buffer[input_index] = '5';
 80063d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80063da:	3368      	adds	r3, #104	@ 0x68
 80063dc:	443b      	add	r3, r7
 80063de:	2235      	movs	r2, #53	@ 0x35
 80063e0:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80063e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80063e8:	3301      	adds	r3, #1
 80063ea:	3368      	adds	r3, #104	@ 0x68
 80063ec:	443b      	add	r3, r7
 80063ee:	2200      	movs	r2, #0
 80063f0:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 80063f4:	4883      	ldr	r0, [pc, #524]	@ (8006604 <main+0x6494>)
 80063f6:	f001 fd2d 	bl	8007e54 <Str_Len>
 80063fa:	4603      	mov	r3, r0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	4b7f      	ldr	r3, [pc, #508]	@ (8006604 <main+0x6494>)
 8006406:	2101      	movs	r1, #1
 8006408:	487d      	ldr	r0, [pc, #500]	@ (8006600 <main+0x6490>)
 800640a:	f001 fcb6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800640e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006412:	3301      	adds	r3, #1
 8006414:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006418:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800641c:	461a      	mov	r2, r3
 800641e:	2101      	movs	r1, #1
 8006420:	4877      	ldr	r0, [pc, #476]	@ (8006600 <main+0x6490>)
 8006422:	f001 fc6e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006426:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800642a:	2301      	movs	r3, #1
 800642c:	2101      	movs	r1, #1
 800642e:	4874      	ldr	r0, [pc, #464]	@ (8006600 <main+0x6490>)
 8006430:	f001 fccd 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006434:	f001 fe74 	bl	8008120 <HAL_GetTick>
 8006438:	4603      	mov	r3, r0
 800643a:	33fa      	adds	r3, #250	@ 0xfa
 800643c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800643e:	e132      	b.n	80066a6 <main+0x6536>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8006440:	2106      	movs	r1, #6
 8006442:	486e      	ldr	r0, [pc, #440]	@ (80065fc <main+0x648c>)
 8006444:	f001 fdfc 	bl	8008040 <Keypad_Get_Key>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d042      	beq.n	80064d4 <main+0x6364>
					&& (current_tick >= general_delay)) {
 800644e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006452:	429a      	cmp	r2, r3
 8006454:	d33e      	bcc.n	80064d4 <main+0x6364>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006456:	2300      	movs	r3, #0
 8006458:	2200      	movs	r2, #0
 800645a:	2101      	movs	r1, #1
 800645c:	4868      	ldr	r0, [pc, #416]	@ (8006600 <main+0x6490>)
 800645e:	f001 fcb6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006462:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006466:	2b01      	cmp	r3, #1
 8006468:	d827      	bhi.n	80064ba <main+0x634a>
					time_date_buffer[input_index] = '6';
 800646a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800646e:	3368      	adds	r3, #104	@ 0x68
 8006470:	443b      	add	r3, r7
 8006472:	2236      	movs	r2, #54	@ 0x36
 8006474:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006478:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800647c:	3301      	adds	r3, #1
 800647e:	3368      	adds	r3, #104	@ 0x68
 8006480:	443b      	add	r3, r7
 8006482:	2200      	movs	r2, #0
 8006484:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8006488:	485f      	ldr	r0, [pc, #380]	@ (8006608 <main+0x6498>)
 800648a:	f001 fce3 	bl	8007e54 <Str_Len>
 800648e:	4603      	mov	r3, r0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4b5b      	ldr	r3, [pc, #364]	@ (8006608 <main+0x6498>)
 800649a:	2101      	movs	r1, #1
 800649c:	4858      	ldr	r0, [pc, #352]	@ (8006600 <main+0x6490>)
 800649e:	f001 fc6c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80064a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80064a6:	3301      	adds	r3, #1
 80064a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80064ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80064b0:	461a      	mov	r2, r3
 80064b2:	2101      	movs	r1, #1
 80064b4:	4852      	ldr	r0, [pc, #328]	@ (8006600 <main+0x6490>)
 80064b6:	f001 fc24 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80064ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80064be:	2301      	movs	r3, #1
 80064c0:	2101      	movs	r1, #1
 80064c2:	484f      	ldr	r0, [pc, #316]	@ (8006600 <main+0x6490>)
 80064c4:	f001 fc83 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80064c8:	f001 fe2a 	bl	8008120 <HAL_GetTick>
 80064cc:	4603      	mov	r3, r0
 80064ce:	33fa      	adds	r3, #250	@ 0xfa
 80064d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064d2:	e0e8      	b.n	80066a6 <main+0x6536>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 80064d4:	2108      	movs	r1, #8
 80064d6:	4849      	ldr	r0, [pc, #292]	@ (80065fc <main+0x648c>)
 80064d8:	f001 fdb2 	bl	8008040 <Keypad_Get_Key>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d042      	beq.n	8006568 <main+0x63f8>
					&& (current_tick >= general_delay)) {
 80064e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d33e      	bcc.n	8006568 <main+0x63f8>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80064ea:	2300      	movs	r3, #0
 80064ec:	2200      	movs	r2, #0
 80064ee:	2101      	movs	r1, #1
 80064f0:	4843      	ldr	r0, [pc, #268]	@ (8006600 <main+0x6490>)
 80064f2:	f001 fc6c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80064f6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d827      	bhi.n	800654e <main+0x63de>
					time_date_buffer[input_index] = '7';
 80064fe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006502:	3368      	adds	r3, #104	@ 0x68
 8006504:	443b      	add	r3, r7
 8006506:	2237      	movs	r2, #55	@ 0x37
 8006508:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800650c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006510:	3301      	adds	r3, #1
 8006512:	3368      	adds	r3, #104	@ 0x68
 8006514:	443b      	add	r3, r7
 8006516:	2200      	movs	r2, #0
 8006518:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 800651c:	483b      	ldr	r0, [pc, #236]	@ (800660c <main+0x649c>)
 800651e:	f001 fc99 	bl	8007e54 <Str_Len>
 8006522:	4603      	mov	r3, r0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	4b37      	ldr	r3, [pc, #220]	@ (800660c <main+0x649c>)
 800652e:	2101      	movs	r1, #1
 8006530:	4833      	ldr	r0, [pc, #204]	@ (8006600 <main+0x6490>)
 8006532:	f001 fc22 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006536:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800653a:	3301      	adds	r3, #1
 800653c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006540:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006544:	461a      	mov	r2, r3
 8006546:	2101      	movs	r1, #1
 8006548:	482d      	ldr	r0, [pc, #180]	@ (8006600 <main+0x6490>)
 800654a:	f001 fbda 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800654e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006552:	2301      	movs	r3, #1
 8006554:	2101      	movs	r1, #1
 8006556:	482a      	ldr	r0, [pc, #168]	@ (8006600 <main+0x6490>)
 8006558:	f001 fc39 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800655c:	f001 fde0 	bl	8008120 <HAL_GetTick>
 8006560:	4603      	mov	r3, r0
 8006562:	33fa      	adds	r3, #250	@ 0xfa
 8006564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006566:	e09e      	b.n	80066a6 <main+0x6536>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8006568:	2109      	movs	r1, #9
 800656a:	4824      	ldr	r0, [pc, #144]	@ (80065fc <main+0x648c>)
 800656c:	f001 fd68 	bl	8008040 <Keypad_Get_Key>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d04e      	beq.n	8006614 <main+0x64a4>
					&& (current_tick >= general_delay)) {
 8006576:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006578:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800657a:	429a      	cmp	r2, r3
 800657c:	d34a      	bcc.n	8006614 <main+0x64a4>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800657e:	2300      	movs	r3, #0
 8006580:	2200      	movs	r2, #0
 8006582:	2101      	movs	r1, #1
 8006584:	481e      	ldr	r0, [pc, #120]	@ (8006600 <main+0x6490>)
 8006586:	f001 fc22 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800658a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800658e:	2b01      	cmp	r3, #1
 8006590:	d827      	bhi.n	80065e2 <main+0x6472>
					time_date_buffer[input_index] = '8';
 8006592:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006596:	3368      	adds	r3, #104	@ 0x68
 8006598:	443b      	add	r3, r7
 800659a:	2238      	movs	r2, #56	@ 0x38
 800659c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80065a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80065a4:	3301      	adds	r3, #1
 80065a6:	3368      	adds	r3, #104	@ 0x68
 80065a8:	443b      	add	r3, r7
 80065aa:	2200      	movs	r2, #0
 80065ac:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 80065b0:	4817      	ldr	r0, [pc, #92]	@ (8006610 <main+0x64a0>)
 80065b2:	f001 fc4f 	bl	8007e54 <Str_Len>
 80065b6:	4603      	mov	r3, r0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	4b13      	ldr	r3, [pc, #76]	@ (8006610 <main+0x64a0>)
 80065c2:	2101      	movs	r1, #1
 80065c4:	480e      	ldr	r0, [pc, #56]	@ (8006600 <main+0x6490>)
 80065c6:	f001 fbd8 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80065ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80065ce:	3301      	adds	r3, #1
 80065d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80065d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80065d8:	461a      	mov	r2, r3
 80065da:	2101      	movs	r1, #1
 80065dc:	4808      	ldr	r0, [pc, #32]	@ (8006600 <main+0x6490>)
 80065de:	f001 fb90 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80065e2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80065e6:	2301      	movs	r3, #1
 80065e8:	2101      	movs	r1, #1
 80065ea:	4805      	ldr	r0, [pc, #20]	@ (8006600 <main+0x6490>)
 80065ec:	f001 fbef 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80065f0:	f001 fd96 	bl	8008120 <HAL_GetTick>
 80065f4:	4603      	mov	r3, r0
 80065f6:	33fa      	adds	r3, #250	@ 0xfa
 80065f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fa:	e054      	b.n	80066a6 <main+0x6536>
 80065fc:	20000000 	.word	0x20000000
 8006600:	2000001c 	.word	0x2000001c
 8006604:	0800be20 	.word	0x0800be20
 8006608:	0800be24 	.word	0x0800be24
 800660c:	0800be28 	.word	0x0800be28
 8006610:	0800be2c 	.word	0x0800be2c

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8006614:	210a      	movs	r1, #10
 8006616:	48a2      	ldr	r0, [pc, #648]	@ (80068a0 <main+0x6730>)
 8006618:	f001 fd12 	bl	8008040 <Keypad_Get_Key>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d041      	beq.n	80066a6 <main+0x6536>
					&& (current_tick >= general_delay)) {
 8006622:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006626:	429a      	cmp	r2, r3
 8006628:	d33d      	bcc.n	80066a6 <main+0x6536>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800662a:	2300      	movs	r3, #0
 800662c:	2200      	movs	r2, #0
 800662e:	2101      	movs	r1, #1
 8006630:	489c      	ldr	r0, [pc, #624]	@ (80068a4 <main+0x6734>)
 8006632:	f001 fbcc 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006636:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800663a:	2b01      	cmp	r3, #1
 800663c:	d827      	bhi.n	800668e <main+0x651e>
					time_date_buffer[input_index] = '9';
 800663e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006642:	3368      	adds	r3, #104	@ 0x68
 8006644:	443b      	add	r3, r7
 8006646:	2239      	movs	r2, #57	@ 0x39
 8006648:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 800664c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006650:	3301      	adds	r3, #1
 8006652:	3368      	adds	r3, #104	@ 0x68
 8006654:	443b      	add	r3, r7
 8006656:	2200      	movs	r2, #0
 8006658:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 800665c:	4892      	ldr	r0, [pc, #584]	@ (80068a8 <main+0x6738>)
 800665e:	f001 fbf9 	bl	8007e54 <Str_Len>
 8006662:	4603      	mov	r3, r0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4b8e      	ldr	r3, [pc, #568]	@ (80068a8 <main+0x6738>)
 800666e:	2101      	movs	r1, #1
 8006670:	488c      	ldr	r0, [pc, #560]	@ (80068a4 <main+0x6734>)
 8006672:	f001 fb82 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006676:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800667a:	3301      	adds	r3, #1
 800667c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006680:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006684:	461a      	mov	r2, r3
 8006686:	2101      	movs	r1, #1
 8006688:	4886      	ldr	r0, [pc, #536]	@ (80068a4 <main+0x6734>)
 800668a:	f001 fb3a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800668e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006692:	2301      	movs	r3, #1
 8006694:	2101      	movs	r1, #1
 8006696:	4883      	ldr	r0, [pc, #524]	@ (80068a4 <main+0x6734>)
 8006698:	f001 fb99 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 800669c:	f001 fd40 	bl	8008120 <HAL_GetTick>
 80066a0:	4603      	mov	r3, r0
 80066a2:	33fa      	adds	r3, #250	@ 0xfa
 80066a4:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for miinutes validity (state 32)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 80066a6:	210f      	movs	r1, #15
 80066a8:	487d      	ldr	r0, [pc, #500]	@ (80068a0 <main+0x6730>)
 80066aa:	f001 fcc9 	bl	8008040 <Keypad_Get_Key>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <main+0x6586>
					&& (current_tick >= general_delay)) {
 80066b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d31c      	bcc.n	80066f6 <main+0x6586>

				Alcd_Clear(&lcd);
 80066bc:	4879      	ldr	r0, [pc, #484]	@ (80068a4 <main+0x6734>)
 80066be:	f001 fb75 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 80066c2:	887b      	ldrh	r3, [r7, #2]
 80066c4:	f107 001c 	add.w	r0, r7, #28
 80066c8:	4a78      	ldr	r2, [pc, #480]	@ (80068ac <main+0x673c>)
 80066ca:	2132      	movs	r1, #50	@ 0x32
 80066cc:	f004 fe42 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 80066d0:	f107 031c 	add.w	r3, r7, #28
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 fd43 	bl	8000160 <strlen>
 80066da:	4603      	mov	r3, r0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f107 021c 	add.w	r2, r7, #28
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	2101      	movs	r1, #1
 80066ea:	486e      	ldr	r0, [pc, #440]	@ (80068a4 <main+0x6734>)
 80066ec:	f001 fb45 	bl	8007d7a <Alcd_PutAt_n>

//go to validation phase
				status = 52;
 80066f0:	2334      	movs	r3, #52	@ 0x34
 80066f2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 80066f6:	f001 fd13 	bl	8008120 <HAL_GetTick>
 80066fa:	4603      	mov	r3, r0
 80066fc:	33fa      	adds	r3, #250	@ 0xfa
 80066fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 50) && (current_tick >= general_delay)) {
 8006700:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006704:	2b32      	cmp	r3, #50	@ 0x32
 8006706:	d17b      	bne.n	8006800 <main+0x6690>
 8006708:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800670a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800670c:	429a      	cmp	r2, r3
 800670e:	f4bf ac76 	bcs.w	8005ffe <main+0x5e8e>
		}

		//minutes validation phase
		while ((status == 52) && (current_tick >= general_delay)) {
 8006712:	e075      	b.n	8006800 <main+0x6690>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006714:	f001 fd04 	bl	8008120 <HAL_GetTick>
 8006718:	6638      	str	r0, [r7, #96]	@ 0x60
			input_index = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

			Alcd_Clear(&lcd);
 8006720:	4860      	ldr	r0, [pc, #384]	@ (80068a4 <main+0x6734>)
 8006722:	f001 fb43 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006726:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800672a:	f107 001c 	add.w	r0, r7, #28
 800672e:	4a5f      	ldr	r2, [pc, #380]	@ (80068ac <main+0x673c>)
 8006730:	2132      	movs	r1, #50	@ 0x32
 8006732:	f004 fe0f 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006736:	f107 031c 	add.w	r3, r7, #28
 800673a:	4618      	mov	r0, r3
 800673c:	f7f9 fd10 	bl	8000160 <strlen>
 8006740:	4603      	mov	r3, r0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f107 021c 	add.w	r2, r7, #28
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	4613      	mov	r3, r2
 800674c:	220e      	movs	r2, #14
 800674e:	2100      	movs	r1, #0
 8006750:	4854      	ldr	r0, [pc, #336]	@ (80068a4 <main+0x6734>)
 8006752:	f001 fb12 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	4618      	mov	r0, r3
 800675a:	f004 fd72 	bl	800b242 <atoi>
 800675e:	4603      	mov	r3, r0
 8006760:	b29b      	uxth	r3, r3
 8006762:	807b      	strh	r3, [r7, #2]

			//check if minutes is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8006764:	887b      	ldrh	r3, [r7, #2]
 8006766:	2b3c      	cmp	r3, #60	@ 0x3c
 8006768:	d817      	bhi.n	800679a <main+0x662a>


				status = 49;
 800676a:	2331      	movs	r3, #49	@ 0x31
 800676c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				dose_m = buffer;
 8006770:	887b      	ldrh	r3, [r7, #2]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

				input_index = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 800677e:	2300      	movs	r3, #0
 8006780:	2200      	movs	r2, #0
 8006782:	2101      	movs	r1, #1
 8006784:	4847      	ldr	r0, [pc, #284]	@ (80068a4 <main+0x6734>)
 8006786:	f001 fb22 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 800678a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800678e:	2301      	movs	r3, #1
 8006790:	2101      	movs	r1, #1
 8006792:	4844      	ldr	r0, [pc, #272]	@ (80068a4 <main+0x6734>)
 8006794:	f001 fb1b 	bl	8007dce <Alcd_Display_Control>
 8006798:	e027      	b.n	80067ea <main+0x667a>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 800679a:	4845      	ldr	r0, [pc, #276]	@ (80068b0 <main+0x6740>)
 800679c:	f001 fb5a 	bl	8007e54 <Str_Len>
 80067a0:	4603      	mov	r3, r0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4b42      	ldr	r3, [pc, #264]	@ (80068b0 <main+0x6740>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	483d      	ldr	r0, [pc, #244]	@ (80068a4 <main+0x6734>)
 80067ae:	f001 fae4 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80067be:	2300      	movs	r3, #0
 80067c0:	2200      	movs	r2, #0
 80067c2:	2101      	movs	r1, #1
 80067c4:	4837      	ldr	r0, [pc, #220]	@ (80068a4 <main+0x6734>)
 80067c6:	f001 fb02 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80067ca:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80067ce:	2301      	movs	r3, #1
 80067d0:	2101      	movs	r1, #1
 80067d2:	4834      	ldr	r0, [pc, #208]	@ (80068a4 <main+0x6734>)
 80067d4:	f001 fafb 	bl	8007dce <Alcd_Display_Control>
				//return to entering hours
				status = 50;
 80067d8:	2332      	movs	r3, #50	@ 0x32
 80067da:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 80067de:	f001 fc9f 	bl	8008120 <HAL_GetTick>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80067e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 80067ea:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d106      	bne.n	8006800 <main+0x6690>
 80067f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <main+0x6690>

				delay_flag = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 52) && (current_tick >= general_delay)) {
 8006800:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006804:	2b34      	cmp	r3, #52	@ 0x34
 8006806:	f040 8381 	bne.w	8006f0c <main+0x6d9c>
 800680a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800680c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800680e:	429a      	cmp	r2, r3
 8006810:	d280      	bcs.n	8006714 <main+0x65a4>
			}

		}

//entering the seconds state (51)
		while ((status == 51) && (current_tick >= general_delay)) {
 8006812:	e37b      	b.n	8006f0c <main+0x6d9c>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006814:	f001 fc84 	bl	8008120 <HAL_GetTick>
 8006818:	6638      	str	r0, [r7, #96]	@ 0x60

			//Alcd_Clear(&lcd);
			Alcd_PutAt(&lcd, 0, 0, "Enter seconds");
 800681a:	4826      	ldr	r0, [pc, #152]	@ (80068b4 <main+0x6744>)
 800681c:	f001 fb1a 	bl	8007e54 <Str_Len>
 8006820:	4603      	mov	r3, r0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	4b23      	ldr	r3, [pc, #140]	@ (80068b4 <main+0x6744>)
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	481d      	ldr	r0, [pc, #116]	@ (80068a4 <main+0x6734>)
 800682e:	f001 faa4 	bl	8007d7a <Alcd_PutAt_n>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006832:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006836:	f107 001c 	add.w	r0, r7, #28
 800683a:	4a1c      	ldr	r2, [pc, #112]	@ (80068ac <main+0x673c>)
 800683c:	2132      	movs	r1, #50	@ 0x32
 800683e:	f004 fd89 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006842:	f107 031c 	add.w	r3, r7, #28
 8006846:	4618      	mov	r0, r3
 8006848:	f7f9 fc8a 	bl	8000160 <strlen>
 800684c:	4603      	mov	r3, r0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f107 021c 	add.w	r2, r7, #28
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	4613      	mov	r3, r2
 8006858:	220e      	movs	r2, #14
 800685a:	2100      	movs	r1, #0
 800685c:	4811      	ldr	r0, [pc, #68]	@ (80068a4 <main+0x6734>)
 800685e:	f001 fa8c 	bl	8007d7a <Alcd_PutAt_n>

			Alcd_CursorAt(&lcd, 1, input_index);
 8006862:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006866:	461a      	mov	r2, r3
 8006868:	2101      	movs	r1, #1
 800686a:	480e      	ldr	r0, [pc, #56]	@ (80068a4 <main+0x6734>)
 800686c:	f001 fa49 	bl	8007d02 <Alcd_CursorAt>
			Alcd_Display_Control(&lcd, 1, 1, 1);
 8006870:	2301      	movs	r3, #1
 8006872:	2201      	movs	r2, #1
 8006874:	2101      	movs	r1, #1
 8006876:	480b      	ldr	r0, [pc, #44]	@ (80068a4 <main+0x6734>)
 8006878:	f001 faa9 	bl	8007dce <Alcd_Display_Control>

			//check if any button is pressed
			//check for any keypad input
			Keypad_Refresh(&kp);
 800687c:	4808      	ldr	r0, [pc, #32]	@ (80068a0 <main+0x6730>)
 800687e:	f001 fb43 	bl	8007f08 <Keypad_Refresh>

			//if back is entered
			if (Keypad_Get_Key(&kp, kp_button_no_back)
 8006882:	210e      	movs	r1, #14
 8006884:	4806      	ldr	r0, [pc, #24]	@ (80068a0 <main+0x6730>)
 8006886:	f001 fbdb 	bl	8008040 <Keypad_Get_Key>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <main+0x6748>
					&& (current_tick >= general_delay)) {
 8006890:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006894:	429a      	cmp	r2, r3
 8006896:	d30f      	bcc.n	80068b8 <main+0x6748>

				//back to previous menu
				status = 49;
 8006898:	2331      	movs	r3, #49	@ 0x31
 800689a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800689e:	e308      	b.n	8006eb2 <main+0x6d42>
 80068a0:	20000000 	.word	0x20000000
 80068a4:	2000001c 	.word	0x2000001c
 80068a8:	0800be30 	.word	0x0800be30
 80068ac:	0800bd1c 	.word	0x0800bd1c
 80068b0:	0800be34 	.word	0x0800be34
 80068b4:	0800be4c 	.word	0x0800be4c

			}

			//0 is entered
			else if (Keypad_Get_Key(&kp, kp_button_0)
 80068b8:	210d      	movs	r1, #13
 80068ba:	48b8      	ldr	r0, [pc, #736]	@ (8006b9c <main+0x6a2c>)
 80068bc:	f001 fbc0 	bl	8008040 <Keypad_Get_Key>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d042      	beq.n	800694c <main+0x67dc>
					&& (current_tick >= general_delay)) {
 80068c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d33e      	bcc.n	800694c <main+0x67dc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80068ce:	2300      	movs	r3, #0
 80068d0:	2200      	movs	r2, #0
 80068d2:	2101      	movs	r1, #1
 80068d4:	48b2      	ldr	r0, [pc, #712]	@ (8006ba0 <main+0x6a30>)
 80068d6:	f001 fa7a 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 80068da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d827      	bhi.n	8006932 <main+0x67c2>
					time_date_buffer[input_index] = '0';
 80068e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80068e6:	3368      	adds	r3, #104	@ 0x68
 80068e8:	443b      	add	r3, r7
 80068ea:	2230      	movs	r2, #48	@ 0x30
 80068ec:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 80068f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80068f4:	3301      	adds	r3, #1
 80068f6:	3368      	adds	r3, #104	@ 0x68
 80068f8:	443b      	add	r3, r7
 80068fa:	2200      	movs	r2, #0
 80068fc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "0");
 8006900:	48a8      	ldr	r0, [pc, #672]	@ (8006ba4 <main+0x6a34>)
 8006902:	f001 faa7 	bl	8007e54 <Str_Len>
 8006906:	4603      	mov	r3, r0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4ba4      	ldr	r3, [pc, #656]	@ (8006ba4 <main+0x6a34>)
 8006912:	2101      	movs	r1, #1
 8006914:	48a2      	ldr	r0, [pc, #648]	@ (8006ba0 <main+0x6a30>)
 8006916:	f001 fa30 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 800691a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800691e:	3301      	adds	r3, #1
 8006920:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006924:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006928:	461a      	mov	r2, r3
 800692a:	2101      	movs	r1, #1
 800692c:	489c      	ldr	r0, [pc, #624]	@ (8006ba0 <main+0x6a30>)
 800692e:	f001 f9e8 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006932:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006936:	2301      	movs	r3, #1
 8006938:	2101      	movs	r1, #1
 800693a:	4899      	ldr	r0, [pc, #612]	@ (8006ba0 <main+0x6a30>)
 800693c:	f001 fa47 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006940:	f001 fbee 	bl	8008120 <HAL_GetTick>
 8006944:	4603      	mov	r3, r0
 8006946:	33fa      	adds	r3, #250	@ 0xfa
 8006948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800694a:	e2b2      	b.n	8006eb2 <main+0x6d42>

			}
			//1 is entered
			else if (Keypad_Get_Key(&kp, kp_button_1)
 800694c:	2100      	movs	r1, #0
 800694e:	4893      	ldr	r0, [pc, #588]	@ (8006b9c <main+0x6a2c>)
 8006950:	f001 fb76 	bl	8008040 <Keypad_Get_Key>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d042      	beq.n	80069e0 <main+0x6870>
					&& (current_tick >= general_delay)) {
 800695a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800695c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800695e:	429a      	cmp	r2, r3
 8006960:	d33e      	bcc.n	80069e0 <main+0x6870>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006962:	2300      	movs	r3, #0
 8006964:	2200      	movs	r2, #0
 8006966:	2101      	movs	r1, #1
 8006968:	488d      	ldr	r0, [pc, #564]	@ (8006ba0 <main+0x6a30>)
 800696a:	f001 fa30 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 800696e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006972:	2b01      	cmp	r3, #1
 8006974:	d827      	bhi.n	80069c6 <main+0x6856>
					time_date_buffer[input_index] = '1';
 8006976:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800697a:	3368      	adds	r3, #104	@ 0x68
 800697c:	443b      	add	r3, r7
 800697e:	2231      	movs	r2, #49	@ 0x31
 8006980:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006984:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006988:	3301      	adds	r3, #1
 800698a:	3368      	adds	r3, #104	@ 0x68
 800698c:	443b      	add	r3, r7
 800698e:	2200      	movs	r2, #0
 8006990:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "1");
 8006994:	4884      	ldr	r0, [pc, #528]	@ (8006ba8 <main+0x6a38>)
 8006996:	f001 fa5d 	bl	8007e54 <Str_Len>
 800699a:	4603      	mov	r3, r0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4b80      	ldr	r3, [pc, #512]	@ (8006ba8 <main+0x6a38>)
 80069a6:	2101      	movs	r1, #1
 80069a8:	487d      	ldr	r0, [pc, #500]	@ (8006ba0 <main+0x6a30>)
 80069aa:	f001 f9e6 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 80069ae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80069b2:	3301      	adds	r3, #1
 80069b4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 80069b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80069bc:	461a      	mov	r2, r3
 80069be:	2101      	movs	r1, #1
 80069c0:	4877      	ldr	r0, [pc, #476]	@ (8006ba0 <main+0x6a30>)
 80069c2:	f001 f99e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 80069c6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80069ca:	2301      	movs	r3, #1
 80069cc:	2101      	movs	r1, #1
 80069ce:	4874      	ldr	r0, [pc, #464]	@ (8006ba0 <main+0x6a30>)
 80069d0:	f001 f9fd 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 80069d4:	f001 fba4 	bl	8008120 <HAL_GetTick>
 80069d8:	4603      	mov	r3, r0
 80069da:	33fa      	adds	r3, #250	@ 0xfa
 80069dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069de:	e268      	b.n	8006eb2 <main+0x6d42>

			}
			//2 is entered
			else if (Keypad_Get_Key(&kp, kp_button_2)
 80069e0:	2101      	movs	r1, #1
 80069e2:	486e      	ldr	r0, [pc, #440]	@ (8006b9c <main+0x6a2c>)
 80069e4:	f001 fb2c 	bl	8008040 <Keypad_Get_Key>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d042      	beq.n	8006a74 <main+0x6904>
					&& (current_tick >= general_delay)) {
 80069ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d33e      	bcc.n	8006a74 <main+0x6904>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 80069f6:	2300      	movs	r3, #0
 80069f8:	2200      	movs	r2, #0
 80069fa:	2101      	movs	r1, #1
 80069fc:	4868      	ldr	r0, [pc, #416]	@ (8006ba0 <main+0x6a30>)
 80069fe:	f001 f9e6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006a02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d827      	bhi.n	8006a5a <main+0x68ea>
					time_date_buffer[input_index] = '2';
 8006a0a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006a0e:	3368      	adds	r3, #104	@ 0x68
 8006a10:	443b      	add	r3, r7
 8006a12:	2232      	movs	r2, #50	@ 0x32
 8006a14:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006a18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	3368      	adds	r3, #104	@ 0x68
 8006a20:	443b      	add	r3, r7
 8006a22:	2200      	movs	r2, #0
 8006a24:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "2");
 8006a28:	4860      	ldr	r0, [pc, #384]	@ (8006bac <main+0x6a3c>)
 8006a2a:	f001 fa13 	bl	8007e54 <Str_Len>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	4b5c      	ldr	r3, [pc, #368]	@ (8006bac <main+0x6a3c>)
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	4858      	ldr	r0, [pc, #352]	@ (8006ba0 <main+0x6a30>)
 8006a3e:	f001 f99c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006a42:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006a46:	3301      	adds	r3, #1
 8006a48:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006a4c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006a50:	461a      	mov	r2, r3
 8006a52:	2101      	movs	r1, #1
 8006a54:	4852      	ldr	r0, [pc, #328]	@ (8006ba0 <main+0x6a30>)
 8006a56:	f001 f954 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006a5a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006a5e:	2301      	movs	r3, #1
 8006a60:	2101      	movs	r1, #1
 8006a62:	484f      	ldr	r0, [pc, #316]	@ (8006ba0 <main+0x6a30>)
 8006a64:	f001 f9b3 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006a68:	f001 fb5a 	bl	8008120 <HAL_GetTick>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	33fa      	adds	r3, #250	@ 0xfa
 8006a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a72:	e21e      	b.n	8006eb2 <main+0x6d42>

			}
			//3 is entered
			else if (Keypad_Get_Key(&kp, kp_button_3)
 8006a74:	2102      	movs	r1, #2
 8006a76:	4849      	ldr	r0, [pc, #292]	@ (8006b9c <main+0x6a2c>)
 8006a78:	f001 fae2 	bl	8008040 <Keypad_Get_Key>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d042      	beq.n	8006b08 <main+0x6998>
					&& (current_tick >= general_delay)) {
 8006a82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d33e      	bcc.n	8006b08 <main+0x6998>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2101      	movs	r1, #1
 8006a90:	4843      	ldr	r0, [pc, #268]	@ (8006ba0 <main+0x6a30>)
 8006a92:	f001 f99c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006a96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d827      	bhi.n	8006aee <main+0x697e>
					time_date_buffer[input_index] = '3';
 8006a9e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006aa2:	3368      	adds	r3, #104	@ 0x68
 8006aa4:	443b      	add	r3, r7
 8006aa6:	2233      	movs	r2, #51	@ 0x33
 8006aa8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006aac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	3368      	adds	r3, #104	@ 0x68
 8006ab4:	443b      	add	r3, r7
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "3");
 8006abc:	483c      	ldr	r0, [pc, #240]	@ (8006bb0 <main+0x6a40>)
 8006abe:	f001 f9c9 	bl	8007e54 <Str_Len>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	4b38      	ldr	r3, [pc, #224]	@ (8006bb0 <main+0x6a40>)
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4833      	ldr	r0, [pc, #204]	@ (8006ba0 <main+0x6a30>)
 8006ad2:	f001 f952 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006ad6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006ada:	3301      	adds	r3, #1
 8006adc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006ae0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	482d      	ldr	r0, [pc, #180]	@ (8006ba0 <main+0x6a30>)
 8006aea:	f001 f90a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006aee:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006af2:	2301      	movs	r3, #1
 8006af4:	2101      	movs	r1, #1
 8006af6:	482a      	ldr	r0, [pc, #168]	@ (8006ba0 <main+0x6a30>)
 8006af8:	f001 f969 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006afc:	f001 fb10 	bl	8008120 <HAL_GetTick>
 8006b00:	4603      	mov	r3, r0
 8006b02:	33fa      	adds	r3, #250	@ 0xfa
 8006b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b06:	e1d4      	b.n	8006eb2 <main+0x6d42>

			}

			//4 is entered
			else if (Keypad_Get_Key(&kp, kp_button_4)
 8006b08:	2104      	movs	r1, #4
 8006b0a:	4824      	ldr	r0, [pc, #144]	@ (8006b9c <main+0x6a2c>)
 8006b0c:	f001 fa98 	bl	8008040 <Keypad_Get_Key>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d050      	beq.n	8006bb8 <main+0x6a48>
					&& (current_tick >= general_delay)) {
 8006b16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d34c      	bcc.n	8006bb8 <main+0x6a48>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2200      	movs	r2, #0
 8006b22:	2101      	movs	r1, #1
 8006b24:	481e      	ldr	r0, [pc, #120]	@ (8006ba0 <main+0x6a30>)
 8006b26:	f001 f952 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006b2a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d827      	bhi.n	8006b82 <main+0x6a12>
					time_date_buffer[input_index] = '4';
 8006b32:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b36:	3368      	adds	r3, #104	@ 0x68
 8006b38:	443b      	add	r3, r7
 8006b3a:	2234      	movs	r2, #52	@ 0x34
 8006b3c:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006b40:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b44:	3301      	adds	r3, #1
 8006b46:	3368      	adds	r3, #104	@ 0x68
 8006b48:	443b      	add	r3, r7
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "4");
 8006b50:	4818      	ldr	r0, [pc, #96]	@ (8006bb4 <main+0x6a44>)
 8006b52:	f001 f97f 	bl	8007e54 <Str_Len>
 8006b56:	4603      	mov	r3, r0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <main+0x6a44>)
 8006b62:	2101      	movs	r1, #1
 8006b64:	480e      	ldr	r0, [pc, #56]	@ (8006ba0 <main+0x6a30>)
 8006b66:	f001 f908 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006b6a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b6e:	3301      	adds	r3, #1
 8006b70:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006b74:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	4808      	ldr	r0, [pc, #32]	@ (8006ba0 <main+0x6a30>)
 8006b7e:	f001 f8c0 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006b82:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006b86:	2301      	movs	r3, #1
 8006b88:	2101      	movs	r1, #1
 8006b8a:	4805      	ldr	r0, [pc, #20]	@ (8006ba0 <main+0x6a30>)
 8006b8c:	f001 f91f 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006b90:	f001 fac6 	bl	8008120 <HAL_GetTick>
 8006b94:	4603      	mov	r3, r0
 8006b96:	33fa      	adds	r3, #250	@ 0xfa
 8006b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b9a:	e18a      	b.n	8006eb2 <main+0x6d42>
 8006b9c:	20000000 	.word	0x20000000
 8006ba0:	2000001c 	.word	0x2000001c
 8006ba4:	0800be0c 	.word	0x0800be0c
 8006ba8:	0800be10 	.word	0x0800be10
 8006bac:	0800be14 	.word	0x0800be14
 8006bb0:	0800be18 	.word	0x0800be18
 8006bb4:	0800be1c 	.word	0x0800be1c

			}
			//5 is entered
			else if (Keypad_Get_Key(&kp, kp_button_5)
 8006bb8:	2105      	movs	r1, #5
 8006bba:	4893      	ldr	r0, [pc, #588]	@ (8006e08 <main+0x6c98>)
 8006bbc:	f001 fa40 	bl	8008040 <Keypad_Get_Key>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d042      	beq.n	8006c4c <main+0x6adc>
					&& (current_tick >= general_delay)) {
 8006bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d33e      	bcc.n	8006c4c <main+0x6adc>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	488d      	ldr	r0, [pc, #564]	@ (8006e0c <main+0x6c9c>)
 8006bd6:	f001 f8fa 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006bda:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d827      	bhi.n	8006c32 <main+0x6ac2>
					time_date_buffer[input_index] = '5';
 8006be2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006be6:	3368      	adds	r3, #104	@ 0x68
 8006be8:	443b      	add	r3, r7
 8006bea:	2235      	movs	r2, #53	@ 0x35
 8006bec:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	3368      	adds	r3, #104	@ 0x68
 8006bf8:	443b      	add	r3, r7
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "5");
 8006c00:	4883      	ldr	r0, [pc, #524]	@ (8006e10 <main+0x6ca0>)
 8006c02:	f001 f927 	bl	8007e54 <Str_Len>
 8006c06:	4603      	mov	r3, r0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4b7f      	ldr	r3, [pc, #508]	@ (8006e10 <main+0x6ca0>)
 8006c12:	2101      	movs	r1, #1
 8006c14:	487d      	ldr	r0, [pc, #500]	@ (8006e0c <main+0x6c9c>)
 8006c16:	f001 f8b0 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006c1a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006c24:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4877      	ldr	r0, [pc, #476]	@ (8006e0c <main+0x6c9c>)
 8006c2e:	f001 f868 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006c32:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006c36:	2301      	movs	r3, #1
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4874      	ldr	r0, [pc, #464]	@ (8006e0c <main+0x6c9c>)
 8006c3c:	f001 f8c7 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006c40:	f001 fa6e 	bl	8008120 <HAL_GetTick>
 8006c44:	4603      	mov	r3, r0
 8006c46:	33fa      	adds	r3, #250	@ 0xfa
 8006c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c4a:	e132      	b.n	8006eb2 <main+0x6d42>

			}

			//6 is entered
			else if (Keypad_Get_Key(&kp, kp_button_6)
 8006c4c:	2106      	movs	r1, #6
 8006c4e:	486e      	ldr	r0, [pc, #440]	@ (8006e08 <main+0x6c98>)
 8006c50:	f001 f9f6 	bl	8008040 <Keypad_Get_Key>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d042      	beq.n	8006ce0 <main+0x6b70>
					&& (current_tick >= general_delay)) {
 8006c5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d33e      	bcc.n	8006ce0 <main+0x6b70>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006c62:	2300      	movs	r3, #0
 8006c64:	2200      	movs	r2, #0
 8006c66:	2101      	movs	r1, #1
 8006c68:	4868      	ldr	r0, [pc, #416]	@ (8006e0c <main+0x6c9c>)
 8006c6a:	f001 f8b0 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006c6e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d827      	bhi.n	8006cc6 <main+0x6b56>
					time_date_buffer[input_index] = '6';
 8006c76:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006c7a:	3368      	adds	r3, #104	@ 0x68
 8006c7c:	443b      	add	r3, r7
 8006c7e:	2236      	movs	r2, #54	@ 0x36
 8006c80:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006c84:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006c88:	3301      	adds	r3, #1
 8006c8a:	3368      	adds	r3, #104	@ 0x68
 8006c8c:	443b      	add	r3, r7
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "6");
 8006c94:	485f      	ldr	r0, [pc, #380]	@ (8006e14 <main+0x6ca4>)
 8006c96:	f001 f8dd 	bl	8007e54 <Str_Len>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8006e14 <main+0x6ca4>)
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4858      	ldr	r0, [pc, #352]	@ (8006e0c <main+0x6c9c>)
 8006caa:	f001 f866 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006cae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006cb8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4852      	ldr	r0, [pc, #328]	@ (8006e0c <main+0x6c9c>)
 8006cc2:	f001 f81e 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006cc6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006cca:	2301      	movs	r3, #1
 8006ccc:	2101      	movs	r1, #1
 8006cce:	484f      	ldr	r0, [pc, #316]	@ (8006e0c <main+0x6c9c>)
 8006cd0:	f001 f87d 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006cd4:	f001 fa24 	bl	8008120 <HAL_GetTick>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	33fa      	adds	r3, #250	@ 0xfa
 8006cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cde:	e0e8      	b.n	8006eb2 <main+0x6d42>

			}

			//7 is entered
			else if (Keypad_Get_Key(&kp, kp_button_7)
 8006ce0:	2108      	movs	r1, #8
 8006ce2:	4849      	ldr	r0, [pc, #292]	@ (8006e08 <main+0x6c98>)
 8006ce4:	f001 f9ac 	bl	8008040 <Keypad_Get_Key>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d042      	beq.n	8006d74 <main+0x6c04>
					&& (current_tick >= general_delay)) {
 8006cee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d33e      	bcc.n	8006d74 <main+0x6c04>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	4843      	ldr	r0, [pc, #268]	@ (8006e0c <main+0x6c9c>)
 8006cfe:	f001 f866 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006d02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d827      	bhi.n	8006d5a <main+0x6bea>
					time_date_buffer[input_index] = '7';
 8006d0a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d0e:	3368      	adds	r3, #104	@ 0x68
 8006d10:	443b      	add	r3, r7
 8006d12:	2237      	movs	r2, #55	@ 0x37
 8006d14:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006d18:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	3368      	adds	r3, #104	@ 0x68
 8006d20:	443b      	add	r3, r7
 8006d22:	2200      	movs	r2, #0
 8006d24:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "7");
 8006d28:	483b      	ldr	r0, [pc, #236]	@ (8006e18 <main+0x6ca8>)
 8006d2a:	f001 f893 	bl	8007e54 <Str_Len>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4b37      	ldr	r3, [pc, #220]	@ (8006e18 <main+0x6ca8>)
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	4833      	ldr	r0, [pc, #204]	@ (8006e0c <main+0x6c9c>)
 8006d3e:	f001 f81c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006d42:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d46:	3301      	adds	r3, #1
 8006d48:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006d4c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d50:	461a      	mov	r2, r3
 8006d52:	2101      	movs	r1, #1
 8006d54:	482d      	ldr	r0, [pc, #180]	@ (8006e0c <main+0x6c9c>)
 8006d56:	f000 ffd4 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006d5a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006d5e:	2301      	movs	r3, #1
 8006d60:	2101      	movs	r1, #1
 8006d62:	482a      	ldr	r0, [pc, #168]	@ (8006e0c <main+0x6c9c>)
 8006d64:	f001 f833 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006d68:	f001 f9da 	bl	8008120 <HAL_GetTick>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	33fa      	adds	r3, #250	@ 0xfa
 8006d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d72:	e09e      	b.n	8006eb2 <main+0x6d42>

			}

			//8 is entered
			else if (Keypad_Get_Key(&kp, kp_button_8)
 8006d74:	2109      	movs	r1, #9
 8006d76:	4824      	ldr	r0, [pc, #144]	@ (8006e08 <main+0x6c98>)
 8006d78:	f001 f962 	bl	8008040 <Keypad_Get_Key>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04e      	beq.n	8006e20 <main+0x6cb0>
					&& (current_tick >= general_delay)) {
 8006d82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d34a      	bcc.n	8006e20 <main+0x6cb0>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2101      	movs	r1, #1
 8006d90:	481e      	ldr	r0, [pc, #120]	@ (8006e0c <main+0x6c9c>)
 8006d92:	f001 f81c 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006d96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d827      	bhi.n	8006dee <main+0x6c7e>
					time_date_buffer[input_index] = '8';
 8006d9e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006da2:	3368      	adds	r3, #104	@ 0x68
 8006da4:	443b      	add	r3, r7
 8006da6:	2238      	movs	r2, #56	@ 0x38
 8006da8:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006dac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006db0:	3301      	adds	r3, #1
 8006db2:	3368      	adds	r3, #104	@ 0x68
 8006db4:	443b      	add	r3, r7
 8006db6:	2200      	movs	r2, #0
 8006db8:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "8");
 8006dbc:	4817      	ldr	r0, [pc, #92]	@ (8006e1c <main+0x6cac>)
 8006dbe:	f001 f849 	bl	8007e54 <Str_Len>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4b13      	ldr	r3, [pc, #76]	@ (8006e1c <main+0x6cac>)
 8006dce:	2101      	movs	r1, #1
 8006dd0:	480e      	ldr	r0, [pc, #56]	@ (8006e0c <main+0x6c9c>)
 8006dd2:	f000 ffd2 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006dd6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006dda:	3301      	adds	r3, #1
 8006ddc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006de0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006de4:	461a      	mov	r2, r3
 8006de6:	2101      	movs	r1, #1
 8006de8:	4808      	ldr	r0, [pc, #32]	@ (8006e0c <main+0x6c9c>)
 8006dea:	f000 ff8a 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006dee:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006df2:	2301      	movs	r3, #1
 8006df4:	2101      	movs	r1, #1
 8006df6:	4805      	ldr	r0, [pc, #20]	@ (8006e0c <main+0x6c9c>)
 8006df8:	f000 ffe9 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006dfc:	f001 f990 	bl	8008120 <HAL_GetTick>
 8006e00:	4603      	mov	r3, r0
 8006e02:	33fa      	adds	r3, #250	@ 0xfa
 8006e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e06:	e054      	b.n	8006eb2 <main+0x6d42>
 8006e08:	20000000 	.word	0x20000000
 8006e0c:	2000001c 	.word	0x2000001c
 8006e10:	0800be20 	.word	0x0800be20
 8006e14:	0800be24 	.word	0x0800be24
 8006e18:	0800be28 	.word	0x0800be28
 8006e1c:	0800be2c 	.word	0x0800be2c

			}

			//9 is entered
			else if (Keypad_Get_Key(&kp, kp_button_9)
 8006e20:	210a      	movs	r1, #10
 8006e22:	4880      	ldr	r0, [pc, #512]	@ (8007024 <main+0x6eb4>)
 8006e24:	f001 f90c 	bl	8008040 <Keypad_Get_Key>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d041      	beq.n	8006eb2 <main+0x6d42>
					&& (current_tick >= general_delay)) {
 8006e2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d33d      	bcc.n	8006eb2 <main+0x6d42>

				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006e36:	2300      	movs	r3, #0
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	487a      	ldr	r0, [pc, #488]	@ (8007028 <main+0x6eb8>)
 8006e3e:	f000 ffc6 	bl	8007dce <Alcd_Display_Control>

				// store '0' in the entered time date buffer
				if (input_index < 2) {
 8006e42:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d827      	bhi.n	8006e9a <main+0x6d2a>
					time_date_buffer[input_index] = '9';
 8006e4a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006e4e:	3368      	adds	r3, #104	@ 0x68
 8006e50:	443b      	add	r3, r7
 8006e52:	2239      	movs	r2, #57	@ 0x39
 8006e54:	f803 2c64 	strb.w	r2, [r3, #-100]
					time_date_buffer[input_index + 1] = '\0'; // Null-terminate the string
 8006e58:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	3368      	adds	r3, #104	@ 0x68
 8006e60:	443b      	add	r3, r7
 8006e62:	2200      	movs	r2, #0
 8006e64:	f803 2c64 	strb.w	r2, [r3, #-100]
					Alcd_PutAt(&lcd, 1, input_index, "9");
 8006e68:	4870      	ldr	r0, [pc, #448]	@ (800702c <main+0x6ebc>)
 8006e6a:	f000 fff3 	bl	8007e54 <Str_Len>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4b6c      	ldr	r3, [pc, #432]	@ (800702c <main+0x6ebc>)
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	486a      	ldr	r0, [pc, #424]	@ (8007028 <main+0x6eb8>)
 8006e7e:	f000 ff7c 	bl	8007d7a <Alcd_PutAt_n>
					input_index++;
 8006e82:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006e86:	3301      	adds	r3, #1
 8006e88:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					Alcd_CursorAt(&lcd, 1, input_index); // Move cursor to next position
 8006e8c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006e90:	461a      	mov	r2, r3
 8006e92:	2101      	movs	r1, #1
 8006e94:	4864      	ldr	r0, [pc, #400]	@ (8007028 <main+0x6eb8>)
 8006e96:	f000 ff34 	bl	8007d02 <Alcd_CursorAt>
				}

				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006e9a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4861      	ldr	r0, [pc, #388]	@ (8007028 <main+0x6eb8>)
 8006ea4:	f000 ff93 	bl	8007dce <Alcd_Display_Control>

				// Update keypad_delay after handling the key press
				general_delay = HAL_GetTick() + 250;
 8006ea8:	f001 f93a 	bl	8008120 <HAL_GetTick>
 8006eac:	4603      	mov	r3, r0
 8006eae:	33fa      	adds	r3, #250	@ 0xfa
 8006eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c

			}

			//when yes is entered -> check for seconds validity (state 34)
			if (Keypad_Get_Key(&kp, kp_button_yes)
 8006eb2:	210f      	movs	r1, #15
 8006eb4:	485b      	ldr	r0, [pc, #364]	@ (8007024 <main+0x6eb4>)
 8006eb6:	f001 f8c3 	bl	8008040 <Keypad_Get_Key>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d020      	beq.n	8006f02 <main+0x6d92>
					&& (current_tick >= general_delay)) {
 8006ec0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d31c      	bcc.n	8006f02 <main+0x6d92>

				Alcd_Clear(&lcd);
 8006ec8:	4857      	ldr	r0, [pc, #348]	@ (8007028 <main+0x6eb8>)
 8006eca:	f000 ff6f 	bl	8007dac <Alcd_Clear>

				snprintf(timeString, sizeof(timeString), "%02d", buffer);
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	f107 001c 	add.w	r0, r7, #28
 8006ed4:	4a56      	ldr	r2, [pc, #344]	@ (8007030 <main+0x6ec0>)
 8006ed6:	2132      	movs	r1, #50	@ 0x32
 8006ed8:	f004 fa3c 	bl	800b354 <sniprintf>
				Alcd_PutAt_n(&lcd, 1, 0, timeString, strlen(timeString));
 8006edc:	f107 031c 	add.w	r3, r7, #28
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 f93d 	bl	8000160 <strlen>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f107 021c 	add.w	r2, r7, #28
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	484c      	ldr	r0, [pc, #304]	@ (8007028 <main+0x6eb8>)
 8006ef8:	f000 ff3f 	bl	8007d7a <Alcd_PutAt_n>

				status = 34;
 8006efc:	2322      	movs	r3, #34	@ 0x22
 8006efe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			}

			//
			general_delay = HAL_GetTick() + 250;
 8006f02:	f001 f90d 	bl	8008120 <HAL_GetTick>
 8006f06:	4603      	mov	r3, r0
 8006f08:	33fa      	adds	r3, #250	@ 0xfa
 8006f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while ((status == 51) && (current_tick >= general_delay)) {
 8006f0c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006f10:	2b33      	cmp	r3, #51	@ 0x33
 8006f12:	d17b      	bne.n	800700c <main+0x6e9c>
 8006f14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	f4bf ac7b 	bcs.w	8006814 <main+0x66a4>
		}

		//seconds validation phase
		while ((status == 53) && (current_tick >= general_delay)) {
 8006f1e:	e075      	b.n	800700c <main+0x6e9c>

			//get the current tick number
			current_tick = HAL_GetTick();
 8006f20:	f001 f8fe 	bl	8008120 <HAL_GetTick>
 8006f24:	6638      	str	r0, [r7, #96]	@ 0x60

			input_index = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

			Alcd_Clear(&lcd);
 8006f2c:	483e      	ldr	r0, [pc, #248]	@ (8007028 <main+0x6eb8>)
 8006f2e:	f000 ff3d 	bl	8007dac <Alcd_Clear>

			snprintf(timeString, sizeof(timeString), "%02d", status);
 8006f32:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8006f36:	f107 001c 	add.w	r0, r7, #28
 8006f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007030 <main+0x6ec0>)
 8006f3c:	2132      	movs	r1, #50	@ 0x32
 8006f3e:	f004 fa09 	bl	800b354 <sniprintf>
			Alcd_PutAt_n(&lcd, 0, 14, timeString, strlen(timeString));
 8006f42:	f107 031c 	add.w	r3, r7, #28
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 f90a 	bl	8000160 <strlen>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f107 021c 	add.w	r2, r7, #28
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	4613      	mov	r3, r2
 8006f58:	220e      	movs	r2, #14
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4832      	ldr	r0, [pc, #200]	@ (8007028 <main+0x6eb8>)
 8006f5e:	f000 ff0c 	bl	8007d7a <Alcd_PutAt_n>

			buffer = atoi(time_date_buffer);
 8006f62:	1d3b      	adds	r3, r7, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f004 f96c 	bl	800b242 <atoi>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	807b      	strh	r3, [r7, #2]

			//check if seconds is within the range 0 to 60
			if (buffer >= 0 && buffer < 61) {
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	2b3c      	cmp	r3, #60	@ 0x3c
 8006f74:	d817      	bhi.n	8006fa6 <main+0x6e36>


				status = 49;
 8006f76:	2331      	movs	r3, #49	@ 0x31
 8006f78:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				//set the minutes to the value
				dose_m = buffer;
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

				input_index = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2101      	movs	r1, #1
 8006f90:	4825      	ldr	r0, [pc, #148]	@ (8007028 <main+0x6eb8>)
 8006f92:	f000 ff1c 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006f96:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4822      	ldr	r0, [pc, #136]	@ (8007028 <main+0x6eb8>)
 8006fa0:	f000 ff15 	bl	8007dce <Alcd_Display_Control>
 8006fa4:	e027      	b.n	8006ff6 <main+0x6e86>
			} else {
				Alcd_PutAt(&lcd, 0, 0, "invalid");
 8006fa6:	4823      	ldr	r0, [pc, #140]	@ (8007034 <main+0x6ec4>)
 8006fa8:	f000 ff54 	bl	8007e54 <Str_Len>
 8006fac:	4603      	mov	r3, r0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	4b20      	ldr	r3, [pc, #128]	@ (8007034 <main+0x6ec4>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	481b      	ldr	r0, [pc, #108]	@ (8007028 <main+0x6eb8>)
 8006fba:	f000 fede 	bl	8007d7a <Alcd_PutAt_n>
				delay_flag = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

				input_index = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				//turn off the blinking
				Alcd_Display_Control(&lcd, 1, 0, 0);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4815      	ldr	r0, [pc, #84]	@ (8007028 <main+0x6eb8>)
 8006fd2:	f000 fefc 	bl	8007dce <Alcd_Display_Control>
				//turn on the blinking again
				Alcd_Display_Control(&lcd, 1, input_index, 1);
 8006fd6:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006fda:	2301      	movs	r3, #1
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4812      	ldr	r0, [pc, #72]	@ (8007028 <main+0x6eb8>)
 8006fe0:	f000 fef5 	bl	8007dce <Alcd_Display_Control>
				//return to entering hours
				status = 51;
 8006fe4:	2333      	movs	r3, #51	@ 0x33
 8006fe6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

				general_delay = HAL_GetTick() + 1000;
 8006fea:	f001 f899 	bl	8008120 <HAL_GetTick>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
			}

			//create a delay
			if ((delay_flag == 1) && (current_tick >= general_delay)) {
 8006ff6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d106      	bne.n	800700c <main+0x6e9c>
 8006ffe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007002:	429a      	cmp	r2, r3
 8007004:	d302      	bcc.n	800700c <main+0x6e9c>

				delay_flag = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		while ((status == 53) && (current_tick >= general_delay)) {
 800700c:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8007010:	2b35      	cmp	r3, #53	@ 0x35
 8007012:	f479 a8f7 	bne.w	8000204 <main+0x94>
 8007016:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800701a:	429a      	cmp	r2, r3
 800701c:	d280      	bcs.n	8006f20 <main+0x6db0>
		current_tick = HAL_GetTick();
 800701e:	f7f9 b8f1 	b.w	8000204 <main+0x94>
 8007022:	bf00      	nop
 8007024:	20000000 	.word	0x20000000
 8007028:	2000001c 	.word	0x2000001c
 800702c:	0800be30 	.word	0x0800be30
 8007030:	0800bd1c 	.word	0x0800bd1c
 8007034:	0800be34 	.word	0x0800be34

08007038 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b090      	sub	sp, #64	@ 0x40
 800703c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800703e:	f107 0318 	add.w	r3, r7, #24
 8007042:	2228      	movs	r2, #40	@ 0x28
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f004 f9b8 	bl	800b3bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	609a      	str	r2, [r3, #8]
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800705a:	2301      	movs	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800705e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007062:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007064:	2300      	movs	r3, #0
 8007066:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007068:	2301      	movs	r3, #1
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800706c:	2302      	movs	r3, #2
 800706e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007070:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007074:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007076:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800707a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800707c:	f107 0318 	add.w	r3, r7, #24
 8007080:	4618      	mov	r0, r3
 8007082:	f003 f81b 	bl	800a0bc <HAL_RCC_OscConfig>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <SystemClock_Config+0x58>
		Error_Handler();
 800708c:	f000 f906 	bl	800729c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007090:	230f      	movs	r3, #15
 8007092:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007094:	2302      	movs	r3, #2
 8007096:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800709c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80070a6:	1d3b      	adds	r3, r7, #4
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f003 fa88 	bl	800a5c0 <HAL_RCC_ClockConfig>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <SystemClock_Config+0x82>
		Error_Handler();
 80070b6:	f000 f8f1 	bl	800729c <Error_Handler>
	}
}
 80070ba:	bf00      	nop
 80070bc:	3740      	adds	r7, #64	@ 0x40
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80070c8:	4b12      	ldr	r3, [pc, #72]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070ca:	4a13      	ldr	r2, [pc, #76]	@ (8007118 <MX_I2C2_Init+0x54>)
 80070cc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80070ce:	4b11      	ldr	r3, [pc, #68]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070d0:	4a12      	ldr	r2, [pc, #72]	@ (800711c <MX_I2C2_Init+0x58>)
 80070d2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80070d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070dc:	2200      	movs	r2, #0
 80070de:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80070e6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80070ee:	4b09      	ldr	r3, [pc, #36]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070f4:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070fa:	4b06      	ldr	r3, [pc, #24]	@ (8007114 <MX_I2C2_Init+0x50>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8007100:	4804      	ldr	r0, [pc, #16]	@ (8007114 <MX_I2C2_Init+0x50>)
 8007102:	f001 fabb 	bl	800867c <HAL_I2C_Init>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <MX_I2C2_Init+0x4c>
		Error_Handler();
 800710c:	f000 f8c6 	bl	800729c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8007110:	bf00      	nop
 8007112:	bd80      	pop	{r7, pc}
 8007114:	200000b4 	.word	0x200000b4
 8007118:	40005800 	.word	0x40005800
 800711c:	000186a0 	.word	0x000186a0

08007120 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b092      	sub	sp, #72	@ 0x48
 8007124:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007126:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8007130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	611a      	str	r2, [r3, #16]
 8007140:	615a      	str	r2, [r3, #20]
 8007142:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	2220      	movs	r2, #32
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f004 f936 	bl	800b3bc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8007150:	4b33      	ldr	r3, [pc, #204]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007152:	4a34      	ldr	r2, [pc, #208]	@ (8007224 <MX_TIM1_Init+0x104>)
 8007154:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8007156:	4b32      	ldr	r3, [pc, #200]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007158:	2247      	movs	r2, #71	@ 0x47
 800715a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800715c:	4b30      	ldr	r3, [pc, #192]	@ (8007220 <MX_TIM1_Init+0x100>)
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999;
 8007162:	4b2f      	ldr	r3, [pc, #188]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007164:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8007168:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800716a:	4b2d      	ldr	r3, [pc, #180]	@ (8007220 <MX_TIM1_Init+0x100>)
 800716c:	2200      	movs	r2, #0
 800716e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8007170:	4b2b      	ldr	r3, [pc, #172]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007172:	2200      	movs	r2, #0
 8007174:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007176:	4b2a      	ldr	r3, [pc, #168]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007178:	2200      	movs	r2, #0
 800717a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800717c:	4828      	ldr	r0, [pc, #160]	@ (8007220 <MX_TIM1_Init+0x100>)
 800717e:	f003 fbe3 	bl	800a948 <HAL_TIM_PWM_Init>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <MX_TIM1_Init+0x6c>
		Error_Handler();
 8007188:	f000 f888 	bl	800729c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800718c:	2300      	movs	r3, #0
 800718e:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007190:	2300      	movs	r3, #0
 8007192:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8007194:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007198:	4619      	mov	r1, r3
 800719a:	4821      	ldr	r0, [pc, #132]	@ (8007220 <MX_TIM1_Init+0x100>)
 800719c:	f003 ffa2 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80071a6:	f000 f879 	bl	800729c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80071aa:	2360      	movs	r3, #96	@ 0x60
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 1000;
 80071ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80071b8:	2300      	movs	r3, #0
 80071ba:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80071bc:	2300      	movs	r3, #0
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80071c4:	2300      	movs	r3, #0
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80071c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071cc:	2200      	movs	r2, #0
 80071ce:	4619      	mov	r1, r3
 80071d0:	4813      	ldr	r0, [pc, #76]	@ (8007220 <MX_TIM1_Init+0x100>)
 80071d2:	f003 fcab 	bl	800ab2c <HAL_TIM_PWM_ConfigChannel>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <MX_TIM1_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 80071dc:	f000 f85e 	bl	800729c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80071f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071f8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80071fe:	1d3b      	adds	r3, r7, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4807      	ldr	r0, [pc, #28]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007204:	f003 ffcc 	bl	800b1a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <MX_TIM1_Init+0xf2>
			!= HAL_OK) {
		Error_Handler();
 800720e:	f000 f845 	bl	800729c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8007212:	4803      	ldr	r0, [pc, #12]	@ (8007220 <MX_TIM1_Init+0x100>)
 8007214:	f000 f8d8 	bl	80073c8 <HAL_TIM_MspPostInit>

}
 8007218:	bf00      	nop
 800721a:	3748      	adds	r7, #72	@ 0x48
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000108 	.word	0x20000108
 8007224:	40012c00 	.word	0x40012c00

08007228 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800722e:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	4a19      	ldr	r2, [pc, #100]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007234:	f043 0320 	orr.w	r3, r3, #32
 8007238:	6193      	str	r3, [r2, #24]
 800723a:	4b17      	ldr	r3, [pc, #92]	@ (8007298 <MX_GPIO_Init+0x70>)
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007246:	4b14      	ldr	r3, [pc, #80]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	4a13      	ldr	r2, [pc, #76]	@ (8007298 <MX_GPIO_Init+0x70>)
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	6193      	str	r3, [r2, #24]
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	60bb      	str	r3, [r7, #8]
 800725c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800725e:	4b0e      	ldr	r3, [pc, #56]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	4a0d      	ldr	r2, [pc, #52]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007264:	f043 0304 	orr.w	r3, r3, #4
 8007268:	6193      	str	r3, [r2, #24]
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <MX_GPIO_Init+0x70>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007276:	4b08      	ldr	r3, [pc, #32]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	4a07      	ldr	r2, [pc, #28]	@ (8007298 <MX_GPIO_Init+0x70>)
 800727c:	f043 0310 	orr.w	r3, r3, #16
 8007280:	6193      	str	r3, [r2, #24]
 8007282:	4b05      	ldr	r3, [pc, #20]	@ (8007298 <MX_GPIO_Init+0x70>)
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f003 0310 	and.w	r3, r3, #16
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800728e:	bf00      	nop
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr
 8007298:	40021000 	.word	0x40021000

0800729c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80072a0:	b672      	cpsid	i
}
 80072a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <Error_Handler+0x8>

080072a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80072ae:	4b15      	ldr	r3, [pc, #84]	@ (8007304 <HAL_MspInit+0x5c>)
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	4a14      	ldr	r2, [pc, #80]	@ (8007304 <HAL_MspInit+0x5c>)
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	6193      	str	r3, [r2, #24]
 80072ba:	4b12      	ldr	r3, [pc, #72]	@ (8007304 <HAL_MspInit+0x5c>)
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007304 <HAL_MspInit+0x5c>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007304 <HAL_MspInit+0x5c>)
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072d0:	61d3      	str	r3, [r2, #28]
 80072d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007304 <HAL_MspInit+0x5c>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072da:	607b      	str	r3, [r7, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80072de:	4b0a      	ldr	r3, [pc, #40]	@ (8007308 <HAL_MspInit+0x60>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	4a04      	ldr	r2, [pc, #16]	@ (8007308 <HAL_MspInit+0x60>)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	40021000 	.word	0x40021000
 8007308:	40010000 	.word	0x40010000

0800730c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007314:	f107 0310 	add.w	r3, r7, #16
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	609a      	str	r2, [r3, #8]
 8007320:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a16      	ldr	r2, [pc, #88]	@ (8007380 <HAL_I2C_MspInit+0x74>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d124      	bne.n	8007376 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800732c:	4b15      	ldr	r3, [pc, #84]	@ (8007384 <HAL_I2C_MspInit+0x78>)
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	4a14      	ldr	r2, [pc, #80]	@ (8007384 <HAL_I2C_MspInit+0x78>)
 8007332:	f043 0308 	orr.w	r3, r3, #8
 8007336:	6193      	str	r3, [r2, #24]
 8007338:	4b12      	ldr	r3, [pc, #72]	@ (8007384 <HAL_I2C_MspInit+0x78>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007344:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007348:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800734a:	2312      	movs	r3, #18
 800734c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800734e:	2303      	movs	r3, #3
 8007350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007352:	f107 0310 	add.w	r3, r7, #16
 8007356:	4619      	mov	r1, r3
 8007358:	480b      	ldr	r0, [pc, #44]	@ (8007388 <HAL_I2C_MspInit+0x7c>)
 800735a:	f000 fff3 	bl	8008344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800735e:	4b09      	ldr	r3, [pc, #36]	@ (8007384 <HAL_I2C_MspInit+0x78>)
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	4a08      	ldr	r2, [pc, #32]	@ (8007384 <HAL_I2C_MspInit+0x78>)
 8007364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007368:	61d3      	str	r3, [r2, #28]
 800736a:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <HAL_I2C_MspInit+0x78>)
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007376:	bf00      	nop
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40005800 	.word	0x40005800
 8007384:	40021000 	.word	0x40021000
 8007388:	40010c00 	.word	0x40010c00

0800738c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a09      	ldr	r2, [pc, #36]	@ (80073c0 <HAL_TIM_PWM_MspInit+0x34>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d10b      	bne.n	80073b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <HAL_TIM_PWM_MspInit+0x38>)
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	4a08      	ldr	r2, [pc, #32]	@ (80073c4 <HAL_TIM_PWM_MspInit+0x38>)
 80073a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80073a8:	6193      	str	r3, [r2, #24]
 80073aa:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <HAL_TIM_PWM_MspInit+0x38>)
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr
 80073c0:	40012c00 	.word	0x40012c00
 80073c4:	40021000 	.word	0x40021000

080073c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d0:	f107 0310 	add.w	r3, r7, #16
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a10      	ldr	r2, [pc, #64]	@ (8007424 <HAL_TIM_MspPostInit+0x5c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d118      	bne.n	800741a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007428 <HAL_TIM_MspPostInit+0x60>)
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007428 <HAL_TIM_MspPostInit+0x60>)
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	6193      	str	r3, [r2, #24]
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <HAL_TIM_MspPostInit+0x60>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007406:	2302      	movs	r3, #2
 8007408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800740a:	2302      	movs	r3, #2
 800740c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800740e:	f107 0310 	add.w	r3, r7, #16
 8007412:	4619      	mov	r1, r3
 8007414:	4805      	ldr	r0, [pc, #20]	@ (800742c <HAL_TIM_MspPostInit+0x64>)
 8007416:	f000 ff95 	bl	8008344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800741a:	bf00      	nop
 800741c:	3720      	adds	r7, #32
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40012c00 	.word	0x40012c00
 8007428:	40021000 	.word	0x40021000
 800742c:	40010800 	.word	0x40010800

08007430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <NMI_Handler+0x4>

08007438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <HardFault_Handler+0x4>

08007440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <MemManage_Handler+0x4>

08007448 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <BusFault_Handler+0x4>

08007450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <UsageFault_Handler+0x4>

08007458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007468:	bf00      	nop
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007480:	f000 fe3c 	bl	80080fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}

08007488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007490:	4a14      	ldr	r2, [pc, #80]	@ (80074e4 <_sbrk+0x5c>)
 8007492:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <_sbrk+0x60>)
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800749c:	4b13      	ldr	r3, [pc, #76]	@ (80074ec <_sbrk+0x64>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80074a4:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <_sbrk+0x64>)
 80074a6:	4a12      	ldr	r2, [pc, #72]	@ (80074f0 <_sbrk+0x68>)
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074aa:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <_sbrk+0x64>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d207      	bcs.n	80074c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074b8:	f003 ff88 	bl	800b3cc <__errno>
 80074bc:	4603      	mov	r3, r0
 80074be:	220c      	movs	r2, #12
 80074c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295
 80074c6:	e009      	b.n	80074dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074c8:	4b08      	ldr	r3, [pc, #32]	@ (80074ec <_sbrk+0x64>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074ce:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <_sbrk+0x64>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a05      	ldr	r2, [pc, #20]	@ (80074ec <_sbrk+0x64>)
 80074d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80074da:	68fb      	ldr	r3, [r7, #12]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20005000 	.word	0x20005000
 80074e8:	00000400 	.word	0x00000400
 80074ec:	2000018c 	.word	0x2000018c
 80074f0:	200002e0 	.word	0x200002e0

080074f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80074f8:	bf00      	nop
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007500:	f7ff fff8 	bl	80074f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007504:	480b      	ldr	r0, [pc, #44]	@ (8007534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007506:	490c      	ldr	r1, [pc, #48]	@ (8007538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007508:	4a0c      	ldr	r2, [pc, #48]	@ (800753c <LoopFillZerobss+0x16>)
  movs r3, #0
 800750a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800750c:	e002      	b.n	8007514 <LoopCopyDataInit>

0800750e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800750e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007512:	3304      	adds	r3, #4

08007514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007518:	d3f9      	bcc.n	800750e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800751a:	4a09      	ldr	r2, [pc, #36]	@ (8007540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800751c:	4c09      	ldr	r4, [pc, #36]	@ (8007544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800751e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007520:	e001      	b.n	8007526 <LoopFillZerobss>

08007522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007524:	3204      	adds	r2, #4

08007526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007528:	d3fb      	bcc.n	8007522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800752a:	f003 ff55 	bl	800b3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800752e:	f7f8 fe1f 	bl	8000170 <main>
  bx lr
 8007532:	4770      	bx	lr
  ldr r0, =_sdata
 8007534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007538:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800753c:	0800c0ac 	.word	0x0800c0ac
  ldr r2, =_sbss
 8007540:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8007544:	200002dc 	.word	0x200002dc

08007548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007548:	e7fe      	b.n	8007548 <ADC1_2_IRQHandler>
	...

0800754c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8007550:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <DWT_Delay_Init+0x58>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a13      	ldr	r2, [pc, #76]	@ (80075a4 <DWT_Delay_Init+0x58>)
 8007556:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800755a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800755c:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <DWT_Delay_Init+0x58>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4a10      	ldr	r2, [pc, #64]	@ (80075a4 <DWT_Delay_Init+0x58>)
 8007562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007566:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8007568:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <DWT_Delay_Init+0x5c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a0e      	ldr	r2, [pc, #56]	@ (80075a8 <DWT_Delay_Init+0x5c>)
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8007574:	4b0c      	ldr	r3, [pc, #48]	@ (80075a8 <DWT_Delay_Init+0x5c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0b      	ldr	r2, [pc, #44]	@ (80075a8 <DWT_Delay_Init+0x5c>)
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8007580:	4b09      	ldr	r3, [pc, #36]	@ (80075a8 <DWT_Delay_Init+0x5c>)
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8007586:	bf00      	nop
     __ASM volatile ("NOP");
 8007588:	bf00      	nop
  __ASM volatile ("NOP");
 800758a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800758c:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <DWT_Delay_Init+0x5c>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8007594:	2300      	movs	r3, #0
 8007596:	e000      	b.n	800759a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8007598:	2301      	movs	r3, #1
  }
}
 800759a:	4618      	mov	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	e000edf0 	.word	0xe000edf0
 80075a8:	e0001000 	.word	0xe0001000

080075ac <eeprom24c32_init>:
	return (OK == HAL_OK) ? 1 : 0;
}

//initializing the eeprom
eeprom_state_t eeprom24c32_init(eeprom24c32_t *eeprom,
		I2C_HandleTypeDef *i2c_bus) {
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
	eeprom->i2c_bus = i2c_bus;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	621a      	str	r2, [r3, #32]

	// Clear buffer and write to EEPROM
	eeprom->i2c_buffer[0] = 0x00;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]

	// Return the appropriate status
	return (status == 1) ? eeprom_OK : eeprom_NOK;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	bf14      	ite	ne
 80075cc:	2301      	movne	r3, #1
 80075ce:	2300      	moveq	r3, #0
 80075d0:	b2db      	uxtb	r3, r3

}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <eeprom24c32_write>:
 }
 */

//write to the eeprom function
uint8_t eeprom24c32_write(eeprom24c32_t *eeprom, uint32_t *buffer_data,
		uint16_t mem_ddress) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	@ 0x28
 80075e0:	af04      	add	r7, sp, #16
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
	uint8_t status;

	//for testing
	//eeprom->i2c_buffer[0] = 8;

	status = HAL_I2C_Mem_Write(eeprom->i2c_bus, (eeprom_SLA << 1), mem_ddress,
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a18      	ldr	r0, [r3, #32]
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	2364      	movs	r3, #100	@ 0x64
 80075f2:	9302      	str	r3, [sp, #8]
 80075f4:	2301      	movs	r3, #1
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	2302      	movs	r3, #2
 80075fe:	21a0      	movs	r1, #160	@ 0xa0
 8007600:	f001 fcea 	bl	8008fd8 <HAL_I2C_Mem_Write>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
			2, (uint8_t*)buffer_data, 1, 100);

	//delay according to the datasheet
	HAL_Delay(20);
 8007608:	2014      	movs	r0, #20
 800760a:	f000 fd93 	bl	8008134 <HAL_Delay>

	return status;
 800760e:	7dfb      	ldrb	r3, [r7, #23]

}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <eeprom24c32_read>:

//read data from the eeprom
uint16_t eeprom24c32_read(eeprom24c32_t *eeprom, uint16_t *data,
		uint16_t mem_ddress) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	@ 0x28
 800761c:	af04      	add	r7, sp, #16
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]

	uint8_t status;
	uint8_t read_data;

	status = HAL_I2C_Mem_Read(eeprom->i2c_bus, (eeprom_SLA << 1), mem_ddress, 2,
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a18      	ldr	r0, [r3, #32]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	2364      	movs	r3, #100	@ 0x64
 800762e:	9302      	str	r3, [sp, #8]
 8007630:	2301      	movs	r3, #1
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	f107 0316 	add.w	r3, r7, #22
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	2302      	movs	r3, #2
 800763c:	21a0      	movs	r1, #160	@ 0xa0
 800763e:	f001 fdc5 	bl	80091cc <HAL_I2C_Mem_Read>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]
			&read_data, 1, 100);

	// Store the read byte into the data variable
	*data = read_data;
 8007646:	7dbb      	ldrb	r3, [r7, #22]
 8007648:	461a      	mov	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	801a      	strh	r2, [r3, #0]

	return status;
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	b29b      	uxth	r3, r3

}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <I2C__write>:
#define dev_SLA	0b1101000

#define start_address 0b00000000

static uint8_t I2C__write(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af02      	add	r7, sp, #8
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	4613      	mov	r3, r2
 800766a:	73bb      	strb	r3, [r7, #14]

	//master send data to the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Transmit(clock->i2c_bus,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6958      	ldr	r0, [r3, #20]
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	b29b      	uxth	r3, r3
 8007674:	2264      	movs	r2, #100	@ 0x64
 8007676:	9200      	str	r2, [sp, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	21d0      	movs	r1, #208	@ 0xd0
 800767c:	f001 f942 	bl	8008904 <HAL_I2C_Master_Transmit>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf0c      	ite	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	2300      	movne	r3, #0
 800768e:	b2db      	uxtb	r3, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <I2C__read>:

static uint8_t I2C__read(uint8_t slave, uint8_t *data, uint8_t len,
		ds1307_t *clock) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af02      	add	r7, sp, #8
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]
 80076a6:	4613      	mov	r3, r2
 80076a8:	73bb      	strb	r3, [r7, #14]

	//master receive data from the slave (RTC)
	HAL_StatusTypeDef OK = HAL_I2C_Master_Receive(clock->i2c_bus,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6958      	ldr	r0, [r3, #20]
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2264      	movs	r2, #100	@ 0x64
 80076b4:	9200      	str	r2, [sp, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	21d0      	movs	r1, #208	@ 0xd0
 80076ba:	f001 fa21 	bl	8008b00 <HAL_I2C_Master_Receive>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]
			(dev_SLA << 1), data, len, 100);

	//check for the acknowledgment flag -> if 1 returned -> not acknowledged
	return (OK == HAL_OK) ? 1 : 0;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf0c      	ite	eq
 80076c8:	2301      	moveq	r3, #1
 80076ca:	2300      	movne	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <BCD2DEC>:

uint8_t BCD2DEC(uint8_t bcd) {
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	4603      	mov	r3, r0
 80076de:	71fb      	strb	r3, [r7, #7]

	return ((bcd >> 4) * 10 + (0xF & bcd));
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	0092      	lsls	r2, r2, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	b2db      	uxtb	r3, r3

}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr
	...

08007708 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t dec) {
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	71fb      	strb	r3, [r7, #7]

	uint8_t div = dec / 10;
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <DEC2BCD+0x48>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	08db      	lsrs	r3, r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
	uint8_t rem = dec % 10;
 800771e:	79fa      	ldrb	r2, [r7, #7]
 8007720:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <DEC2BCD+0x48>)
 8007722:	fba3 1302 	umull	r1, r3, r3, r2
 8007726:	08d9      	lsrs	r1, r3, #3
 8007728:	460b      	mov	r3, r1
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	73bb      	strb	r3, [r7, #14]

	return (div << 4 | rem);
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	b25a      	sxtb	r2, r3
 800773a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800773e:	4313      	orrs	r3, r2
 8007740:	b25b      	sxtb	r3, r3
 8007742:	b2db      	uxtb	r3, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	cccccccd 	.word	0xcccccccd

08007754 <Ds1307_init>:

//initializing the RTC
DS1307_state_t Ds1307_init(ds1307_t *clock, I2C_HandleTypeDef *i2c_bus) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]

	uint8_t status = 1;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]

	clock->i2c_bus = i2c_bus;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	615a      	str	r2, [r3, #20]

	clock->i2c_buffer[0] = 0x00;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
	status &= I2C__write(dev_SLA, clock->i2c_buffer, 1, clock);
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	2068      	movs	r0, #104	@ 0x68
 8007776:	f7ff ff70 	bl	800765a <I2C__write>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	4013      	ands	r3, r2
 8007782:	73fb      	strb	r3, [r7, #15]

	status &= I2C__read(dev_SLA, clock->i2c_buffer, 1, clock);
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	2068      	movs	r0, #104	@ 0x68
 800778c:	f7ff ff84 	bl	8007698 <I2C__read>
 8007790:	4603      	mov	r3, r0
 8007792:	461a      	mov	r2, r3
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	4013      	ands	r3, r2
 8007798:	73fb      	strb	r3, [r7, #15]

	if (((clock->i2c_buffer[0]) & (1 << 7)) == 0) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	da10      	bge.n	80077c6 <Ds1307_init+0x72>

	} else {

		clock->i2c_buffer[0] = 0x00; 	//reg base address
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]

		clock->i2c_buffer[1] = 0; 		//clock hold bit
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	705a      	strb	r2, [r3, #1]

		status &= I2C__write(dev_SLA, clock->i2c_buffer, 2, clock);
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	2068      	movs	r0, #104	@ 0x68
 80077b8:	f7ff ff4f 	bl	800765a <I2C__write>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	4013      	ands	r3, r2
 80077c4:	73fb      	strb	r3, [r7, #15]
	}

	if (status == 1) {
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <Ds1307_init+0x7c>

		return DS1307_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e000      	b.n	80077d2 <Ds1307_init+0x7e>
	} else {
		return DS1307_NOK;
 80077d0:	2301      	movs	r3, #1
	}

}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <Ds1307_set>:

//set the time function
DS1307_state_t Ds1307_set(ds1307_t *clock) {
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]

	clock->i2c_buffer[0] = start_address;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]

	clock->i2c_buffer[1] = DEC2BCD(clock->sec);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7a1b      	ldrb	r3, [r3, #8]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff ff8b 	bl	8007708 <DEC2BCD>
 80077f2:	4603      	mov	r3, r0
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	705a      	strb	r2, [r3, #1]

	clock->i2c_buffer[2] = DEC2BCD(clock->min);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7a5b      	ldrb	r3, [r3, #9]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ff82 	bl	8007708 <DEC2BCD>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	709a      	strb	r2, [r3, #2]

	//in case of PMAM is selected (12H format)
	if (clock->format == 1) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7c5b      	ldrb	r3, [r3, #17]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01c      	beq.n	8007854 <Ds1307_set+0x7a>

		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->format) << 6)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7a9b      	ldrb	r3, [r3, #10]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff ff72 	bl	8007708 <DEC2BCD>
 8007824:	4603      	mov	r3, r0
 8007826:	b25a      	sxtb	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7c5b      	ldrb	r3, [r3, #17]
 800782c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007830:	b2db      	uxtb	r3, r3
 8007832:	019b      	lsls	r3, r3, #6
 8007834:	b25b      	sxtb	r3, r3
 8007836:	4313      	orrs	r3, r2
 8007838:	b25a      	sxtb	r2, r3
				| ((clock->AM_PM) << 5);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7c5b      	ldrb	r3, [r3, #17]
 800783e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007842:	b2db      	uxtb	r3, r3
 8007844:	015b      	lsls	r3, r3, #5
 8007846:	b25b      	sxtb	r3, r3
 8007848:	4313      	orrs	r3, r2
 800784a:	b25b      	sxtb	r3, r3
 800784c:	b2da      	uxtb	r2, r3
		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->format) << 6)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	70da      	strb	r2, [r3, #3]
 8007852:	e012      	b.n	800787a <Ds1307_set+0xa0>
	}

	//case of 24h format
	else {

		clock->i2c_buffer[3] = DEC2BCD(clock->hour) | ((clock->AM_PM) << 5);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7a9b      	ldrb	r3, [r3, #10]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ff55 	bl	8007708 <DEC2BCD>
 800785e:	4603      	mov	r3, r0
 8007860:	b25a      	sxtb	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7c5b      	ldrb	r3, [r3, #17]
 8007866:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	015b      	lsls	r3, r3, #5
 800786e:	b25b      	sxtb	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b25b      	sxtb	r3, r3
 8007874:	b2da      	uxtb	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	70da      	strb	r2, [r3, #3]

	}

	clock->i2c_buffer[4] = DEC2BCD(clock->day) & 0x7;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7adb      	ldrb	r3, [r3, #11]
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff ff42 	bl	8007708 <DEC2BCD>
 8007884:	4603      	mov	r3, r0
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	b2da      	uxtb	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	711a      	strb	r2, [r3, #4]

	clock->i2c_buffer[5] = DEC2BCD(clock->date) & 0x3f;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	7b1b      	ldrb	r3, [r3, #12]
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ff37 	bl	8007708 <DEC2BCD>
 800789a:	4603      	mov	r3, r0
 800789c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	715a      	strb	r2, [r3, #5]

	clock->i2c_buffer[6] = DEC2BCD(clock->month) & 0x1f;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7b5b      	ldrb	r3, [r3, #13]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff ff2c 	bl	8007708 <DEC2BCD>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	719a      	strb	r2, [r3, #6]

	clock->i2c_buffer[7] = DEC2BCD(clock->year - 2000);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	89db      	ldrh	r3, [r3, #14]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	3330      	adds	r3, #48	@ 0x30
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff ff1e 	bl	8007708 <DEC2BCD>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	71da      	strb	r2, [r3, #7]

	if (I2C__write(dev_SLA, clock->i2c_buffer, 8, clock) == 1) {
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2208      	movs	r2, #8
 80078da:	2068      	movs	r0, #104	@ 0x68
 80078dc:	f7ff febd 	bl	800765a <I2C__write>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <Ds1307_set+0x110>

		return DS1307_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <Ds1307_set+0x112>
	} else {

		return DS1307_NOK;
 80078ea:	2301      	movs	r3, #1
	}
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <Ds1307_read>:

//read the time function
DS1307_state_t Ds1307_read(ds1307_t *clock) {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	clock->i2c_buffer[0] = start_address;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]

	    if (I2C__write(dev_SLA, clock->i2c_buffer, 1, clock) == 1) {
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	2068      	movs	r0, #104	@ 0x68
 800790a:	f7ff fea6 	bl	800765a <I2C__write>
 800790e:	4603      	mov	r3, r0
 8007910:	2b01      	cmp	r3, #1
 8007912:	f040 8088 	bne.w	8007a26 <Ds1307_read+0x132>
	        if (I2C__read(dev_SLA, clock->i2c_buffer, 7, clock) == 1) {
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2207      	movs	r2, #7
 800791c:	2068      	movs	r0, #104	@ 0x68
 800791e:	f7ff febb 	bl	8007698 <I2C__read>
 8007922:	4603      	mov	r3, r0
 8007924:	2b01      	cmp	r3, #1
 8007926:	d17e      	bne.n	8007a26 <Ds1307_read+0x132>
	            clock->sec = BCD2DEC(clock->i2c_buffer[0] & 0x7F);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007930:	b2db      	uxtb	r3, r3
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff fecf 	bl	80076d6 <BCD2DEC>
 8007938:	4603      	mov	r3, r0
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	721a      	strb	r2, [r3, #8]
	            clock->min = BCD2DEC(clock->i2c_buffer[1]);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff fec6 	bl	80076d6 <BCD2DEC>
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	725a      	strb	r2, [r3, #9]
	            clock->format = (clock->i2c_buffer[2] & 0b01000000) >> 6;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	789b      	ldrb	r3, [r3, #2]
 8007956:	119b      	asrs	r3, r3, #6
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	b2d9      	uxtb	r1, r3
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	7c53      	ldrb	r3, [r2, #17]
 8007962:	f361 0300 	bfi	r3, r1, #0, #1
 8007966:	7453      	strb	r3, [r2, #17]

	            if (clock->format == 1) { // 12h format
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7c5b      	ldrb	r3, [r3, #17]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <Ds1307_read+0xb2>
	                clock->hour = BCD2DEC(clock->i2c_buffer[2] & 0b00011111);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	789b      	ldrb	r3, [r3, #2]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fea8 	bl	80076d6 <BCD2DEC>
 8007986:	4603      	mov	r3, r0
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	729a      	strb	r2, [r3, #10]
	                clock->AM_PM = (clock->i2c_buffer[2] & 0b00100000) >> 5;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	789b      	ldrb	r3, [r3, #2]
 8007992:	115b      	asrs	r3, r3, #5
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	b2d9      	uxtb	r1, r3
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	7c53      	ldrb	r3, [r2, #17]
 800799e:	f361 0341 	bfi	r3, r1, #1, #1
 80079a2:	7453      	strb	r3, [r2, #17]
 80079a4:	e017      	b.n	80079d6 <Ds1307_read+0xe2>
	            } else { // 24h format
	                clock->hour = BCD2DEC(clock->i2c_buffer[2] & 0b00111111);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	789b      	ldrb	r3, [r3, #2]
 80079aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fe90 	bl	80076d6 <BCD2DEC>
 80079b6:	4603      	mov	r3, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	729a      	strb	r2, [r3, #10]
	                clock->AM_PM = (clock->hour > 11) ? 1 : 0;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	7a9b      	ldrb	r3, [r3, #10]
 80079c2:	2b0b      	cmp	r3, #11
 80079c4:	bf8c      	ite	hi
 80079c6:	2301      	movhi	r3, #1
 80079c8:	2300      	movls	r3, #0
 80079ca:	b2d9      	uxtb	r1, r3
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	7c53      	ldrb	r3, [r2, #17]
 80079d0:	f361 0341 	bfi	r3, r1, #1, #1
 80079d4:	7453      	strb	r3, [r2, #17]
	            }

	            clock->day = BCD2DEC(clock->i2c_buffer[3]);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	78db      	ldrb	r3, [r3, #3]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fe7b 	bl	80076d6 <BCD2DEC>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	72da      	strb	r2, [r3, #11]
	            clock->date = BCD2DEC(clock->i2c_buffer[4]);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	791b      	ldrb	r3, [r3, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fe72 	bl	80076d6 <BCD2DEC>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	731a      	strb	r2, [r3, #12]
	            clock->month = BCD2DEC(clock->i2c_buffer[5]);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	795b      	ldrb	r3, [r3, #5]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fe69 	bl	80076d6 <BCD2DEC>
 8007a04:	4603      	mov	r3, r0
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	735a      	strb	r2, [r3, #13]
	            clock->year = BCD2DEC(clock->i2c_buffer[6]) + 2000;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	799b      	ldrb	r3, [r3, #6]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fe60 	bl	80076d6 <BCD2DEC>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	81da      	strh	r2, [r3, #14]

	            return DS1307_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e000      	b.n	8007a28 <Ds1307_read+0x134>
	        }
	    }
	    return DS1307_NOK;
 8007a26:	2301      	movs	r3, #1
	}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8007a38:	4b0d      	ldr	r3, [pc, #52]	@ (8007a70 <DWT_Delay_us+0x40>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8007a3e:	f002 fefd 	bl	800a83c <HAL_RCC_GetHCLKFreq>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4a0b      	ldr	r2, [pc, #44]	@ (8007a74 <DWT_Delay_us+0x44>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	0c9b      	lsrs	r3, r3, #18
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	fb02 f303 	mul.w	r3, r2, r3
 8007a52:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8007a54:	bf00      	nop
 8007a56:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <DWT_Delay_us+0x40>)
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1ad2      	subs	r2, r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d3f8      	bcc.n	8007a56 <DWT_Delay_us+0x26>
		;
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	e0001000 	.word	0xe0001000
 8007a74:	431bde83 	.word	0x431bde83

08007a78 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff ffd3 	bl	8007a30 <DWT_Delay_us>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7a1b      	ldrb	r3, [r3, #8]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	230f      	movs	r3, #15
 8007aac:	408b      	lsls	r3, r1
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	400a      	ands	r2, r1
 8007ab8:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	7a09      	ldrb	r1, [r1, #8]
 8007ac6:	408b      	lsls	r3, r1
 8007ac8:	4619      	mov	r1, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	60da      	str	r2, [r3, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6958      	ldr	r0, [r3, #20]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8b1b      	ldrh	r3, [r3, #24]
 8007af0:	78fa      	ldrb	r2, [r7, #3]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f000 fdaa 	bl	800864c <HAL_GPIO_WritePin>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68d8      	ldr	r0, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8a1b      	ldrh	r3, [r3, #16]
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	4619      	mov	r1, r3
 8007b18:	f000 fd98 	bl	800864c <HAL_GPIO_WritePin>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8007b2c:	f107 0308 	add.w	r3, r7, #8
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	605a      	str	r2, [r3, #4]
 8007b36:	609a      	str	r2, [r3, #8]
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8b1b      	ldrh	r3, [r3, #24]
 8007b3e:	60bb      	str	r3, [r7, #8]
 8007b40:	2301      	movs	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	2302      	movs	r3, #2
 8007b46:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fbf6 	bl	8008344 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8a1b      	ldrh	r3, [r3, #16]
 8007b5c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f107 0208 	add.w	r2, r7, #8
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fbeb 	bl	8008344 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7a1b      	ldrb	r3, [r3, #8]
 8007b72:	461a      	mov	r2, r3
 8007b74:	230f      	movs	r3, #15
 8007b76:	4093      	lsls	r3, r2
 8007b78:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f107 0208 	add.w	r2, r7, #8
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fbdd 	bl	8008344 <HAL_GPIO_Init>
}
 8007b8a:	bf00      	nop
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ff98 	bl	8007adc <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8007bac:	78bb      	ldrb	r3, [r7, #2]
 8007bae:	091b      	lsrs	r3, r3, #4
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ff6c 	bl	8007a92 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8007bba:	2101      	movs	r1, #1
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff9f 	bl	8007b00 <EN_SET>
 8007bc2:	200a      	movs	r0, #10
 8007bc4:	f7ff ff58 	bl	8007a78 <usDelay>
 8007bc8:	2100      	movs	r1, #0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff ff98 	bl	8007b00 <EN_SET>
 8007bd0:	2064      	movs	r0, #100	@ 0x64
 8007bd2:	f7ff ff51 	bl	8007a78 <usDelay>
	;
	Write_HalfByte(lcd, value);
 8007bd6:	78bb      	ldrb	r3, [r7, #2]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ff59 	bl	8007a92 <Write_HalfByte>
	PulseEn
 8007be0:	2101      	movs	r1, #1
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff ff8c 	bl	8007b00 <EN_SET>
 8007be8:	200a      	movs	r0, #10
 8007bea:	f7ff ff45 	bl	8007a78 <usDelay>
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff ff85 	bl	8007b00 <EN_SET>
 8007bf6:	2064      	movs	r0, #100	@ 0x64
 8007bf8:	f7ff ff3e 	bl	8007a78 <usDelay>
	;
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
 8007c10:	4613      	mov	r3, r2
 8007c12:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8007c14:	f7ff fc9a 	bl	800754c <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff83 	bl	8007b24 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2240      	movs	r2, #64	@ 0x40
 8007c28:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	78ba      	ldrb	r2, [r7, #2]
 8007c2e:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8007c30:	78bb      	ldrb	r3, [r7, #2]
 8007c32:	3340      	adds	r3, #64	@ 0x40
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ff4d 	bl	8007adc <RS_SET>
	EN_SET(lcd, 0);
 8007c42:	2100      	movs	r1, #0
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff5b 	bl	8007b00 <EN_SET>
	usDelay(50000);
 8007c4a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007c4e:	f7ff ff13 	bl	8007a78 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	e018      	b.n	8007c8a <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 8007c58:	2103      	movs	r1, #3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff19 	bl	8007a92 <Write_HalfByte>
		PulseEn
 8007c60:	2101      	movs	r1, #1
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ff4c 	bl	8007b00 <EN_SET>
 8007c68:	200a      	movs	r0, #10
 8007c6a:	f7ff ff05 	bl	8007a78 <usDelay>
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff45 	bl	8007b00 <EN_SET>
 8007c76:	2064      	movs	r0, #100	@ 0x64
 8007c78:	f7ff fefe 	bl	8007a78 <usDelay>
		;
		usDelay(4500);
 8007c7c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8007c80:	f7ff fefa 	bl	8007a78 <usDelay>
	for (x = 0; x < 2; x++) {
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	3301      	adds	r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d9e3      	bls.n	8007c58 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8007c90:	2103      	movs	r1, #3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fefd 	bl	8007a92 <Write_HalfByte>
	PulseEn
 8007c98:	2101      	movs	r1, #1
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ff30 	bl	8007b00 <EN_SET>
 8007ca0:	200a      	movs	r0, #10
 8007ca2:	f7ff fee9 	bl	8007a78 <usDelay>
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ff29 	bl	8007b00 <EN_SET>
 8007cae:	2064      	movs	r0, #100	@ 0x64
 8007cb0:	f7ff fee2 	bl	8007a78 <usDelay>
	;
	usDelay(150);
 8007cb4:	2096      	movs	r0, #150	@ 0x96
 8007cb6:	f7ff fedf 	bl	8007a78 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8007cba:	2102      	movs	r1, #2
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff fee8 	bl	8007a92 <Write_HalfByte>
	PulseEn
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ff1b 	bl	8007b00 <EN_SET>
 8007cca:	200a      	movs	r0, #10
 8007ccc:	f7ff fed4 	bl	8007a78 <usDelay>
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff14 	bl	8007b00 <EN_SET>
 8007cd8:	2064      	movs	r0, #100	@ 0x64
 8007cda:	f7ff fecd 	bl	8007a78 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8007cde:	2228      	movs	r2, #40	@ 0x28
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff ff55 	bl	8007b92 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2200      	movs	r2, #0
 8007cec:	2101      	movs	r1, #1
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f86d 	bl	8007dce <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f859 	bl	8007dac <Alcd_Clear>
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	4413      	add	r3, r2
 8007d18:	7e9a      	ldrb	r2, [r3, #26]
 8007d1a:	78bb      	ldrb	r3, [r7, #2]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	b25b      	sxtb	r3, r3
 8007d22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d26:	b25b      	sxtb	r3, r3
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff ff2f 	bl	8007b92 <Alcd_SendByte>
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]
 8007d4e:	e00b      	b.n	8007d68 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	60ba      	str	r2, [r7, #8]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff ff18 	bl	8007b92 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	3301      	adds	r3, #1
 8007d66:	75fb      	strb	r3, [r7, #23]
 8007d68:	7dfa      	ldrb	r2, [r7, #23]
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d3ef      	bcc.n	8007d50 <Alcd_Put_n+0x14>
	}
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	607b      	str	r3, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	72fb      	strb	r3, [r7, #11]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8007d8c:	7aba      	ldrb	r2, [r7, #10]
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	4619      	mov	r1, r3
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ffb5 	bl	8007d02 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8007d98:	7e3b      	ldrb	r3, [r7, #24]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff ffcc 	bl	8007d3c <Alcd_Put_n>
}
 8007da4:	bf00      	nop
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8007db4:	2201      	movs	r2, #1
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff feea 	bl	8007b92 <Alcd_SendByte>
	usDelay(2000);
 8007dbe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007dc2:	f7ff fe59 	bl	8007a78 <usDelay>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	4611      	mov	r1, r2
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4603      	mov	r3, r0
 8007dde:	70fb      	strb	r3, [r7, #3]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70bb      	strb	r3, [r7, #2]
 8007de4:	4613      	mov	r3, r2
 8007de6:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7f9b      	ldrb	r3, [r3, #30]
 8007df8:	f043 0304 	orr.w	r3, r3, #4
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 8007e02:	78bb      	ldrb	r3, [r7, #2]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7f9b      	ldrb	r3, [r3, #30]
 8007e0c:	f043 0302 	orr.w	r3, r3, #2
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 8007e16:	787b      	ldrb	r3, [r7, #1]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d006      	beq.n	8007e2a <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7f9b      	ldrb	r3, [r3, #30]
 8007e20:	f043 0301 	orr.w	r3, r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7f9b      	ldrb	r3, [r3, #30]
 8007e2e:	f043 0304 	orr.w	r3, r3, #4
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7f9b      	ldrb	r3, [r3, #30]
 8007e3c:	f043 0308 	orr.w	r3, r3, #8
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	2100      	movs	r1, #0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fea3 	bl	8007b92 <Alcd_SendByte>
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	int len = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8007e60:	e002      	b.n	8007e68 <Str_Len+0x14>
		len++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f6      	bne.n	8007e62 <Str_Len+0xe>
	}
	return len;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <Keypad_GetInputs>:
 */

#include "Matrix_Keypad.h"

/// @brief Reads the input status from the input port
static uint16_t Keypad_GetInputs(Matrix_Keypad_t *keypad) {
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	uint16_t Input = keypad->IntputPort->IDR & keypad->IP_Mask;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8b1b      	ldrh	r3, [r3, #24]
 8007e94:	4013      	ands	r3, r2
 8007e96:	81fb      	strh	r3, [r7, #14]
	return (Input >> keypad->InputStartingPin);
 8007e98:	89fa      	ldrh	r2, [r7, #14]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	fa42 f303 	asr.w	r3, r2, r3
 8007ea2:	b29b      	uxth	r3, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr

08007eae <Keypad_SetOutputs>:

///@brief Write the status of output ports
static void Keypad_SetOutputs(Matrix_Keypad_t *keypad, uint16_t OutputStat) {
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	807b      	strh	r3, [r7, #2]
	//turn off the pins
	keypad->OutputPort->BRR |= keypad->OP_Mask;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	695a      	ldr	r2, [r3, #20]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8b5b      	ldrh	r3, [r3, #26]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	615a      	str	r2, [r3, #20]
	//turn on only the needed ones according to the required output
	keypad->OutputPort->BSRR |= (OutputStat << keypad->OutputStartingPin);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	8879      	ldrh	r1, [r7, #2]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	fa01 f303 	lsl.w	r3, r1, r3
 8007ede:	4619      	mov	r1, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	611a      	str	r2, [r3, #16]
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr

08007ef2 <Keypad_Delay>:

/// @fn void Keypad_Delay(uint32_t)
/// @brief
/// Halts the program execution for a certain time
/// @param delay_ms delay value in milliseconds
static void Keypad_Delay(uint32_t delay_ms) {
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f91a 	bl	8008134 <HAL_Delay>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <Keypad_Refresh>:

void Keypad_Refresh(Matrix_Keypad_t *keypad) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
// temporary variable to store the new status of keys
	uint32_t TempKeys = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]
	uint16_t OutputStat = 1 << (keypad->Rows - 1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	817b      	strh	r3, [r7, #10]

	uint16_t x = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	813b      	strh	r3, [r7, #8]
	do {

		TempKeys <<= keypad->Columns;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4093      	lsls	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
		// send the output status to the hardware
		Keypad_SetOutputs(keypad, OutputStat);
 8007f32:	897b      	ldrh	r3, [r7, #10]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff ffb9 	bl	8007eae <Keypad_SetOutputs>
		Keypad_Delay(1);
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	f7ff ffd8 	bl	8007ef2 <Keypad_Delay>
		// read the input status from the hardware

		TempKeys |= Keypad_GetInputs(keypad);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff ff9c 	bl	8007e80 <Keypad_GetInputs>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
		OutputStat >>= 1;
 8007f52:	897b      	ldrh	r3, [r7, #10]
 8007f54:	085b      	lsrs	r3, r3, #1
 8007f56:	817b      	strh	r3, [r7, #10]
		x++;
 8007f58:	893b      	ldrh	r3, [r7, #8]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	813b      	strh	r3, [r7, #8]
	} while (x < keypad->Rows);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	893b      	ldrh	r3, [r7, #8]
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d3dd      	bcc.n	8007f26 <Keypad_Refresh+0x1e>

	keypad->KeysStatus = TempKeys;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	605a      	str	r2, [r3, #4]
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <Keypad_Init>:

void Keypad_Init(Matrix_Keypad_t *keypad) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	@ 0x28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef config;

//put a logic 1 in every position where an input pin is selected
	uint16_t Pins = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	84fb      	strh	r3, [r7, #38]	@ 0x26

//configure the columns gpio pins as inputs
//enable pull down resistors to eliminate the use of external ones
	for (int x = 0; x < keypad->Columns; x++) {
 8007f84:	2300      	movs	r3, #0
 8007f86:	623b      	str	r3, [r7, #32]
 8007f88:	e00f      	b.n	8007faa <Keypad_Init+0x32>
		Pins |= (1 << (x + keypad->InputStartingPin));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	4413      	add	r3, r2
 8007f92:	2201      	movs	r2, #1
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	b21a      	sxth	r2, r3
 8007f9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	b21b      	sxth	r3, r3
 8007fa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Columns; x++) {
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	623b      	str	r3, [r7, #32]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	dbe9      	blt.n	8007f8a <Keypad_Init+0x12>
	}
//Load the input pin Mask
	keypad->IP_Mask = Pins;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007fba:	831a      	strh	r2, [r3, #24]

	config.Mode = GPIO_MODE_INPUT;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	613b      	str	r3, [r7, #16]
	config.Pull = GPIO_PULLDOWN;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	617b      	str	r3, [r7, #20]
	config.Pin = Pins;
 8007fc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fc6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f107 020c 	add.w	r2, r7, #12
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f9b6 	bl	8008344 <HAL_GPIO_Init>

//configure the rows gpio pins as outputs
	Pins = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]
 8007fe0:	e00f      	b.n	8008002 <Keypad_Init+0x8a>
		Pins |= (1 << (x + keypad->OutputStartingPin));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695a      	ldr	r2, [r3, #20]
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	2201      	movs	r2, #1
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	b21a      	sxth	r2, r3
 8007ff2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b21b      	sxth	r3, r3
 8007ffa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (int x = 0; x < keypad->Rows; x++) {
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	3301      	adds	r3, #1
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4293      	cmp	r3, r2
 800800c:	dbe9      	blt.n	8007fe2 <Keypad_Init+0x6a>
	}

//Load the output pin Mask
	keypad->OP_Mask = Pins;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008012:	835a      	strh	r2, [r3, #26]

	config.Mode = GPIO_MODE_OUTPUT_PP;
 8008014:	2301      	movs	r3, #1
 8008016:	613b      	str	r3, [r7, #16]
	config.Speed = GPIO_SPEED_FREQ_LOW;
 8008018:	2302      	movs	r3, #2
 800801a:	61bb      	str	r3, [r7, #24]
	config.Pin = Pins;
 800801c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800801e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(keypad->IntputPort, &config);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f107 020c 	add.w	r2, r7, #12
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f98a 	bl	8008344 <HAL_GPIO_Init>

//turn off all the outputs
	Keypad_SetOutputs(keypad, 0);
 8008030:	2100      	movs	r1, #0
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff ff3b 	bl	8007eae <Keypad_SetOutputs>
}
 8008038:	bf00      	nop
 800803a:	3728      	adds	r7, #40	@ 0x28
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(Matrix_Keypad_t *keypad, uint8_t key) {
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
	return (keypad->KeysStatus & (1 << key)) ? 1 : 0;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	2101      	movs	r1, #1
 8008054:	fa01 f202 	lsl.w	r2, r1, r2
 8008058:	4013      	ands	r3, r2
 800805a:	2b00      	cmp	r3, #0
 800805c:	bf14      	ite	ne
 800805e:	2301      	movne	r3, #1
 8008060:	2300      	moveq	r3, #0
 8008062:	b2db      	uxtb	r3, r3
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr
	...

08008070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008074:	4b08      	ldr	r3, [pc, #32]	@ (8008098 <HAL_Init+0x28>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a07      	ldr	r2, [pc, #28]	@ (8008098 <HAL_Init+0x28>)
 800807a:	f043 0310 	orr.w	r3, r3, #16
 800807e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008080:	2003      	movs	r0, #3
 8008082:	f000 f92b 	bl	80082dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008086:	200f      	movs	r0, #15
 8008088:	f000 f808 	bl	800809c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800808c:	f7ff f90c 	bl	80072a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	40022000 	.word	0x40022000

0800809c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80080a4:	4b12      	ldr	r3, [pc, #72]	@ (80080f0 <HAL_InitTick+0x54>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <HAL_InitTick+0x58>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80080b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80080b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f935 	bl	800832a <HAL_SYSTICK_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e00e      	b.n	80080e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b0f      	cmp	r3, #15
 80080ce:	d80a      	bhi.n	80080e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080d0:	2200      	movs	r2, #0
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	f000 f90b 	bl	80082f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80080dc:	4a06      	ldr	r2, [pc, #24]	@ (80080f8 <HAL_InitTick+0x5c>)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	2000003c 	.word	0x2000003c
 80080f4:	20000044 	.word	0x20000044
 80080f8:	20000040 	.word	0x20000040

080080fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <HAL_IncTick+0x1c>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	4b05      	ldr	r3, [pc, #20]	@ (800811c <HAL_IncTick+0x20>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4413      	add	r3, r2
 800810c:	4a03      	ldr	r2, [pc, #12]	@ (800811c <HAL_IncTick+0x20>)
 800810e:	6013      	str	r3, [r2, #0]
}
 8008110:	bf00      	nop
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	20000044 	.word	0x20000044
 800811c:	20000190 	.word	0x20000190

08008120 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  return uwTick;
 8008124:	4b02      	ldr	r3, [pc, #8]	@ (8008130 <HAL_GetTick+0x10>)
 8008126:	681b      	ldr	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr
 8008130:	20000190 	.word	0x20000190

08008134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800813c:	f7ff fff0 	bl	8008120 <HAL_GetTick>
 8008140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d005      	beq.n	800815a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800814e:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <HAL_Delay+0x44>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800815a:	bf00      	nop
 800815c:	f7ff ffe0 	bl	8008120 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	429a      	cmp	r2, r3
 800816a:	d8f7      	bhi.n	800815c <HAL_Delay+0x28>
  {
  }
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000044 	.word	0x20000044

0800817c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800818c:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <__NVIC_SetPriorityGrouping+0x44>)
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008198:	4013      	ands	r3, r2
 800819a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80081a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80081a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80081ae:	4a04      	ldr	r2, [pc, #16]	@ (80081c0 <__NVIC_SetPriorityGrouping+0x44>)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	60d3      	str	r3, [r2, #12]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	e000ed00 	.word	0xe000ed00

080081c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80081c8:	4b04      	ldr	r3, [pc, #16]	@ (80081dc <__NVIC_GetPriorityGrouping+0x18>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	f003 0307 	and.w	r3, r3, #7
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	e000ed00 	.word	0xe000ed00

080081e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	db0a      	blt.n	800820a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	490c      	ldr	r1, [pc, #48]	@ (800822c <__NVIC_SetPriority+0x4c>)
 80081fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fe:	0112      	lsls	r2, r2, #4
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	440b      	add	r3, r1
 8008204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008208:	e00a      	b.n	8008220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	b2da      	uxtb	r2, r3
 800820e:	4908      	ldr	r1, [pc, #32]	@ (8008230 <__NVIC_SetPriority+0x50>)
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	3b04      	subs	r3, #4
 8008218:	0112      	lsls	r2, r2, #4
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	440b      	add	r3, r1
 800821e:	761a      	strb	r2, [r3, #24]
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	e000e100 	.word	0xe000e100
 8008230:	e000ed00 	.word	0xe000ed00

08008234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008234:	b480      	push	{r7}
 8008236:	b089      	sub	sp, #36	@ 0x24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f1c3 0307 	rsb	r3, r3, #7
 800824e:	2b04      	cmp	r3, #4
 8008250:	bf28      	it	cs
 8008252:	2304      	movcs	r3, #4
 8008254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	3304      	adds	r3, #4
 800825a:	2b06      	cmp	r3, #6
 800825c:	d902      	bls.n	8008264 <NVIC_EncodePriority+0x30>
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	3b03      	subs	r3, #3
 8008262:	e000      	b.n	8008266 <NVIC_EncodePriority+0x32>
 8008264:	2300      	movs	r3, #0
 8008266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008268:	f04f 32ff 	mov.w	r2, #4294967295
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43da      	mvns	r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	401a      	ands	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800827c:	f04f 31ff 	mov.w	r1, #4294967295
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	fa01 f303 	lsl.w	r3, r1, r3
 8008286:	43d9      	mvns	r1, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800828c:	4313      	orrs	r3, r2
         );
}
 800828e:	4618      	mov	r0, r3
 8008290:	3724      	adds	r7, #36	@ 0x24
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr

08008298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082a8:	d301      	bcc.n	80082ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80082aa:	2301      	movs	r3, #1
 80082ac:	e00f      	b.n	80082ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082ae:	4a0a      	ldr	r2, [pc, #40]	@ (80082d8 <SysTick_Config+0x40>)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80082b6:	210f      	movs	r1, #15
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	f7ff ff90 	bl	80081e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082c0:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <SysTick_Config+0x40>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082c6:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <SysTick_Config+0x40>)
 80082c8:	2207      	movs	r2, #7
 80082ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	e000e010 	.word	0xe000e010

080082dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ff49 	bl	800817c <__NVIC_SetPriorityGrouping>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b086      	sub	sp, #24
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	4603      	mov	r3, r0
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008304:	f7ff ff5e 	bl	80081c4 <__NVIC_GetPriorityGrouping>
 8008308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	6978      	ldr	r0, [r7, #20]
 8008310:	f7ff ff90 	bl	8008234 <NVIC_EncodePriority>
 8008314:	4602      	mov	r2, r0
 8008316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff5f 	bl	80081e0 <__NVIC_SetPriority>
}
 8008322:	bf00      	nop
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff ffb0 	bl	8008298 <SysTick_Config>
 8008338:	4603      	mov	r3, r0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008344:	b480      	push	{r7}
 8008346:	b08b      	sub	sp, #44	@ 0x2c
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800834e:	2300      	movs	r3, #0
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008352:	2300      	movs	r3, #0
 8008354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008356:	e169      	b.n	800862c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008358:	2201      	movs	r2, #1
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	429a      	cmp	r2, r3
 8008372:	f040 8158 	bne.w	8008626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4a9a      	ldr	r2, [pc, #616]	@ (80085e4 <HAL_GPIO_Init+0x2a0>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d05e      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 8008380:	4a98      	ldr	r2, [pc, #608]	@ (80085e4 <HAL_GPIO_Init+0x2a0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d875      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 8008386:	4a98      	ldr	r2, [pc, #608]	@ (80085e8 <HAL_GPIO_Init+0x2a4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d058      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 800838c:	4a96      	ldr	r2, [pc, #600]	@ (80085e8 <HAL_GPIO_Init+0x2a4>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d86f      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 8008392:	4a96      	ldr	r2, [pc, #600]	@ (80085ec <HAL_GPIO_Init+0x2a8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d052      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 8008398:	4a94      	ldr	r2, [pc, #592]	@ (80085ec <HAL_GPIO_Init+0x2a8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d869      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 800839e:	4a94      	ldr	r2, [pc, #592]	@ (80085f0 <HAL_GPIO_Init+0x2ac>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d04c      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 80083a4:	4a92      	ldr	r2, [pc, #584]	@ (80085f0 <HAL_GPIO_Init+0x2ac>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d863      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 80083aa:	4a92      	ldr	r2, [pc, #584]	@ (80085f4 <HAL_GPIO_Init+0x2b0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d046      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 80083b0:	4a90      	ldr	r2, [pc, #576]	@ (80085f4 <HAL_GPIO_Init+0x2b0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d85d      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 80083b6:	2b12      	cmp	r3, #18
 80083b8:	d82a      	bhi.n	8008410 <HAL_GPIO_Init+0xcc>
 80083ba:	2b12      	cmp	r3, #18
 80083bc:	d859      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 80083be:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <HAL_GPIO_Init+0x80>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	0800843f 	.word	0x0800843f
 80083c8:	08008419 	.word	0x08008419
 80083cc:	0800842b 	.word	0x0800842b
 80083d0:	0800846d 	.word	0x0800846d
 80083d4:	08008473 	.word	0x08008473
 80083d8:	08008473 	.word	0x08008473
 80083dc:	08008473 	.word	0x08008473
 80083e0:	08008473 	.word	0x08008473
 80083e4:	08008473 	.word	0x08008473
 80083e8:	08008473 	.word	0x08008473
 80083ec:	08008473 	.word	0x08008473
 80083f0:	08008473 	.word	0x08008473
 80083f4:	08008473 	.word	0x08008473
 80083f8:	08008473 	.word	0x08008473
 80083fc:	08008473 	.word	0x08008473
 8008400:	08008473 	.word	0x08008473
 8008404:	08008473 	.word	0x08008473
 8008408:	08008421 	.word	0x08008421
 800840c:	08008435 	.word	0x08008435
 8008410:	4a79      	ldr	r2, [pc, #484]	@ (80085f8 <HAL_GPIO_Init+0x2b4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d013      	beq.n	800843e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008416:	e02c      	b.n	8008472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	623b      	str	r3, [r7, #32]
          break;
 800841e:	e029      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	3304      	adds	r3, #4
 8008426:	623b      	str	r3, [r7, #32]
          break;
 8008428:	e024      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	3308      	adds	r3, #8
 8008430:	623b      	str	r3, [r7, #32]
          break;
 8008432:	e01f      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	330c      	adds	r3, #12
 800843a:	623b      	str	r3, [r7, #32]
          break;
 800843c:	e01a      	b.n	8008474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d102      	bne.n	800844c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008446:	2304      	movs	r3, #4
 8008448:	623b      	str	r3, [r7, #32]
          break;
 800844a:	e013      	b.n	8008474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d105      	bne.n	8008460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008454:	2308      	movs	r3, #8
 8008456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	611a      	str	r2, [r3, #16]
          break;
 800845e:	e009      	b.n	8008474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008460:	2308      	movs	r3, #8
 8008462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	615a      	str	r2, [r3, #20]
          break;
 800846a:	e003      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800846c:	2300      	movs	r3, #0
 800846e:	623b      	str	r3, [r7, #32]
          break;
 8008470:	e000      	b.n	8008474 <HAL_GPIO_Init+0x130>
          break;
 8008472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2bff      	cmp	r3, #255	@ 0xff
 8008478:	d801      	bhi.n	800847e <HAL_GPIO_Init+0x13a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	e001      	b.n	8008482 <HAL_GPIO_Init+0x13e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3304      	adds	r3, #4
 8008482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2bff      	cmp	r3, #255	@ 0xff
 8008488:	d802      	bhi.n	8008490 <HAL_GPIO_Init+0x14c>
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	e002      	b.n	8008496 <HAL_GPIO_Init+0x152>
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	3b08      	subs	r3, #8
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	210f      	movs	r1, #15
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	43db      	mvns	r3, r3
 80084a6:	401a      	ands	r2, r3
 80084a8:	6a39      	ldr	r1, [r7, #32]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	fa01 f303 	lsl.w	r3, r1, r3
 80084b0:	431a      	orrs	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80b1 	beq.w	8008626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80084c4:	4b4d      	ldr	r3, [pc, #308]	@ (80085fc <HAL_GPIO_Init+0x2b8>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	4a4c      	ldr	r2, [pc, #304]	@ (80085fc <HAL_GPIO_Init+0x2b8>)
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	6193      	str	r3, [r2, #24]
 80084d0:	4b4a      	ldr	r3, [pc, #296]	@ (80085fc <HAL_GPIO_Init+0x2b8>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80084dc:	4a48      	ldr	r2, [pc, #288]	@ (8008600 <HAL_GPIO_Init+0x2bc>)
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	089b      	lsrs	r3, r3, #2
 80084e2:	3302      	adds	r3, #2
 80084e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	220f      	movs	r2, #15
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	43db      	mvns	r3, r3
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4013      	ands	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a40      	ldr	r2, [pc, #256]	@ (8008604 <HAL_GPIO_Init+0x2c0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d013      	beq.n	8008530 <HAL_GPIO_Init+0x1ec>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3f      	ldr	r2, [pc, #252]	@ (8008608 <HAL_GPIO_Init+0x2c4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00d      	beq.n	800852c <HAL_GPIO_Init+0x1e8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3e      	ldr	r2, [pc, #248]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d007      	beq.n	8008528 <HAL_GPIO_Init+0x1e4>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3d      	ldr	r2, [pc, #244]	@ (8008610 <HAL_GPIO_Init+0x2cc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d101      	bne.n	8008524 <HAL_GPIO_Init+0x1e0>
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <HAL_GPIO_Init+0x1ee>
 8008524:	2304      	movs	r3, #4
 8008526:	e004      	b.n	8008532 <HAL_GPIO_Init+0x1ee>
 8008528:	2302      	movs	r3, #2
 800852a:	e002      	b.n	8008532 <HAL_GPIO_Init+0x1ee>
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <HAL_GPIO_Init+0x1ee>
 8008530:	2300      	movs	r3, #0
 8008532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008534:	f002 0203 	and.w	r2, r2, #3
 8008538:	0092      	lsls	r2, r2, #2
 800853a:	4093      	lsls	r3, r2
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4313      	orrs	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008542:	492f      	ldr	r1, [pc, #188]	@ (8008600 <HAL_GPIO_Init+0x2bc>)
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	089b      	lsrs	r3, r3, #2
 8008548:	3302      	adds	r3, #2
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d006      	beq.n	800856a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800855c:	4b2d      	ldr	r3, [pc, #180]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	492c      	ldr	r1, [pc, #176]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	4313      	orrs	r3, r2
 8008566:	608b      	str	r3, [r1, #8]
 8008568:	e006      	b.n	8008578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800856a:	4b2a      	ldr	r3, [pc, #168]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 800856c:	689a      	ldr	r2, [r3, #8]
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	43db      	mvns	r3, r3
 8008572:	4928      	ldr	r1, [pc, #160]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 8008574:	4013      	ands	r3, r2
 8008576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008584:	4b23      	ldr	r3, [pc, #140]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	4922      	ldr	r1, [pc, #136]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	4313      	orrs	r3, r2
 800858e:	60cb      	str	r3, [r1, #12]
 8008590:	e006      	b.n	80085a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008592:	4b20      	ldr	r3, [pc, #128]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	43db      	mvns	r3, r3
 800859a:	491e      	ldr	r1, [pc, #120]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 800859c:	4013      	ands	r3, r2
 800859e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d006      	beq.n	80085ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80085ac:	4b19      	ldr	r3, [pc, #100]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4918      	ldr	r1, [pc, #96]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	604b      	str	r3, [r1, #4]
 80085b8:	e006      	b.n	80085c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80085ba:	4b16      	ldr	r3, [pc, #88]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	43db      	mvns	r3, r3
 80085c2:	4914      	ldr	r1, [pc, #80]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d021      	beq.n	8008618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80085d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	490e      	ldr	r1, [pc, #56]	@ (8008614 <HAL_GPIO_Init+0x2d0>)
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	4313      	orrs	r3, r2
 80085de:	600b      	str	r3, [r1, #0]
 80085e0:	e021      	b.n	8008626 <HAL_GPIO_Init+0x2e2>
 80085e2:	bf00      	nop
 80085e4:	10320000 	.word	0x10320000
 80085e8:	10310000 	.word	0x10310000
 80085ec:	10220000 	.word	0x10220000
 80085f0:	10210000 	.word	0x10210000
 80085f4:	10120000 	.word	0x10120000
 80085f8:	10110000 	.word	0x10110000
 80085fc:	40021000 	.word	0x40021000
 8008600:	40010000 	.word	0x40010000
 8008604:	40010800 	.word	0x40010800
 8008608:	40010c00 	.word	0x40010c00
 800860c:	40011000 	.word	0x40011000
 8008610:	40011400 	.word	0x40011400
 8008614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008618:	4b0b      	ldr	r3, [pc, #44]	@ (8008648 <HAL_GPIO_Init+0x304>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	43db      	mvns	r3, r3
 8008620:	4909      	ldr	r1, [pc, #36]	@ (8008648 <HAL_GPIO_Init+0x304>)
 8008622:	4013      	ands	r3, r2
 8008624:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008628:	3301      	adds	r3, #1
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	fa22 f303 	lsr.w	r3, r2, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	f47f ae8e 	bne.w	8008358 <HAL_GPIO_Init+0x14>
  }
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	372c      	adds	r7, #44	@ 0x2c
 8008642:	46bd      	mov	sp, r7
 8008644:	bc80      	pop	{r7}
 8008646:	4770      	bx	lr
 8008648:	40010400 	.word	0x40010400

0800864c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	807b      	strh	r3, [r7, #2]
 8008658:	4613      	mov	r3, r2
 800865a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800865c:	787b      	ldrb	r3, [r7, #1]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008662:	887a      	ldrh	r2, [r7, #2]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008668:	e003      	b.n	8008672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800866a:	887b      	ldrh	r3, [r7, #2]
 800866c:	041a      	lsls	r2, r3, #16
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	611a      	str	r2, [r3, #16]
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr

0800867c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e12b      	b.n	80088e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7fe fe32 	bl	800730c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2224      	movs	r2, #36	@ 0x24
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80086e0:	f002 f8b6 	bl	800a850 <HAL_RCC_GetPCLK1Freq>
 80086e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4a81      	ldr	r2, [pc, #516]	@ (80088f0 <HAL_I2C_Init+0x274>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d807      	bhi.n	8008700 <HAL_I2C_Init+0x84>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4a80      	ldr	r2, [pc, #512]	@ (80088f4 <HAL_I2C_Init+0x278>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	bf94      	ite	ls
 80086f8:	2301      	movls	r3, #1
 80086fa:	2300      	movhi	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	e006      	b.n	800870e <HAL_I2C_Init+0x92>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a7d      	ldr	r2, [pc, #500]	@ (80088f8 <HAL_I2C_Init+0x27c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	bf94      	ite	ls
 8008708:	2301      	movls	r3, #1
 800870a:	2300      	movhi	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e0e7      	b.n	80088e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4a78      	ldr	r2, [pc, #480]	@ (80088fc <HAL_I2C_Init+0x280>)
 800871a:	fba2 2303 	umull	r2, r3, r2, r3
 800871e:	0c9b      	lsrs	r3, r3, #18
 8008720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	4a6a      	ldr	r2, [pc, #424]	@ (80088f0 <HAL_I2C_Init+0x274>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d802      	bhi.n	8008750 <HAL_I2C_Init+0xd4>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3301      	adds	r3, #1
 800874e:	e009      	b.n	8008764 <HAL_I2C_Init+0xe8>
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	4a69      	ldr	r2, [pc, #420]	@ (8008900 <HAL_I2C_Init+0x284>)
 800875c:	fba2 2303 	umull	r2, r3, r2, r3
 8008760:	099b      	lsrs	r3, r3, #6
 8008762:	3301      	adds	r3, #1
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	430b      	orrs	r3, r1
 800876a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	495c      	ldr	r1, [pc, #368]	@ (80088f0 <HAL_I2C_Init+0x274>)
 8008780:	428b      	cmp	r3, r1
 8008782:	d819      	bhi.n	80087b8 <HAL_I2C_Init+0x13c>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	1e59      	subs	r1, r3, #1
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008798:	400b      	ands	r3, r1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <HAL_I2C_Init+0x138>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1e59      	subs	r1, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80087ac:	3301      	adds	r3, #1
 80087ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087b2:	e051      	b.n	8008858 <HAL_I2C_Init+0x1dc>
 80087b4:	2304      	movs	r3, #4
 80087b6:	e04f      	b.n	8008858 <HAL_I2C_Init+0x1dc>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d111      	bne.n	80087e4 <HAL_I2C_Init+0x168>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	1e58      	subs	r0, r3, #1
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6859      	ldr	r1, [r3, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	440b      	add	r3, r1
 80087ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80087d2:	3301      	adds	r3, #1
 80087d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	e012      	b.n	800880a <HAL_I2C_Init+0x18e>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1e58      	subs	r0, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6859      	ldr	r1, [r3, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	0099      	lsls	r1, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087fa:	3301      	adds	r3, #1
 80087fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf0c      	ite	eq
 8008804:	2301      	moveq	r3, #1
 8008806:	2300      	movne	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <HAL_I2C_Init+0x196>
 800880e:	2301      	movs	r3, #1
 8008810:	e022      	b.n	8008858 <HAL_I2C_Init+0x1dc>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10e      	bne.n	8008838 <HAL_I2C_Init+0x1bc>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1e58      	subs	r0, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6859      	ldr	r1, [r3, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	440b      	add	r3, r1
 8008828:	fbb0 f3f3 	udiv	r3, r0, r3
 800882c:	3301      	adds	r3, #1
 800882e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008836:	e00f      	b.n	8008858 <HAL_I2C_Init+0x1dc>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	1e58      	subs	r0, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6859      	ldr	r1, [r3, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	0099      	lsls	r1, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	fbb0 f3f3 	udiv	r3, r0, r3
 800884e:	3301      	adds	r3, #1
 8008850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	6809      	ldr	r1, [r1, #0]
 800885c:	4313      	orrs	r3, r2
 800885e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69da      	ldr	r2, [r3, #28]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	431a      	orrs	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6911      	ldr	r1, [r2, #16]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68d2      	ldr	r2, [r2, #12]
 8008892:	4311      	orrs	r1, r2
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	430b      	orrs	r3, r1
 800889a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695a      	ldr	r2, [r3, #20]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	000186a0 	.word	0x000186a0
 80088f4:	001e847f 	.word	0x001e847f
 80088f8:	003d08ff 	.word	0x003d08ff
 80088fc:	431bde83 	.word	0x431bde83
 8008900:	10624dd3 	.word	0x10624dd3

08008904 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af02      	add	r7, sp, #8
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	461a      	mov	r2, r3
 8008910:	460b      	mov	r3, r1
 8008912:	817b      	strh	r3, [r7, #10]
 8008914:	4613      	mov	r3, r2
 8008916:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008918:	f7ff fc02 	bl	8008120 <HAL_GetTick>
 800891c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b20      	cmp	r3, #32
 8008928:	f040 80e0 	bne.w	8008aec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	2319      	movs	r3, #25
 8008932:	2201      	movs	r2, #1
 8008934:	4970      	ldr	r1, [pc, #448]	@ (8008af8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f001 f98a 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008942:	2302      	movs	r3, #2
 8008944:	e0d3      	b.n	8008aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_I2C_Master_Transmit+0x50>
 8008950:	2302      	movs	r3, #2
 8008952:	e0cc      	b.n	8008aee <HAL_I2C_Master_Transmit+0x1ea>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b01      	cmp	r3, #1
 8008968:	d007      	beq.n	800897a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0201 	orr.w	r2, r2, #1
 8008978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008988:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2221      	movs	r2, #33	@ 0x21
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2210      	movs	r2, #16
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	893a      	ldrh	r2, [r7, #8]
 80089aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4a50      	ldr	r2, [pc, #320]	@ (8008afc <HAL_I2C_Master_Transmit+0x1f8>)
 80089ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089bc:	8979      	ldrh	r1, [r7, #10]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	6a3a      	ldr	r2, [r7, #32]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fe76 	bl	80096b4 <I2C_MasterRequestWrite>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e08d      	b.n	8008aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089d2:	2300      	movs	r3, #0
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089e8:	e066      	b.n	8008ab8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	6a39      	ldr	r1, [r7, #32]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f001 fa48 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00d      	beq.n	8008a16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d107      	bne.n	8008a12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e06b      	b.n	8008aee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d11b      	bne.n	8008a8c <HAL_I2C_Master_Transmit+0x188>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d017      	beq.n	8008a8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	6a39      	ldr	r1, [r7, #32]
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f001 fa3f 	bl	8009f14 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00d      	beq.n	8008ab8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d107      	bne.n	8008ab4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e01a      	b.n	8008aee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d194      	bne.n	80089ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e000      	b.n	8008aee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008aec:	2302      	movs	r3, #2
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	00100002 	.word	0x00100002
 8008afc:	ffff0000 	.word	0xffff0000

08008b00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08c      	sub	sp, #48	@ 0x30
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	817b      	strh	r3, [r7, #10]
 8008b10:	4613      	mov	r3, r2
 8008b12:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b18:	f7ff fb02 	bl	8008120 <HAL_GetTick>
 8008b1c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	f040 824b 	bne.w	8008fc2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2319      	movs	r3, #25
 8008b32:	2201      	movs	r2, #1
 8008b34:	497f      	ldr	r1, [pc, #508]	@ (8008d34 <HAL_I2C_Master_Receive+0x234>)
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f001 f88a 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008b42:	2302      	movs	r3, #2
 8008b44:	e23e      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_I2C_Master_Receive+0x54>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e237      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d007      	beq.n	8008b7a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2222      	movs	r2, #34	@ 0x22
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2210      	movs	r2, #16
 8008b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	893a      	ldrh	r2, [r7, #8]
 8008baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a5f      	ldr	r2, [pc, #380]	@ (8008d38 <HAL_I2C_Master_Receive+0x238>)
 8008bba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bbc:	8979      	ldrh	r1, [r7, #10]
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fdf8 	bl	80097b8 <I2C_MasterRequestRead>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e1f8      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d113      	bne.n	8008c02 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	61fb      	str	r3, [r7, #28]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	61fb      	str	r3, [r7, #28]
 8008bee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e1cc      	b.n	8008f9c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d11e      	bne.n	8008c48 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c1a:	b672      	cpsid	i
}
 8008c1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	61bb      	str	r3, [r7, #24]
 8008c32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008c44:	b662      	cpsie	i
}
 8008c46:	e035      	b.n	8008cb4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d11e      	bne.n	8008c8e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c60:	b672      	cpsid	i
}
 8008c62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008c8a:	b662      	cpsie	i
}
 8008c8c:	e012      	b.n	8008cb4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008cb4:	e172      	b.n	8008f9c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	f200 811f 	bhi.w	8008efe <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d123      	bne.n	8008d10 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 f969 	bl	8009fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e173      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d0e:	e145      	b.n	8008f9c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d152      	bne.n	8008dbe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1e:	2200      	movs	r2, #0
 8008d20:	4906      	ldr	r1, [pc, #24]	@ (8008d3c <HAL_I2C_Master_Receive+0x23c>)
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 ff94 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d008      	beq.n	8008d40 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e148      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
 8008d32:	bf00      	nop
 8008d34:	00100002 	.word	0x00100002
 8008d38:	ffff0000 	.word	0xffff0000
 8008d3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008d40:	b672      	cpsid	i
}
 8008d42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	691a      	ldr	r2, [r3, #16]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008d86:	b662      	cpsie	i
}
 8008d88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d94:	b2d2      	uxtb	r2, r2
 8008d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008dbc:	e0ee      	b.n	8008f9c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4981      	ldr	r1, [pc, #516]	@ (8008fcc <HAL_I2C_Master_Receive+0x4cc>)
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 ff41 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e0f5      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008de6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008de8:	b672      	cpsid	i
}
 8008dea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8008fd0 <HAL_I2C_Master_Receive+0x4d0>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	08db      	lsrs	r3, r3, #3
 8008e24:	4a6b      	ldr	r2, [pc, #428]	@ (8008fd4 <HAL_I2C_Master_Receive+0x4d4>)
 8008e26:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2a:	0a1a      	lsrs	r2, r3, #8
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	00da      	lsls	r2, r3, #3
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d118      	bne.n	8008e76 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008e66:	b662      	cpsie	i
}
 8008e68:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e0a6      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d1d9      	bne.n	8008e38 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008ec6:	b662      	cpsie	i
}
 8008ec8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	b2d2      	uxtb	r2, r2
 8008ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008efc:	e04e      	b.n	8008f9c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f001 f84e 	bl	8009fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e058      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d124      	bne.n	8008f9c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d107      	bne.n	8008f6a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f68:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f86:	3b01      	subs	r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f ae88 	bne.w	8008cb6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e000      	b.n	8008fc4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8008fc2:	2302      	movs	r3, #2
  }
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3728      	adds	r7, #40	@ 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	00010004 	.word	0x00010004
 8008fd0:	2000003c 	.word	0x2000003c
 8008fd4:	14f8b589 	.word	0x14f8b589

08008fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	4608      	mov	r0, r1
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	817b      	strh	r3, [r7, #10]
 8008fea:	460b      	mov	r3, r1
 8008fec:	813b      	strh	r3, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ff2:	f7ff f895 	bl	8008120 <HAL_GetTick>
 8008ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b20      	cmp	r3, #32
 8009002:	f040 80d9 	bne.w	80091b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	2319      	movs	r3, #25
 800900c:	2201      	movs	r2, #1
 800900e:	496d      	ldr	r1, [pc, #436]	@ (80091c4 <HAL_I2C_Mem_Write+0x1ec>)
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fe1d 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800901c:	2302      	movs	r3, #2
 800901e:	e0cc      	b.n	80091ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_I2C_Mem_Write+0x56>
 800902a:	2302      	movs	r3, #2
 800902c:	e0c5      	b.n	80091ba <HAL_I2C_Mem_Write+0x1e2>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b01      	cmp	r3, #1
 8009042:	d007      	beq.n	8009054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2221      	movs	r2, #33	@ 0x21
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2240      	movs	r2, #64	@ 0x40
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a3a      	ldr	r2, [r7, #32]
 800907e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4a4d      	ldr	r2, [pc, #308]	@ (80091c8 <HAL_I2C_Mem_Write+0x1f0>)
 8009094:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009096:	88f8      	ldrh	r0, [r7, #6]
 8009098:	893a      	ldrh	r2, [r7, #8]
 800909a:	8979      	ldrh	r1, [r7, #10]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	4603      	mov	r3, r0
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fc54 	bl	8009954 <I2C_RequestMemoryWrite>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d052      	beq.n	8009158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e081      	b.n	80091ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fee2 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00d      	beq.n	80090e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d107      	bne.n	80090de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e06b      	b.n	80091ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b04      	cmp	r3, #4
 800911e:	d11b      	bne.n	8009158 <HAL_I2C_Mem_Write+0x180>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009124:	2b00      	cmp	r3, #0
 8009126:	d017      	beq.n	8009158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009142:	3b01      	subs	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800914e:	b29b      	uxth	r3, r3
 8009150:	3b01      	subs	r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1aa      	bne.n	80090b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fed5 	bl	8009f14 <I2C_WaitOnBTFFlagUntilTimeout>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00d      	beq.n	800918c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009174:	2b04      	cmp	r3, #4
 8009176:	d107      	bne.n	8009188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e016      	b.n	80091ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800919a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	e000      	b.n	80091ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80091b8:	2302      	movs	r3, #2
  }
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	00100002 	.word	0x00100002
 80091c8:	ffff0000 	.word	0xffff0000

080091cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	@ 0x30
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	461a      	mov	r2, r3
 80091da:	4603      	mov	r3, r0
 80091dc:	817b      	strh	r3, [r7, #10]
 80091de:	460b      	mov	r3, r1
 80091e0:	813b      	strh	r3, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091ea:	f7fe ff99 	bl	8008120 <HAL_GetTick>
 80091ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	f040 8250 	bne.w	800969e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	2319      	movs	r3, #25
 8009204:	2201      	movs	r2, #1
 8009206:	4982      	ldr	r1, [pc, #520]	@ (8009410 <HAL_I2C_Mem_Read+0x244>)
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fd21 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009214:	2302      	movs	r3, #2
 8009216:	e243      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800921e:	2b01      	cmp	r3, #1
 8009220:	d101      	bne.n	8009226 <HAL_I2C_Mem_Read+0x5a>
 8009222:	2302      	movs	r3, #2
 8009224:	e23c      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b01      	cmp	r3, #1
 800923a:	d007      	beq.n	800924c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0201 	orr.w	r2, r2, #1
 800924a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800925a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2222      	movs	r2, #34	@ 0x22
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2240      	movs	r2, #64	@ 0x40
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800927c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4a62      	ldr	r2, [pc, #392]	@ (8009414 <HAL_I2C_Mem_Read+0x248>)
 800928c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800928e:	88f8      	ldrh	r0, [r7, #6]
 8009290:	893a      	ldrh	r2, [r7, #8]
 8009292:	8979      	ldrh	r1, [r7, #10]
 8009294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	4603      	mov	r3, r0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fbee 	bl	8009a80 <I2C_RequestMemoryRead>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e1f8      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d113      	bne.n	80092de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	61fb      	str	r3, [r7, #28]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	e1cc      	b.n	8009678 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d11e      	bne.n	8009324 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80092f6:	b672      	cpsid	i
}
 80092f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092fa:	2300      	movs	r3, #0
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800931e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009320:	b662      	cpsie	i
}
 8009322:	e035      	b.n	8009390 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009328:	2b02      	cmp	r3, #2
 800932a:	d11e      	bne.n	800936a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800933a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800933c:	b672      	cpsid	i
}
 800933e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009366:	b662      	cpsie	i
}
 8009368:	e012      	b.n	8009390 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009378:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800937a:	2300      	movs	r3, #0
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	613b      	str	r3, [r7, #16]
 800938e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009390:	e172      	b.n	8009678 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009396:	2b03      	cmp	r3, #3
 8009398:	f200 811f 	bhi.w	80095da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d123      	bne.n	80093ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fdfb 	bl	8009fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e173      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093ea:	e145      	b.n	8009678 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d152      	bne.n	800949a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fa:	2200      	movs	r2, #0
 80093fc:	4906      	ldr	r1, [pc, #24]	@ (8009418 <HAL_I2C_Mem_Read+0x24c>)
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 fc26 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d008      	beq.n	800941c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e148      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
 800940e:	bf00      	nop
 8009410:	00100002 	.word	0x00100002
 8009414:	ffff0000 	.word	0xffff0000
 8009418:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800941c:	b672      	cpsid	i
}
 800941e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800942e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800943a:	b2d2      	uxtb	r2, r2
 800943c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009458:	b29b      	uxth	r3, r3
 800945a:	3b01      	subs	r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009462:	b662      	cpsie	i
}
 8009464:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	b2d2      	uxtb	r2, r2
 8009472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800948e:	b29b      	uxth	r3, r3
 8009490:	3b01      	subs	r3, #1
 8009492:	b29a      	uxth	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009498:	e0ee      	b.n	8009678 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a0:	2200      	movs	r2, #0
 80094a2:	4981      	ldr	r1, [pc, #516]	@ (80096a8 <HAL_I2C_Mem_Read+0x4dc>)
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fbd3 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e0f5      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80094c4:	b672      	cpsid	i
}
 80094c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691a      	ldr	r2, [r3, #16]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80094fa:	4b6c      	ldr	r3, [pc, #432]	@ (80096ac <HAL_I2C_Mem_Read+0x4e0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	08db      	lsrs	r3, r3, #3
 8009500:	4a6b      	ldr	r2, [pc, #428]	@ (80096b0 <HAL_I2C_Mem_Read+0x4e4>)
 8009502:	fba2 2303 	umull	r2, r3, r2, r3
 8009506:	0a1a      	lsrs	r2, r3, #8
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	00da      	lsls	r2, r3, #3
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	3b01      	subs	r3, #1
 8009518:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d118      	bne.n	8009552 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953a:	f043 0220 	orr.w	r2, r3, #32
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009542:	b662      	cpsie	i
}
 8009544:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e0a6      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b04      	cmp	r3, #4
 800955e:	d1d9      	bne.n	8009514 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800956e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691a      	ldr	r2, [r3, #16]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957a:	b2d2      	uxtb	r2, r2
 800957c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800958c:	3b01      	subs	r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80095a2:	b662      	cpsie	i
}
 80095a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095d8:	e04e      	b.n	8009678 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 fce0 	bl	8009fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e058      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800960a:	3b01      	subs	r3, #1
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b04      	cmp	r3, #4
 800962c:	d124      	bne.n	8009678 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009632:	2b03      	cmp	r3, #3
 8009634:	d107      	bne.n	8009646 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009644:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	f47f ae88 	bne.w	8009392 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2220      	movs	r2, #32
 8009686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e000      	b.n	80096a0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800969e:	2302      	movs	r3, #2
  }
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3728      	adds	r7, #40	@ 0x28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	00010004 	.word	0x00010004
 80096ac:	2000003c 	.word	0x2000003c
 80096b0:	14f8b589 	.word	0x14f8b589

080096b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	460b      	mov	r3, r1
 80096c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d006      	beq.n	80096de <I2C_MasterRequestWrite+0x2a>
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d003      	beq.n	80096de <I2C_MasterRequestWrite+0x2a>
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80096dc:	d108      	bne.n	80096f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	e00b      	b.n	8009708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f4:	2b12      	cmp	r3, #18
 80096f6:	d107      	bne.n	8009708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 fa9b 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00d      	beq.n	800973c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800972a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800972e:	d103      	bne.n	8009738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e035      	b.n	80097a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009744:	d108      	bne.n	8009758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009746:	897b      	ldrh	r3, [r7, #10]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	461a      	mov	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009754:	611a      	str	r2, [r3, #16]
 8009756:	e01b      	b.n	8009790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009758:	897b      	ldrh	r3, [r7, #10]
 800975a:	11db      	asrs	r3, r3, #7
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0306 	and.w	r3, r3, #6
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f063 030f 	orn	r3, r3, #15
 8009768:	b2da      	uxtb	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	490e      	ldr	r1, [pc, #56]	@ (80097b0 <I2C_MasterRequestWrite+0xfc>)
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fae4 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e010      	b.n	80097a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009786:	897b      	ldrh	r3, [r7, #10]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	4907      	ldr	r1, [pc, #28]	@ (80097b4 <I2C_MasterRequestWrite+0x100>)
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 fad4 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	00010008 	.word	0x00010008
 80097b4:	00010002 	.word	0x00010002

080097b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af02      	add	r7, sp, #8
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	460b      	mov	r3, r1
 80097c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d006      	beq.n	80097f2 <I2C_MasterRequestRead+0x3a>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d003      	beq.n	80097f2 <I2C_MasterRequestRead+0x3a>
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80097f0:	d108      	bne.n	8009804 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e00b      	b.n	800981c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009808:	2b11      	cmp	r3, #17
 800980a:	d107      	bne.n	800981c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800981a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fa11 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00d      	beq.n	8009850 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800983e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009842:	d103      	bne.n	800984c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800984a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e079      	b.n	8009944 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009858:	d108      	bne.n	800986c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800985a:	897b      	ldrh	r3, [r7, #10]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	b2da      	uxtb	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	611a      	str	r2, [r3, #16]
 800986a:	e05f      	b.n	800992c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800986c:	897b      	ldrh	r3, [r7, #10]
 800986e:	11db      	asrs	r3, r3, #7
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 0306 	and.w	r3, r3, #6
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f063 030f 	orn	r3, r3, #15
 800987c:	b2da      	uxtb	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	4930      	ldr	r1, [pc, #192]	@ (800994c <I2C_MasterRequestRead+0x194>)
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 fa5a 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e054      	b.n	8009944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800989a:	897b      	ldrh	r3, [r7, #10]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4929      	ldr	r1, [pc, #164]	@ (8009950 <I2C_MasterRequestRead+0x198>)
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 fa4a 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e044      	b.n	8009944 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ba:	2300      	movs	r3, #0
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 f9af 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00d      	beq.n	8009914 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009906:	d103      	bne.n	8009910 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800990e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e017      	b.n	8009944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009914:	897b      	ldrh	r3, [r7, #10]
 8009916:	11db      	asrs	r3, r3, #7
 8009918:	b2db      	uxtb	r3, r3
 800991a:	f003 0306 	and.w	r3, r3, #6
 800991e:	b2db      	uxtb	r3, r3
 8009920:	f063 030e 	orn	r3, r3, #14
 8009924:	b2da      	uxtb	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	4907      	ldr	r1, [pc, #28]	@ (8009950 <I2C_MasterRequestRead+0x198>)
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fa06 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	00010008 	.word	0x00010008
 8009950:	00010002 	.word	0x00010002

08009954 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af02      	add	r7, sp, #8
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	4608      	mov	r0, r1
 800995e:	4611      	mov	r1, r2
 8009960:	461a      	mov	r2, r3
 8009962:	4603      	mov	r3, r0
 8009964:	817b      	strh	r3, [r7, #10]
 8009966:	460b      	mov	r3, r1
 8009968:	813b      	strh	r3, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800997c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	2200      	movs	r2, #0
 8009986:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f960 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00d      	beq.n	80099b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099a4:	d103      	bne.n	80099ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e05f      	b.n	8009a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099b2:	897b      	ldrh	r3, [r7, #10]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	461a      	mov	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80099c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	6a3a      	ldr	r2, [r7, #32]
 80099c6:	492d      	ldr	r1, [pc, #180]	@ (8009a7c <I2C_RequestMemoryWrite+0x128>)
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f9bb 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e04c      	b.n	8009a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099d8:	2300      	movs	r3, #0
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099f0:	6a39      	ldr	r1, [r7, #32]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 fa46 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00d      	beq.n	8009a1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d107      	bne.n	8009a16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e02b      	b.n	8009a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d105      	bne.n	8009a2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a20:	893b      	ldrh	r3, [r7, #8]
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	611a      	str	r2, [r3, #16]
 8009a2a:	e021      	b.n	8009a70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a2c:	893b      	ldrh	r3, [r7, #8]
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a3c:	6a39      	ldr	r1, [r7, #32]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fa20 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d107      	bne.n	8009a62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e005      	b.n	8009a72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a66:	893b      	ldrh	r3, [r7, #8]
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	00010002 	.word	0x00010002

08009a80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	4608      	mov	r0, r1
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4603      	mov	r3, r0
 8009a90:	817b      	strh	r3, [r7, #10]
 8009a92:	460b      	mov	r3, r1
 8009a94:	813b      	strh	r3, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f8c2 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00d      	beq.n	8009aee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae0:	d103      	bne.n	8009aea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e0aa      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009aee:	897b      	ldrh	r3, [r7, #10]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	6a3a      	ldr	r2, [r7, #32]
 8009b02:	4952      	ldr	r1, [pc, #328]	@ (8009c4c <I2C_RequestMemoryRead+0x1cc>)
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f91d 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e097      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b2c:	6a39      	ldr	r1, [r7, #32]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f9a8 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00d      	beq.n	8009b56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d107      	bne.n	8009b52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e076      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d105      	bne.n	8009b68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b5c:	893b      	ldrh	r3, [r7, #8]
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	611a      	str	r2, [r3, #16]
 8009b66:	e021      	b.n	8009bac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b68:	893b      	ldrh	r3, [r7, #8]
 8009b6a:	0a1b      	lsrs	r3, r3, #8
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b78:	6a39      	ldr	r1, [r7, #32]
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f982 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00d      	beq.n	8009ba2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d107      	bne.n	8009b9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e050      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ba2:	893b      	ldrh	r3, [r7, #8]
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bae:	6a39      	ldr	r1, [r7, #32]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f967 	bl	8009e84 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00d      	beq.n	8009bd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d107      	bne.n	8009bd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e035      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f82b 	bl	8009c50 <I2C_WaitOnFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00d      	beq.n	8009c1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c0e:	d103      	bne.n	8009c18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e013      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c1c:	897b      	ldrh	r3, [r7, #10]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2e:	6a3a      	ldr	r2, [r7, #32]
 8009c30:	4906      	ldr	r1, [pc, #24]	@ (8009c4c <I2C_RequestMemoryRead+0x1cc>)
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f886 	bl	8009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e000      	b.n	8009c44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	00010002 	.word	0x00010002

08009c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c60:	e048      	b.n	8009cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c68:	d044      	beq.n	8009cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c6a:	f7fe fa59 	bl	8008120 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d302      	bcc.n	8009c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d139      	bne.n	8009cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	0c1b      	lsrs	r3, r3, #16
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d10d      	bne.n	8009ca6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	43da      	mvns	r2, r3
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4013      	ands	r3, r2
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bf0c      	ite	eq
 8009c9c:	2301      	moveq	r3, #1
 8009c9e:	2300      	movne	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	e00c      	b.n	8009cc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	43da      	mvns	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d116      	bne.n	8009cf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce0:	f043 0220 	orr.w	r2, r3, #32
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e023      	b.n	8009d3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	0c1b      	lsrs	r3, r3, #16
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d10d      	bne.n	8009d1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	43da      	mvns	r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bf0c      	ite	eq
 8009d10:	2301      	moveq	r3, #1
 8009d12:	2300      	movne	r3, #0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	461a      	mov	r2, r3
 8009d18:	e00c      	b.n	8009d34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	43da      	mvns	r2, r3
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	4013      	ands	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2301      	moveq	r3, #1
 8009d2e:	2300      	movne	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	461a      	mov	r2, r3
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d093      	beq.n	8009c62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d52:	e071      	b.n	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d62:	d123      	bne.n	8009dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d98:	f043 0204 	orr.w	r2, r3, #4
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e067      	b.n	8009e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d041      	beq.n	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db4:	f7fe f9b4 	bl	8008120 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d302      	bcc.n	8009dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d136      	bne.n	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d10c      	bne.n	8009dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	43da      	mvns	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4013      	ands	r3, r2
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bf14      	ite	ne
 8009de6:	2301      	movne	r3, #1
 8009de8:	2300      	moveq	r3, #0
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	e00b      	b.n	8009e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	43da      	mvns	r2, r3
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	bf14      	ite	ne
 8009e00:	2301      	movne	r3, #1
 8009e02:	2300      	moveq	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d016      	beq.n	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2220      	movs	r2, #32
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e24:	f043 0220 	orr.w	r2, r3, #32
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e021      	b.n	8009e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	0c1b      	lsrs	r3, r3, #16
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d10c      	bne.n	8009e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	43da      	mvns	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bf14      	ite	ne
 8009e54:	2301      	movne	r3, #1
 8009e56:	2300      	moveq	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	e00b      	b.n	8009e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	43da      	mvns	r2, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	4013      	ands	r3, r2
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bf14      	ite	ne
 8009e6e:	2301      	movne	r3, #1
 8009e70:	2300      	moveq	r3, #0
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f47f af6d 	bne.w	8009d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e90:	e034      	b.n	8009efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f8e3 	bl	800a05e <I2C_IsAcknowledgeFailed>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e034      	b.n	8009f0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea8:	d028      	beq.n	8009efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eaa:	f7fe f939 	bl	8008120 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d302      	bcc.n	8009ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d11d      	bne.n	8009efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eca:	2b80      	cmp	r3, #128	@ 0x80
 8009ecc:	d016      	beq.n	8009efc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee8:	f043 0220 	orr.w	r2, r3, #32
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e007      	b.n	8009f0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f06:	2b80      	cmp	r3, #128	@ 0x80
 8009f08:	d1c3      	bne.n	8009e92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f20:	e034      	b.n	8009f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f89b 	bl	800a05e <I2C_IsAcknowledgeFailed>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e034      	b.n	8009f9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d028      	beq.n	8009f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3a:	f7fe f8f1 	bl	8008120 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d302      	bcc.n	8009f50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d11d      	bne.n	8009f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d016      	beq.n	8009f8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e007      	b.n	8009f9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d1c3      	bne.n	8009f22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fb0:	e049      	b.n	800a046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2b10      	cmp	r3, #16
 8009fbe:	d119      	bne.n	8009ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f06f 0210 	mvn.w	r2, #16
 8009fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e030      	b.n	800a056 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ff4:	f7fe f894 	bl	8008120 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	429a      	cmp	r2, r3
 800a002:	d302      	bcc.n	800a00a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d11d      	bne.n	800a046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a014:	2b40      	cmp	r3, #64	@ 0x40
 800a016:	d016      	beq.n	800a046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a032:	f043 0220 	orr.w	r2, r3, #32
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e007      	b.n	800a056 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a050:	2b40      	cmp	r3, #64	@ 0x40
 800a052:	d1ae      	bne.n	8009fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a074:	d11b      	bne.n	800a0ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a07e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2220      	movs	r2, #32
 800a08a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a09a:	f043 0204 	orr.w	r2, r3, #4
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc80      	pop	{r7}
 800a0b8:	4770      	bx	lr
	...

0800a0bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e272      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 8087 	beq.w	800a1ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0dc:	4b92      	ldr	r3, [pc, #584]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f003 030c 	and.w	r3, r3, #12
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d00c      	beq.n	800a102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a0e8:	4b8f      	ldr	r3, [pc, #572]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f003 030c 	and.w	r3, r3, #12
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d112      	bne.n	800a11a <HAL_RCC_OscConfig+0x5e>
 800a0f4:	4b8c      	ldr	r3, [pc, #560]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a100:	d10b      	bne.n	800a11a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a102:	4b89      	ldr	r3, [pc, #548]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d06c      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x12c>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d168      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e24c      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a122:	d106      	bne.n	800a132 <HAL_RCC_OscConfig+0x76>
 800a124:	4b80      	ldr	r3, [pc, #512]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a7f      	ldr	r2, [pc, #508]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a12a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	e02e      	b.n	800a190 <HAL_RCC_OscConfig+0xd4>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10c      	bne.n	800a154 <HAL_RCC_OscConfig+0x98>
 800a13a:	4b7b      	ldr	r3, [pc, #492]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a7a      	ldr	r2, [pc, #488]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	4b78      	ldr	r3, [pc, #480]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a77      	ldr	r2, [pc, #476]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a14c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	e01d      	b.n	800a190 <HAL_RCC_OscConfig+0xd4>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a15c:	d10c      	bne.n	800a178 <HAL_RCC_OscConfig+0xbc>
 800a15e:	4b72      	ldr	r3, [pc, #456]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a71      	ldr	r2, [pc, #452]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	4b6f      	ldr	r3, [pc, #444]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a6e      	ldr	r2, [pc, #440]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	e00b      	b.n	800a190 <HAL_RCC_OscConfig+0xd4>
 800a178:	4b6b      	ldr	r3, [pc, #428]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a6a      	ldr	r2, [pc, #424]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a17e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	4b68      	ldr	r3, [pc, #416]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a67      	ldr	r2, [pc, #412]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a18a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a18e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d013      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a198:	f7fd ffc2 	bl	8008120 <HAL_GetTick>
 800a19c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a0:	f7fd ffbe 	bl	8008120 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b64      	cmp	r3, #100	@ 0x64
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e200      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1b2:	4b5d      	ldr	r3, [pc, #372]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0f0      	beq.n	800a1a0 <HAL_RCC_OscConfig+0xe4>
 800a1be:	e014      	b.n	800a1ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1c0:	f7fd ffae 	bl	8008120 <HAL_GetTick>
 800a1c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1c6:	e008      	b.n	800a1da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1c8:	f7fd ffaa 	bl	8008120 <HAL_GetTick>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	2b64      	cmp	r3, #100	@ 0x64
 800a1d4:	d901      	bls.n	800a1da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e1ec      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1da:	4b53      	ldr	r3, [pc, #332]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1f0      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x10c>
 800a1e6:	e000      	b.n	800a1ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d063      	beq.n	800a2be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1f6:	4b4c      	ldr	r3, [pc, #304]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f003 030c 	and.w	r3, r3, #12
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00b      	beq.n	800a21a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a202:	4b49      	ldr	r3, [pc, #292]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f003 030c 	and.w	r3, r3, #12
 800a20a:	2b08      	cmp	r3, #8
 800a20c:	d11c      	bne.n	800a248 <HAL_RCC_OscConfig+0x18c>
 800a20e:	4b46      	ldr	r3, [pc, #280]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d116      	bne.n	800a248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a21a:	4b43      	ldr	r3, [pc, #268]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <HAL_RCC_OscConfig+0x176>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d001      	beq.n	800a232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e1c0      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a232:	4b3d      	ldr	r3, [pc, #244]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	4939      	ldr	r1, [pc, #228]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a242:	4313      	orrs	r3, r2
 800a244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a246:	e03a      	b.n	800a2be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d020      	beq.n	800a292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a250:	4b36      	ldr	r3, [pc, #216]	@ (800a32c <HAL_RCC_OscConfig+0x270>)
 800a252:	2201      	movs	r2, #1
 800a254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a256:	f7fd ff63 	bl	8008120 <HAL_GetTick>
 800a25a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a25c:	e008      	b.n	800a270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a25e:	f7fd ff5f 	bl	8008120 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d901      	bls.n	800a270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e1a1      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a270:	4b2d      	ldr	r3, [pc, #180]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0f0      	beq.n	800a25e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a27c:	4b2a      	ldr	r3, [pc, #168]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	4927      	ldr	r1, [pc, #156]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	600b      	str	r3, [r1, #0]
 800a290:	e015      	b.n	800a2be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a292:	4b26      	ldr	r3, [pc, #152]	@ (800a32c <HAL_RCC_OscConfig+0x270>)
 800a294:	2200      	movs	r2, #0
 800a296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a298:	f7fd ff42 	bl	8008120 <HAL_GetTick>
 800a29c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a29e:	e008      	b.n	800a2b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2a0:	f7fd ff3e 	bl	8008120 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d901      	bls.n	800a2b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e180      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0302 	and.w	r3, r3, #2
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1f0      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d03a      	beq.n	800a340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d019      	beq.n	800a306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2d2:	4b17      	ldr	r3, [pc, #92]	@ (800a330 <HAL_RCC_OscConfig+0x274>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2d8:	f7fd ff22 	bl	8008120 <HAL_GetTick>
 800a2dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2de:	e008      	b.n	800a2f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2e0:	f7fd ff1e 	bl	8008120 <HAL_GetTick>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d901      	bls.n	800a2f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e160      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <HAL_RCC_OscConfig+0x26c>)
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0f0      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a2fe:	2001      	movs	r0, #1
 800a300:	f000 faba 	bl	800a878 <RCC_Delay>
 800a304:	e01c      	b.n	800a340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a306:	4b0a      	ldr	r3, [pc, #40]	@ (800a330 <HAL_RCC_OscConfig+0x274>)
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a30c:	f7fd ff08 	bl	8008120 <HAL_GetTick>
 800a310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a312:	e00f      	b.n	800a334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a314:	f7fd ff04 	bl	8008120 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d908      	bls.n	800a334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e146      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
 800a326:	bf00      	nop
 800a328:	40021000 	.word	0x40021000
 800a32c:	42420000 	.word	0x42420000
 800a330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a334:	4b92      	ldr	r3, [pc, #584]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e9      	bne.n	800a314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80a6 	beq.w	800a49a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a34e:	2300      	movs	r3, #0
 800a350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a352:	4b8b      	ldr	r3, [pc, #556]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10d      	bne.n	800a37a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a35e:	4b88      	ldr	r3, [pc, #544]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	4a87      	ldr	r2, [pc, #540]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a368:	61d3      	str	r3, [r2, #28]
 800a36a:	4b85      	ldr	r3, [pc, #532]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a376:	2301      	movs	r3, #1
 800a378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a37a:	4b82      	ldr	r3, [pc, #520]	@ (800a584 <HAL_RCC_OscConfig+0x4c8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a382:	2b00      	cmp	r3, #0
 800a384:	d118      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a386:	4b7f      	ldr	r3, [pc, #508]	@ (800a584 <HAL_RCC_OscConfig+0x4c8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a7e      	ldr	r2, [pc, #504]	@ (800a584 <HAL_RCC_OscConfig+0x4c8>)
 800a38c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a392:	f7fd fec5 	bl	8008120 <HAL_GetTick>
 800a396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a398:	e008      	b.n	800a3ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a39a:	f7fd fec1 	bl	8008120 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b64      	cmp	r3, #100	@ 0x64
 800a3a6:	d901      	bls.n	800a3ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e103      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3ac:	4b75      	ldr	r3, [pc, #468]	@ (800a584 <HAL_RCC_OscConfig+0x4c8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0f0      	beq.n	800a39a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d106      	bne.n	800a3ce <HAL_RCC_OscConfig+0x312>
 800a3c0:	4b6f      	ldr	r3, [pc, #444]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	4a6e      	ldr	r2, [pc, #440]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3c6:	f043 0301 	orr.w	r3, r3, #1
 800a3ca:	6213      	str	r3, [r2, #32]
 800a3cc:	e02d      	b.n	800a42a <HAL_RCC_OscConfig+0x36e>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10c      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x334>
 800a3d6:	4b6a      	ldr	r3, [pc, #424]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	4a69      	ldr	r2, [pc, #420]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3dc:	f023 0301 	bic.w	r3, r3, #1
 800a3e0:	6213      	str	r3, [r2, #32]
 800a3e2:	4b67      	ldr	r3, [pc, #412]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	4a66      	ldr	r2, [pc, #408]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3e8:	f023 0304 	bic.w	r3, r3, #4
 800a3ec:	6213      	str	r3, [r2, #32]
 800a3ee:	e01c      	b.n	800a42a <HAL_RCC_OscConfig+0x36e>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	2b05      	cmp	r3, #5
 800a3f6:	d10c      	bne.n	800a412 <HAL_RCC_OscConfig+0x356>
 800a3f8:	4b61      	ldr	r3, [pc, #388]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	4a60      	ldr	r2, [pc, #384]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a3fe:	f043 0304 	orr.w	r3, r3, #4
 800a402:	6213      	str	r3, [r2, #32]
 800a404:	4b5e      	ldr	r3, [pc, #376]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	4a5d      	ldr	r2, [pc, #372]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	6213      	str	r3, [r2, #32]
 800a410:	e00b      	b.n	800a42a <HAL_RCC_OscConfig+0x36e>
 800a412:	4b5b      	ldr	r3, [pc, #364]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	4a5a      	ldr	r2, [pc, #360]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	6213      	str	r3, [r2, #32]
 800a41e:	4b58      	ldr	r3, [pc, #352]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	4a57      	ldr	r2, [pc, #348]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a424:	f023 0304 	bic.w	r3, r3, #4
 800a428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d015      	beq.n	800a45e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a432:	f7fd fe75 	bl	8008120 <HAL_GetTick>
 800a436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a438:	e00a      	b.n	800a450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a43a:	f7fd fe71 	bl	8008120 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a448:	4293      	cmp	r3, r2
 800a44a:	d901      	bls.n	800a450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e0b1      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a450:	4b4b      	ldr	r3, [pc, #300]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0ee      	beq.n	800a43a <HAL_RCC_OscConfig+0x37e>
 800a45c:	e014      	b.n	800a488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a45e:	f7fd fe5f 	bl	8008120 <HAL_GetTick>
 800a462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a464:	e00a      	b.n	800a47c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a466:	f7fd fe5b 	bl	8008120 <HAL_GetTick>
 800a46a:	4602      	mov	r2, r0
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a474:	4293      	cmp	r3, r2
 800a476:	d901      	bls.n	800a47c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e09b      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a47c:	4b40      	ldr	r3, [pc, #256]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1ee      	bne.n	800a466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d105      	bne.n	800a49a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a48e:	4b3c      	ldr	r3, [pc, #240]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	4a3b      	ldr	r2, [pc, #236]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 8087 	beq.w	800a5b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a4a4:	4b36      	ldr	r3, [pc, #216]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f003 030c 	and.w	r3, r3, #12
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d061      	beq.n	800a574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d146      	bne.n	800a546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4b8:	4b33      	ldr	r3, [pc, #204]	@ (800a588 <HAL_RCC_OscConfig+0x4cc>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4be:	f7fd fe2f 	bl	8008120 <HAL_GetTick>
 800a4c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4c4:	e008      	b.n	800a4d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4c6:	f7fd fe2b 	bl	8008120 <HAL_GetTick>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d901      	bls.n	800a4d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e06d      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4d8:	4b29      	ldr	r3, [pc, #164]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1f0      	bne.n	800a4c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ec:	d108      	bne.n	800a500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a4ee:	4b24      	ldr	r3, [pc, #144]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	4921      	ldr	r1, [pc, #132]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a500:	4b1f      	ldr	r3, [pc, #124]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a19      	ldr	r1, [r3, #32]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a510:	430b      	orrs	r3, r1
 800a512:	491b      	ldr	r1, [pc, #108]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a514:	4313      	orrs	r3, r2
 800a516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a518:	4b1b      	ldr	r3, [pc, #108]	@ (800a588 <HAL_RCC_OscConfig+0x4cc>)
 800a51a:	2201      	movs	r2, #1
 800a51c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a51e:	f7fd fdff 	bl	8008120 <HAL_GetTick>
 800a522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a524:	e008      	b.n	800a538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a526:	f7fd fdfb 	bl	8008120 <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b02      	cmp	r3, #2
 800a532:	d901      	bls.n	800a538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e03d      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a538:	4b11      	ldr	r3, [pc, #68]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0f0      	beq.n	800a526 <HAL_RCC_OscConfig+0x46a>
 800a544:	e035      	b.n	800a5b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a546:	4b10      	ldr	r3, [pc, #64]	@ (800a588 <HAL_RCC_OscConfig+0x4cc>)
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a54c:	f7fd fde8 	bl	8008120 <HAL_GetTick>
 800a550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a552:	e008      	b.n	800a566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a554:	f7fd fde4 	bl	8008120 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d901      	bls.n	800a566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e026      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a566:	4b06      	ldr	r3, [pc, #24]	@ (800a580 <HAL_RCC_OscConfig+0x4c4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1f0      	bne.n	800a554 <HAL_RCC_OscConfig+0x498>
 800a572:	e01e      	b.n	800a5b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d107      	bne.n	800a58c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e019      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
 800a580:	40021000 	.word	0x40021000
 800a584:	40007000 	.word	0x40007000
 800a588:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a58c:	4b0b      	ldr	r3, [pc, #44]	@ (800a5bc <HAL_RCC_OscConfig+0x500>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d106      	bne.n	800a5ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d001      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e000      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	40021000 	.word	0x40021000

0800a5c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e0d0      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5d4:	4b6a      	ldr	r3, [pc, #424]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d910      	bls.n	800a604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5e2:	4b67      	ldr	r3, [pc, #412]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f023 0207 	bic.w	r2, r3, #7
 800a5ea:	4965      	ldr	r1, [pc, #404]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5f2:	4b63      	ldr	r3, [pc, #396]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d001      	beq.n	800a604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0b8      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0302 	and.w	r3, r3, #2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d020      	beq.n	800a652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a61c:	4b59      	ldr	r3, [pc, #356]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	4a58      	ldr	r2, [pc, #352]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a622:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0308 	and.w	r3, r3, #8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a634:	4b53      	ldr	r3, [pc, #332]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	4a52      	ldr	r2, [pc, #328]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a63a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a63e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a640:	4b50      	ldr	r3, [pc, #320]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	494d      	ldr	r1, [pc, #308]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d040      	beq.n	800a6e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d107      	bne.n	800a676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a666:	4b47      	ldr	r3, [pc, #284]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d115      	bne.n	800a69e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e07f      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d107      	bne.n	800a68e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a67e:	4b41      	ldr	r3, [pc, #260]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e073      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a68e:	4b3d      	ldr	r3, [pc, #244]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e06b      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a69e:	4b39      	ldr	r3, [pc, #228]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f023 0203 	bic.w	r2, r3, #3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	4936      	ldr	r1, [pc, #216]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6b0:	f7fd fd36 	bl	8008120 <HAL_GetTick>
 800a6b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6b6:	e00a      	b.n	800a6ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6b8:	f7fd fd32 	bl	8008120 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d901      	bls.n	800a6ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e053      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ce:	4b2d      	ldr	r3, [pc, #180]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 020c 	and.w	r2, r3, #12
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d1eb      	bne.n	800a6b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6e0:	4b27      	ldr	r3, [pc, #156]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d210      	bcs.n	800a710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ee:	4b24      	ldr	r3, [pc, #144]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f023 0207 	bic.w	r2, r3, #7
 800a6f6:	4922      	ldr	r1, [pc, #136]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6fe:	4b20      	ldr	r3, [pc, #128]	@ (800a780 <HAL_RCC_ClockConfig+0x1c0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d001      	beq.n	800a710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e032      	b.n	800a776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d008      	beq.n	800a72e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a71c:	4b19      	ldr	r3, [pc, #100]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4916      	ldr	r1, [pc, #88]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0308 	and.w	r3, r3, #8
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a73a:	4b12      	ldr	r3, [pc, #72]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	490e      	ldr	r1, [pc, #56]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a74e:	f000 f821 	bl	800a794 <HAL_RCC_GetSysClockFreq>
 800a752:	4602      	mov	r2, r0
 800a754:	4b0b      	ldr	r3, [pc, #44]	@ (800a784 <HAL_RCC_ClockConfig+0x1c4>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	091b      	lsrs	r3, r3, #4
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	490a      	ldr	r1, [pc, #40]	@ (800a788 <HAL_RCC_ClockConfig+0x1c8>)
 800a760:	5ccb      	ldrb	r3, [r1, r3]
 800a762:	fa22 f303 	lsr.w	r3, r2, r3
 800a766:	4a09      	ldr	r2, [pc, #36]	@ (800a78c <HAL_RCC_ClockConfig+0x1cc>)
 800a768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a76a:	4b09      	ldr	r3, [pc, #36]	@ (800a790 <HAL_RCC_ClockConfig+0x1d0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd fc94 	bl	800809c <HAL_InitTick>

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	40022000 	.word	0x40022000
 800a784:	40021000 	.word	0x40021000
 800a788:	0800bf3c 	.word	0x0800bf3c
 800a78c:	2000003c 	.word	0x2000003c
 800a790:	20000040 	.word	0x20000040

0800a794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60bb      	str	r3, [r7, #8]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a828 <HAL_RCC_GetSysClockFreq+0x94>)
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f003 030c 	and.w	r3, r3, #12
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	d002      	beq.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x30>
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d003      	beq.n	800a7ca <HAL_RCC_GetSysClockFreq+0x36>
 800a7c2:	e027      	b.n	800a814 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a7c4:	4b19      	ldr	r3, [pc, #100]	@ (800a82c <HAL_RCC_GetSysClockFreq+0x98>)
 800a7c6:	613b      	str	r3, [r7, #16]
      break;
 800a7c8:	e027      	b.n	800a81a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	0c9b      	lsrs	r3, r3, #18
 800a7ce:	f003 030f 	and.w	r3, r3, #15
 800a7d2:	4a17      	ldr	r2, [pc, #92]	@ (800a830 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a7d4:	5cd3      	ldrb	r3, [r2, r3]
 800a7d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d010      	beq.n	800a804 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a7e2:	4b11      	ldr	r3, [pc, #68]	@ (800a828 <HAL_RCC_GetSysClockFreq+0x94>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	0c5b      	lsrs	r3, r3, #17
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	4a11      	ldr	r2, [pc, #68]	@ (800a834 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a7ee:	5cd3      	ldrb	r3, [r2, r3]
 800a7f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a0d      	ldr	r2, [pc, #52]	@ (800a82c <HAL_RCC_GetSysClockFreq+0x98>)
 800a7f6:	fb03 f202 	mul.w	r2, r3, r2
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a800:	617b      	str	r3, [r7, #20]
 800a802:	e004      	b.n	800a80e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a0c      	ldr	r2, [pc, #48]	@ (800a838 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a808:	fb02 f303 	mul.w	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	613b      	str	r3, [r7, #16]
      break;
 800a812:	e002      	b.n	800a81a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a814:	4b05      	ldr	r3, [pc, #20]	@ (800a82c <HAL_RCC_GetSysClockFreq+0x98>)
 800a816:	613b      	str	r3, [r7, #16]
      break;
 800a818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a81a:	693b      	ldr	r3, [r7, #16]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	371c      	adds	r7, #28
 800a820:	46bd      	mov	sp, r7
 800a822:	bc80      	pop	{r7}
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	40021000 	.word	0x40021000
 800a82c:	007a1200 	.word	0x007a1200
 800a830:	0800bf54 	.word	0x0800bf54
 800a834:	0800bf64 	.word	0x0800bf64
 800a838:	003d0900 	.word	0x003d0900

0800a83c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a840:	4b02      	ldr	r3, [pc, #8]	@ (800a84c <HAL_RCC_GetHCLKFreq+0x10>)
 800a842:	681b      	ldr	r3, [r3, #0]
}
 800a844:	4618      	mov	r0, r3
 800a846:	46bd      	mov	sp, r7
 800a848:	bc80      	pop	{r7}
 800a84a:	4770      	bx	lr
 800a84c:	2000003c 	.word	0x2000003c

0800a850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a854:	f7ff fff2 	bl	800a83c <HAL_RCC_GetHCLKFreq>
 800a858:	4602      	mov	r2, r0
 800a85a:	4b05      	ldr	r3, [pc, #20]	@ (800a870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	0a1b      	lsrs	r3, r3, #8
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	4903      	ldr	r1, [pc, #12]	@ (800a874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a866:	5ccb      	ldrb	r3, [r1, r3]
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	40021000 	.word	0x40021000
 800a874:	0800bf4c 	.word	0x0800bf4c

0800a878 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a880:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ac <RCC_Delay+0x34>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a0a      	ldr	r2, [pc, #40]	@ (800a8b0 <RCC_Delay+0x38>)
 800a886:	fba2 2303 	umull	r2, r3, r2, r3
 800a88a:	0a5b      	lsrs	r3, r3, #9
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	fb02 f303 	mul.w	r3, r2, r3
 800a892:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a894:	bf00      	nop
  }
  while (Delay --);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	1e5a      	subs	r2, r3, #1
 800a89a:	60fa      	str	r2, [r7, #12]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1f9      	bne.n	800a894 <RCC_Delay+0x1c>
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bc80      	pop	{r7}
 800a8aa:	4770      	bx	lr
 800a8ac:	2000003c 	.word	0x2000003c
 800a8b0:	10624dd3 	.word	0x10624dd3

0800a8b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d001      	beq.n	800a8cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e032      	b.n	800a932 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a18      	ldr	r2, [pc, #96]	@ (800a93c <HAL_TIM_Base_Start+0x88>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d00e      	beq.n	800a8fc <HAL_TIM_Base_Start+0x48>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8e6:	d009      	beq.n	800a8fc <HAL_TIM_Base_Start+0x48>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a14      	ldr	r2, [pc, #80]	@ (800a940 <HAL_TIM_Base_Start+0x8c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d004      	beq.n	800a8fc <HAL_TIM_Base_Start+0x48>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a13      	ldr	r2, [pc, #76]	@ (800a944 <HAL_TIM_Base_Start+0x90>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d111      	bne.n	800a920 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b06      	cmp	r3, #6
 800a90c:	d010      	beq.n	800a930 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f042 0201 	orr.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a91e:	e007      	b.n	800a930 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f042 0201 	orr.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	bc80      	pop	{r7}
 800a93a:	4770      	bx	lr
 800a93c:	40012c00 	.word	0x40012c00
 800a940:	40000400 	.word	0x40000400
 800a944:	40000800 	.word	0x40000800

0800a948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e041      	b.n	800a9de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7fc fd0c 	bl	800738c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	4619      	mov	r1, r3
 800a986:	4610      	mov	r0, r2
 800a988:	f000 f992 	bl	800acb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <HAL_TIM_PWM_Start+0x24>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	bf14      	ite	ne
 800aa04:	2301      	movne	r3, #1
 800aa06:	2300      	moveq	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	e022      	b.n	800aa52 <HAL_TIM_PWM_Start+0x6a>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d109      	bne.n	800aa26 <HAL_TIM_PWM_Start+0x3e>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	bf14      	ite	ne
 800aa1e:	2301      	movne	r3, #1
 800aa20:	2300      	moveq	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	e015      	b.n	800aa52 <HAL_TIM_PWM_Start+0x6a>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b08      	cmp	r3, #8
 800aa2a:	d109      	bne.n	800aa40 <HAL_TIM_PWM_Start+0x58>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	bf14      	ite	ne
 800aa38:	2301      	movne	r3, #1
 800aa3a:	2300      	moveq	r3, #0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	e008      	b.n	800aa52 <HAL_TIM_PWM_Start+0x6a>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e05e      	b.n	800ab18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d104      	bne.n	800aa6a <HAL_TIM_PWM_Start+0x82>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa68:	e013      	b.n	800aa92 <HAL_TIM_PWM_Start+0xaa>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d104      	bne.n	800aa7a <HAL_TIM_PWM_Start+0x92>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa78:	e00b      	b.n	800aa92 <HAL_TIM_PWM_Start+0xaa>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d104      	bne.n	800aa8a <HAL_TIM_PWM_Start+0xa2>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa88:	e003      	b.n	800aa92 <HAL_TIM_PWM_Start+0xaa>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2201      	movs	r2, #1
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 fafe 	bl	800b09c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a1e      	ldr	r2, [pc, #120]	@ (800ab20 <HAL_TIM_PWM_Start+0x138>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d107      	bne.n	800aaba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <HAL_TIM_PWM_Start+0x138>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00e      	beq.n	800aae2 <HAL_TIM_PWM_Start+0xfa>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aacc:	d009      	beq.n	800aae2 <HAL_TIM_PWM_Start+0xfa>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a14      	ldr	r2, [pc, #80]	@ (800ab24 <HAL_TIM_PWM_Start+0x13c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d004      	beq.n	800aae2 <HAL_TIM_PWM_Start+0xfa>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a12      	ldr	r2, [pc, #72]	@ (800ab28 <HAL_TIM_PWM_Start+0x140>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d111      	bne.n	800ab06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f003 0307 	and.w	r3, r3, #7
 800aaec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2b06      	cmp	r3, #6
 800aaf2:	d010      	beq.n	800ab16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f042 0201 	orr.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab04:	e007      	b.n	800ab16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f042 0201 	orr.w	r2, r2, #1
 800ab14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	40012c00 	.word	0x40012c00
 800ab24:	40000400 	.word	0x40000400
 800ab28:	40000800 	.word	0x40000800

0800ab2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab46:	2302      	movs	r3, #2
 800ab48:	e0ae      	b.n	800aca8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b0c      	cmp	r3, #12
 800ab56:	f200 809f 	bhi.w	800ac98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab95 	.word	0x0800ab95
 800ab64:	0800ac99 	.word	0x0800ac99
 800ab68:	0800ac99 	.word	0x0800ac99
 800ab6c:	0800ac99 	.word	0x0800ac99
 800ab70:	0800abd5 	.word	0x0800abd5
 800ab74:	0800ac99 	.word	0x0800ac99
 800ab78:	0800ac99 	.word	0x0800ac99
 800ab7c:	0800ac99 	.word	0x0800ac99
 800ab80:	0800ac17 	.word	0x0800ac17
 800ab84:	0800ac99 	.word	0x0800ac99
 800ab88:	0800ac99 	.word	0x0800ac99
 800ab8c:	0800ac99 	.word	0x0800ac99
 800ab90:	0800ac57 	.word	0x0800ac57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 f8f6 	bl	800ad8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699a      	ldr	r2, [r3, #24]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f042 0208 	orr.w	r2, r2, #8
 800abae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f022 0204 	bic.w	r2, r2, #4
 800abbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6999      	ldr	r1, [r3, #24]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	619a      	str	r2, [r3, #24]
      break;
 800abd2:	e064      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 f93c 	bl	800ae58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699a      	ldr	r2, [r3, #24]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6999      	ldr	r1, [r3, #24]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	021a      	lsls	r2, r3, #8
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	619a      	str	r2, [r3, #24]
      break;
 800ac14:	e043      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f985 	bl	800af2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	69da      	ldr	r2, [r3, #28]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f042 0208 	orr.w	r2, r2, #8
 800ac30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69da      	ldr	r2, [r3, #28]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f022 0204 	bic.w	r2, r2, #4
 800ac40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69d9      	ldr	r1, [r3, #28]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	61da      	str	r2, [r3, #28]
      break;
 800ac54:	e023      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f9cf 	bl	800b000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69da      	ldr	r2, [r3, #28]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	69da      	ldr	r2, [r3, #28]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	69d9      	ldr	r1, [r3, #28]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	021a      	lsls	r2, r3, #8
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	61da      	str	r2, [r3, #28]
      break;
 800ac96:	e002      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a2f      	ldr	r2, [pc, #188]	@ (800ad80 <TIM_Base_SetConfig+0xd0>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00b      	beq.n	800ace0 <TIM_Base_SetConfig+0x30>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acce:	d007      	beq.n	800ace0 <TIM_Base_SetConfig+0x30>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a2c      	ldr	r2, [pc, #176]	@ (800ad84 <TIM_Base_SetConfig+0xd4>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d003      	beq.n	800ace0 <TIM_Base_SetConfig+0x30>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a2b      	ldr	r2, [pc, #172]	@ (800ad88 <TIM_Base_SetConfig+0xd8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d108      	bne.n	800acf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ace6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a22      	ldr	r2, [pc, #136]	@ (800ad80 <TIM_Base_SetConfig+0xd0>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00b      	beq.n	800ad12 <TIM_Base_SetConfig+0x62>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad00:	d007      	beq.n	800ad12 <TIM_Base_SetConfig+0x62>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a1f      	ldr	r2, [pc, #124]	@ (800ad84 <TIM_Base_SetConfig+0xd4>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d003      	beq.n	800ad12 <TIM_Base_SetConfig+0x62>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a1e      	ldr	r2, [pc, #120]	@ (800ad88 <TIM_Base_SetConfig+0xd8>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d108      	bne.n	800ad24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a0d      	ldr	r2, [pc, #52]	@ (800ad80 <TIM_Base_SetConfig+0xd0>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d103      	bne.n	800ad58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	691a      	ldr	r2, [r3, #16]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	f023 0201 	bic.w	r2, r3, #1
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	611a      	str	r2, [r3, #16]
  }
}
 800ad76:	bf00      	nop
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc80      	pop	{r7}
 800ad7e:	4770      	bx	lr
 800ad80:	40012c00 	.word	0x40012c00
 800ad84:	40000400 	.word	0x40000400
 800ad88:	40000800 	.word	0x40000800

0800ad8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	f023 0201 	bic.w	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f023 0302 	bic.w	r3, r3, #2
 800add4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4313      	orrs	r3, r2
 800adde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a1c      	ldr	r2, [pc, #112]	@ (800ae54 <TIM_OC1_SetConfig+0xc8>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d10c      	bne.n	800ae02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f023 0308 	bic.w	r3, r3, #8
 800adee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f023 0304 	bic.w	r3, r3, #4
 800ae00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a13      	ldr	r2, [pc, #76]	@ (800ae54 <TIM_OC1_SetConfig+0xc8>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d111      	bne.n	800ae2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	621a      	str	r2, [r3, #32]
}
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bc80      	pop	{r7}
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40012c00 	.word	0x40012c00

0800ae58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	f023 0210 	bic.w	r2, r3, #16
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f023 0320 	bic.w	r3, r3, #32
 800aea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a1d      	ldr	r2, [pc, #116]	@ (800af28 <TIM_OC2_SetConfig+0xd0>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d10d      	bne.n	800aed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a14      	ldr	r2, [pc, #80]	@ (800af28 <TIM_OC2_SetConfig+0xd0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d113      	bne.n	800af04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aeea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4313      	orrs	r3, r2
 800af02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	621a      	str	r2, [r3, #32]
}
 800af1e:	bf00      	nop
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr
 800af28:	40012c00 	.word	0x40012c00

0800af2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a1d      	ldr	r2, [pc, #116]	@ (800affc <TIM_OC3_SetConfig+0xd0>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d10d      	bne.n	800afa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800afa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a14      	ldr	r2, [pc, #80]	@ (800affc <TIM_OC3_SetConfig+0xd0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d113      	bne.n	800afd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	621a      	str	r2, [r3, #32]
}
 800aff0:	bf00      	nop
 800aff2:	371c      	adds	r7, #28
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bc80      	pop	{r7}
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	40012c00 	.word	0x40012c00

0800b000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b04a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	031b      	lsls	r3, r3, #12
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a0f      	ldr	r2, [pc, #60]	@ (800b098 <TIM_OC4_SetConfig+0x98>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d109      	bne.n	800b074 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	019b      	lsls	r3, r3, #6
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	685a      	ldr	r2, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	621a      	str	r2, [r3, #32]
}
 800b08e:	bf00      	nop
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	bc80      	pop	{r7}
 800b096:	4770      	bx	lr
 800b098:	40012c00 	.word	0x40012c00

0800b09c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f003 031f 	and.w	r3, r3, #31
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1a      	ldr	r2, [r3, #32]
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	401a      	ands	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	f003 031f 	and.w	r3, r3, #31
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bc80      	pop	{r7}
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e046      	b.n	800b18a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a16      	ldr	r2, [pc, #88]	@ (800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d00e      	beq.n	800b15e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b148:	d009      	beq.n	800b15e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a12      	ldr	r2, [pc, #72]	@ (800b198 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d004      	beq.n	800b15e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a10      	ldr	r2, [pc, #64]	@ (800b19c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d10c      	bne.n	800b178 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	bc80      	pop	{r7}
 800b192:	4770      	bx	lr
 800b194:	40012c00 	.word	0x40012c00
 800b198:	40000400 	.word	0x40000400
 800b19c:	40000800 	.word	0x40000800

0800b1a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d101      	bne.n	800b1bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	e03d      	b.n	800b238 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	4313      	orrs	r3, r2
 800b208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	4313      	orrs	r3, r2
 800b224:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bc80      	pop	{r7}
 800b240:	4770      	bx	lr

0800b242 <atoi>:
 800b242:	220a      	movs	r2, #10
 800b244:	2100      	movs	r1, #0
 800b246:	f000 b87b 	b.w	800b340 <strtol>
	...

0800b24c <_strtol_l.constprop.0>:
 800b24c:	2b24      	cmp	r3, #36	@ 0x24
 800b24e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b252:	4686      	mov	lr, r0
 800b254:	4690      	mov	r8, r2
 800b256:	d801      	bhi.n	800b25c <_strtol_l.constprop.0+0x10>
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d106      	bne.n	800b26a <_strtol_l.constprop.0+0x1e>
 800b25c:	f000 f8b6 	bl	800b3cc <__errno>
 800b260:	2316      	movs	r3, #22
 800b262:	6003      	str	r3, [r0, #0]
 800b264:	2000      	movs	r0, #0
 800b266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26a:	460d      	mov	r5, r1
 800b26c:	4833      	ldr	r0, [pc, #204]	@ (800b33c <_strtol_l.constprop.0+0xf0>)
 800b26e:	462a      	mov	r2, r5
 800b270:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b274:	5d06      	ldrb	r6, [r0, r4]
 800b276:	f016 0608 	ands.w	r6, r6, #8
 800b27a:	d1f8      	bne.n	800b26e <_strtol_l.constprop.0+0x22>
 800b27c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b27e:	d12d      	bne.n	800b2dc <_strtol_l.constprop.0+0x90>
 800b280:	2601      	movs	r6, #1
 800b282:	782c      	ldrb	r4, [r5, #0]
 800b284:	1c95      	adds	r5, r2, #2
 800b286:	f033 0210 	bics.w	r2, r3, #16
 800b28a:	d109      	bne.n	800b2a0 <_strtol_l.constprop.0+0x54>
 800b28c:	2c30      	cmp	r4, #48	@ 0x30
 800b28e:	d12a      	bne.n	800b2e6 <_strtol_l.constprop.0+0x9a>
 800b290:	782a      	ldrb	r2, [r5, #0]
 800b292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b296:	2a58      	cmp	r2, #88	@ 0x58
 800b298:	d125      	bne.n	800b2e6 <_strtol_l.constprop.0+0x9a>
 800b29a:	2310      	movs	r3, #16
 800b29c:	786c      	ldrb	r4, [r5, #1]
 800b29e:	3502      	adds	r5, #2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2aa:	fbbc f9f3 	udiv	r9, ip, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2b8:	2f09      	cmp	r7, #9
 800b2ba:	d81b      	bhi.n	800b2f4 <_strtol_l.constprop.0+0xa8>
 800b2bc:	463c      	mov	r4, r7
 800b2be:	42a3      	cmp	r3, r4
 800b2c0:	dd27      	ble.n	800b312 <_strtol_l.constprop.0+0xc6>
 800b2c2:	1c57      	adds	r7, r2, #1
 800b2c4:	d007      	beq.n	800b2d6 <_strtol_l.constprop.0+0x8a>
 800b2c6:	4581      	cmp	r9, r0
 800b2c8:	d320      	bcc.n	800b30c <_strtol_l.constprop.0+0xc0>
 800b2ca:	d101      	bne.n	800b2d0 <_strtol_l.constprop.0+0x84>
 800b2cc:	45a2      	cmp	sl, r4
 800b2ce:	db1d      	blt.n	800b30c <_strtol_l.constprop.0+0xc0>
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	fb00 4003 	mla	r0, r0, r3, r4
 800b2d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2da:	e7eb      	b.n	800b2b4 <_strtol_l.constprop.0+0x68>
 800b2dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2de:	bf04      	itt	eq
 800b2e0:	782c      	ldrbeq	r4, [r5, #0]
 800b2e2:	1c95      	addeq	r5, r2, #2
 800b2e4:	e7cf      	b.n	800b286 <_strtol_l.constprop.0+0x3a>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1da      	bne.n	800b2a0 <_strtol_l.constprop.0+0x54>
 800b2ea:	2c30      	cmp	r4, #48	@ 0x30
 800b2ec:	bf0c      	ite	eq
 800b2ee:	2308      	moveq	r3, #8
 800b2f0:	230a      	movne	r3, #10
 800b2f2:	e7d5      	b.n	800b2a0 <_strtol_l.constprop.0+0x54>
 800b2f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2f8:	2f19      	cmp	r7, #25
 800b2fa:	d801      	bhi.n	800b300 <_strtol_l.constprop.0+0xb4>
 800b2fc:	3c37      	subs	r4, #55	@ 0x37
 800b2fe:	e7de      	b.n	800b2be <_strtol_l.constprop.0+0x72>
 800b300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b304:	2f19      	cmp	r7, #25
 800b306:	d804      	bhi.n	800b312 <_strtol_l.constprop.0+0xc6>
 800b308:	3c57      	subs	r4, #87	@ 0x57
 800b30a:	e7d8      	b.n	800b2be <_strtol_l.constprop.0+0x72>
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	e7e1      	b.n	800b2d6 <_strtol_l.constprop.0+0x8a>
 800b312:	1c53      	adds	r3, r2, #1
 800b314:	d108      	bne.n	800b328 <_strtol_l.constprop.0+0xdc>
 800b316:	2322      	movs	r3, #34	@ 0x22
 800b318:	4660      	mov	r0, ip
 800b31a:	f8ce 3000 	str.w	r3, [lr]
 800b31e:	f1b8 0f00 	cmp.w	r8, #0
 800b322:	d0a0      	beq.n	800b266 <_strtol_l.constprop.0+0x1a>
 800b324:	1e69      	subs	r1, r5, #1
 800b326:	e006      	b.n	800b336 <_strtol_l.constprop.0+0xea>
 800b328:	b106      	cbz	r6, 800b32c <_strtol_l.constprop.0+0xe0>
 800b32a:	4240      	negs	r0, r0
 800b32c:	f1b8 0f00 	cmp.w	r8, #0
 800b330:	d099      	beq.n	800b266 <_strtol_l.constprop.0+0x1a>
 800b332:	2a00      	cmp	r2, #0
 800b334:	d1f6      	bne.n	800b324 <_strtol_l.constprop.0+0xd8>
 800b336:	f8c8 1000 	str.w	r1, [r8]
 800b33a:	e794      	b.n	800b266 <_strtol_l.constprop.0+0x1a>
 800b33c:	0800bf67 	.word	0x0800bf67

0800b340 <strtol>:
 800b340:	4613      	mov	r3, r2
 800b342:	460a      	mov	r2, r1
 800b344:	4601      	mov	r1, r0
 800b346:	4802      	ldr	r0, [pc, #8]	@ (800b350 <strtol+0x10>)
 800b348:	6800      	ldr	r0, [r0, #0]
 800b34a:	f7ff bf7f 	b.w	800b24c <_strtol_l.constprop.0>
 800b34e:	bf00      	nop
 800b350:	20000048 	.word	0x20000048

0800b354 <sniprintf>:
 800b354:	b40c      	push	{r2, r3}
 800b356:	b530      	push	{r4, r5, lr}
 800b358:	4b17      	ldr	r3, [pc, #92]	@ (800b3b8 <sniprintf+0x64>)
 800b35a:	1e0c      	subs	r4, r1, #0
 800b35c:	681d      	ldr	r5, [r3, #0]
 800b35e:	b09d      	sub	sp, #116	@ 0x74
 800b360:	da08      	bge.n	800b374 <sniprintf+0x20>
 800b362:	238b      	movs	r3, #139	@ 0x8b
 800b364:	f04f 30ff 	mov.w	r0, #4294967295
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	b01d      	add	sp, #116	@ 0x74
 800b36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b370:	b002      	add	sp, #8
 800b372:	4770      	bx	lr
 800b374:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b378:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b37c:	bf0c      	ite	eq
 800b37e:	4623      	moveq	r3, r4
 800b380:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b384:	9304      	str	r3, [sp, #16]
 800b386:	9307      	str	r3, [sp, #28]
 800b388:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b38c:	9002      	str	r0, [sp, #8]
 800b38e:	9006      	str	r0, [sp, #24]
 800b390:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b394:	4628      	mov	r0, r5
 800b396:	ab21      	add	r3, sp, #132	@ 0x84
 800b398:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b39a:	a902      	add	r1, sp, #8
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	f000 f993 	bl	800b6c8 <_svfiprintf_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	bfbc      	itt	lt
 800b3a6:	238b      	movlt	r3, #139	@ 0x8b
 800b3a8:	602b      	strlt	r3, [r5, #0]
 800b3aa:	2c00      	cmp	r4, #0
 800b3ac:	d0dd      	beq.n	800b36a <sniprintf+0x16>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	e7d9      	b.n	800b36a <sniprintf+0x16>
 800b3b6:	bf00      	nop
 800b3b8:	20000048 	.word	0x20000048

0800b3bc <memset>:
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4402      	add	r2, r0
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d100      	bne.n	800b3c6 <memset+0xa>
 800b3c4:	4770      	bx	lr
 800b3c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ca:	e7f9      	b.n	800b3c0 <memset+0x4>

0800b3cc <__errno>:
 800b3cc:	4b01      	ldr	r3, [pc, #4]	@ (800b3d4 <__errno+0x8>)
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	20000048 	.word	0x20000048

0800b3d8 <__libc_init_array>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	2600      	movs	r6, #0
 800b3dc:	4d0c      	ldr	r5, [pc, #48]	@ (800b410 <__libc_init_array+0x38>)
 800b3de:	4c0d      	ldr	r4, [pc, #52]	@ (800b414 <__libc_init_array+0x3c>)
 800b3e0:	1b64      	subs	r4, r4, r5
 800b3e2:	10a4      	asrs	r4, r4, #2
 800b3e4:	42a6      	cmp	r6, r4
 800b3e6:	d109      	bne.n	800b3fc <__libc_init_array+0x24>
 800b3e8:	f000 fc78 	bl	800bcdc <_init>
 800b3ec:	2600      	movs	r6, #0
 800b3ee:	4d0a      	ldr	r5, [pc, #40]	@ (800b418 <__libc_init_array+0x40>)
 800b3f0:	4c0a      	ldr	r4, [pc, #40]	@ (800b41c <__libc_init_array+0x44>)
 800b3f2:	1b64      	subs	r4, r4, r5
 800b3f4:	10a4      	asrs	r4, r4, #2
 800b3f6:	42a6      	cmp	r6, r4
 800b3f8:	d105      	bne.n	800b406 <__libc_init_array+0x2e>
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b400:	4798      	blx	r3
 800b402:	3601      	adds	r6, #1
 800b404:	e7ee      	b.n	800b3e4 <__libc_init_array+0xc>
 800b406:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40a:	4798      	blx	r3
 800b40c:	3601      	adds	r6, #1
 800b40e:	e7f2      	b.n	800b3f6 <__libc_init_array+0x1e>
 800b410:	0800c0a4 	.word	0x0800c0a4
 800b414:	0800c0a4 	.word	0x0800c0a4
 800b418:	0800c0a4 	.word	0x0800c0a4
 800b41c:	0800c0a8 	.word	0x0800c0a8

0800b420 <__retarget_lock_acquire_recursive>:
 800b420:	4770      	bx	lr

0800b422 <__retarget_lock_release_recursive>:
 800b422:	4770      	bx	lr

0800b424 <_free_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4605      	mov	r5, r0
 800b428:	2900      	cmp	r1, #0
 800b42a:	d040      	beq.n	800b4ae <_free_r+0x8a>
 800b42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b430:	1f0c      	subs	r4, r1, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	bfb8      	it	lt
 800b436:	18e4      	addlt	r4, r4, r3
 800b438:	f000 f8de 	bl	800b5f8 <__malloc_lock>
 800b43c:	4a1c      	ldr	r2, [pc, #112]	@ (800b4b0 <_free_r+0x8c>)
 800b43e:	6813      	ldr	r3, [r2, #0]
 800b440:	b933      	cbnz	r3, 800b450 <_free_r+0x2c>
 800b442:	6063      	str	r3, [r4, #4]
 800b444:	6014      	str	r4, [r2, #0]
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b44c:	f000 b8da 	b.w	800b604 <__malloc_unlock>
 800b450:	42a3      	cmp	r3, r4
 800b452:	d908      	bls.n	800b466 <_free_r+0x42>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	1821      	adds	r1, r4, r0
 800b458:	428b      	cmp	r3, r1
 800b45a:	bf01      	itttt	eq
 800b45c:	6819      	ldreq	r1, [r3, #0]
 800b45e:	685b      	ldreq	r3, [r3, #4]
 800b460:	1809      	addeq	r1, r1, r0
 800b462:	6021      	streq	r1, [r4, #0]
 800b464:	e7ed      	b.n	800b442 <_free_r+0x1e>
 800b466:	461a      	mov	r2, r3
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	b10b      	cbz	r3, 800b470 <_free_r+0x4c>
 800b46c:	42a3      	cmp	r3, r4
 800b46e:	d9fa      	bls.n	800b466 <_free_r+0x42>
 800b470:	6811      	ldr	r1, [r2, #0]
 800b472:	1850      	adds	r0, r2, r1
 800b474:	42a0      	cmp	r0, r4
 800b476:	d10b      	bne.n	800b490 <_free_r+0x6c>
 800b478:	6820      	ldr	r0, [r4, #0]
 800b47a:	4401      	add	r1, r0
 800b47c:	1850      	adds	r0, r2, r1
 800b47e:	4283      	cmp	r3, r0
 800b480:	6011      	str	r1, [r2, #0]
 800b482:	d1e0      	bne.n	800b446 <_free_r+0x22>
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4408      	add	r0, r1
 800b48a:	6010      	str	r0, [r2, #0]
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	e7da      	b.n	800b446 <_free_r+0x22>
 800b490:	d902      	bls.n	800b498 <_free_r+0x74>
 800b492:	230c      	movs	r3, #12
 800b494:	602b      	str	r3, [r5, #0]
 800b496:	e7d6      	b.n	800b446 <_free_r+0x22>
 800b498:	6820      	ldr	r0, [r4, #0]
 800b49a:	1821      	adds	r1, r4, r0
 800b49c:	428b      	cmp	r3, r1
 800b49e:	bf01      	itttt	eq
 800b4a0:	6819      	ldreq	r1, [r3, #0]
 800b4a2:	685b      	ldreq	r3, [r3, #4]
 800b4a4:	1809      	addeq	r1, r1, r0
 800b4a6:	6021      	streq	r1, [r4, #0]
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	6054      	str	r4, [r2, #4]
 800b4ac:	e7cb      	b.n	800b446 <_free_r+0x22>
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	200002d8 	.word	0x200002d8

0800b4b4 <sbrk_aligned>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	4e0f      	ldr	r6, [pc, #60]	@ (800b4f4 <sbrk_aligned+0x40>)
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	6831      	ldr	r1, [r6, #0]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	b911      	cbnz	r1, 800b4c6 <sbrk_aligned+0x12>
 800b4c0:	f000 fbaa 	bl	800bc18 <_sbrk_r>
 800b4c4:	6030      	str	r0, [r6, #0]
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f000 fba5 	bl	800bc18 <_sbrk_r>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d103      	bne.n	800b4da <sbrk_aligned+0x26>
 800b4d2:	f04f 34ff 	mov.w	r4, #4294967295
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	bd70      	pop	{r4, r5, r6, pc}
 800b4da:	1cc4      	adds	r4, r0, #3
 800b4dc:	f024 0403 	bic.w	r4, r4, #3
 800b4e0:	42a0      	cmp	r0, r4
 800b4e2:	d0f8      	beq.n	800b4d6 <sbrk_aligned+0x22>
 800b4e4:	1a21      	subs	r1, r4, r0
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 fb96 	bl	800bc18 <_sbrk_r>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d1f2      	bne.n	800b4d6 <sbrk_aligned+0x22>
 800b4f0:	e7ef      	b.n	800b4d2 <sbrk_aligned+0x1e>
 800b4f2:	bf00      	nop
 800b4f4:	200002d4 	.word	0x200002d4

0800b4f8 <_malloc_r>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	1ccd      	adds	r5, r1, #3
 800b4fe:	f025 0503 	bic.w	r5, r5, #3
 800b502:	3508      	adds	r5, #8
 800b504:	2d0c      	cmp	r5, #12
 800b506:	bf38      	it	cc
 800b508:	250c      	movcc	r5, #12
 800b50a:	2d00      	cmp	r5, #0
 800b50c:	4606      	mov	r6, r0
 800b50e:	db01      	blt.n	800b514 <_malloc_r+0x1c>
 800b510:	42a9      	cmp	r1, r5
 800b512:	d904      	bls.n	800b51e <_malloc_r+0x26>
 800b514:	230c      	movs	r3, #12
 800b516:	6033      	str	r3, [r6, #0]
 800b518:	2000      	movs	r0, #0
 800b51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5f4 <_malloc_r+0xfc>
 800b522:	f000 f869 	bl	800b5f8 <__malloc_lock>
 800b526:	f8d8 3000 	ldr.w	r3, [r8]
 800b52a:	461c      	mov	r4, r3
 800b52c:	bb44      	cbnz	r4, 800b580 <_malloc_r+0x88>
 800b52e:	4629      	mov	r1, r5
 800b530:	4630      	mov	r0, r6
 800b532:	f7ff ffbf 	bl	800b4b4 <sbrk_aligned>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	4604      	mov	r4, r0
 800b53a:	d158      	bne.n	800b5ee <_malloc_r+0xf6>
 800b53c:	f8d8 4000 	ldr.w	r4, [r8]
 800b540:	4627      	mov	r7, r4
 800b542:	2f00      	cmp	r7, #0
 800b544:	d143      	bne.n	800b5ce <_malloc_r+0xd6>
 800b546:	2c00      	cmp	r4, #0
 800b548:	d04b      	beq.n	800b5e2 <_malloc_r+0xea>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	4639      	mov	r1, r7
 800b54e:	4630      	mov	r0, r6
 800b550:	eb04 0903 	add.w	r9, r4, r3
 800b554:	f000 fb60 	bl	800bc18 <_sbrk_r>
 800b558:	4581      	cmp	r9, r0
 800b55a:	d142      	bne.n	800b5e2 <_malloc_r+0xea>
 800b55c:	6821      	ldr	r1, [r4, #0]
 800b55e:	4630      	mov	r0, r6
 800b560:	1a6d      	subs	r5, r5, r1
 800b562:	4629      	mov	r1, r5
 800b564:	f7ff ffa6 	bl	800b4b4 <sbrk_aligned>
 800b568:	3001      	adds	r0, #1
 800b56a:	d03a      	beq.n	800b5e2 <_malloc_r+0xea>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	442b      	add	r3, r5
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	f8d8 3000 	ldr.w	r3, [r8]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	bb62      	cbnz	r2, 800b5d4 <_malloc_r+0xdc>
 800b57a:	f8c8 7000 	str.w	r7, [r8]
 800b57e:	e00f      	b.n	800b5a0 <_malloc_r+0xa8>
 800b580:	6822      	ldr	r2, [r4, #0]
 800b582:	1b52      	subs	r2, r2, r5
 800b584:	d420      	bmi.n	800b5c8 <_malloc_r+0xd0>
 800b586:	2a0b      	cmp	r2, #11
 800b588:	d917      	bls.n	800b5ba <_malloc_r+0xc2>
 800b58a:	1961      	adds	r1, r4, r5
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	6025      	str	r5, [r4, #0]
 800b590:	bf18      	it	ne
 800b592:	6059      	strne	r1, [r3, #4]
 800b594:	6863      	ldr	r3, [r4, #4]
 800b596:	bf08      	it	eq
 800b598:	f8c8 1000 	streq.w	r1, [r8]
 800b59c:	5162      	str	r2, [r4, r5]
 800b59e:	604b      	str	r3, [r1, #4]
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f000 f82f 	bl	800b604 <__malloc_unlock>
 800b5a6:	f104 000b 	add.w	r0, r4, #11
 800b5aa:	1d23      	adds	r3, r4, #4
 800b5ac:	f020 0007 	bic.w	r0, r0, #7
 800b5b0:	1ac2      	subs	r2, r0, r3
 800b5b2:	bf1c      	itt	ne
 800b5b4:	1a1b      	subne	r3, r3, r0
 800b5b6:	50a3      	strne	r3, [r4, r2]
 800b5b8:	e7af      	b.n	800b51a <_malloc_r+0x22>
 800b5ba:	6862      	ldr	r2, [r4, #4]
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	bf0c      	ite	eq
 800b5c0:	f8c8 2000 	streq.w	r2, [r8]
 800b5c4:	605a      	strne	r2, [r3, #4]
 800b5c6:	e7eb      	b.n	800b5a0 <_malloc_r+0xa8>
 800b5c8:	4623      	mov	r3, r4
 800b5ca:	6864      	ldr	r4, [r4, #4]
 800b5cc:	e7ae      	b.n	800b52c <_malloc_r+0x34>
 800b5ce:	463c      	mov	r4, r7
 800b5d0:	687f      	ldr	r7, [r7, #4]
 800b5d2:	e7b6      	b.n	800b542 <_malloc_r+0x4a>
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d1fb      	bne.n	800b5d4 <_malloc_r+0xdc>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	6053      	str	r3, [r2, #4]
 800b5e0:	e7de      	b.n	800b5a0 <_malloc_r+0xa8>
 800b5e2:	230c      	movs	r3, #12
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	6033      	str	r3, [r6, #0]
 800b5e8:	f000 f80c 	bl	800b604 <__malloc_unlock>
 800b5ec:	e794      	b.n	800b518 <_malloc_r+0x20>
 800b5ee:	6005      	str	r5, [r0, #0]
 800b5f0:	e7d6      	b.n	800b5a0 <_malloc_r+0xa8>
 800b5f2:	bf00      	nop
 800b5f4:	200002d8 	.word	0x200002d8

0800b5f8 <__malloc_lock>:
 800b5f8:	4801      	ldr	r0, [pc, #4]	@ (800b600 <__malloc_lock+0x8>)
 800b5fa:	f7ff bf11 	b.w	800b420 <__retarget_lock_acquire_recursive>
 800b5fe:	bf00      	nop
 800b600:	200002d0 	.word	0x200002d0

0800b604 <__malloc_unlock>:
 800b604:	4801      	ldr	r0, [pc, #4]	@ (800b60c <__malloc_unlock+0x8>)
 800b606:	f7ff bf0c 	b.w	800b422 <__retarget_lock_release_recursive>
 800b60a:	bf00      	nop
 800b60c:	200002d0 	.word	0x200002d0

0800b610 <__ssputs_r>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	461f      	mov	r7, r3
 800b616:	688e      	ldr	r6, [r1, #8]
 800b618:	4682      	mov	sl, r0
 800b61a:	42be      	cmp	r6, r7
 800b61c:	460c      	mov	r4, r1
 800b61e:	4690      	mov	r8, r2
 800b620:	680b      	ldr	r3, [r1, #0]
 800b622:	d82d      	bhi.n	800b680 <__ssputs_r+0x70>
 800b624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b628:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b62c:	d026      	beq.n	800b67c <__ssputs_r+0x6c>
 800b62e:	6965      	ldr	r5, [r4, #20]
 800b630:	6909      	ldr	r1, [r1, #16]
 800b632:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b636:	eba3 0901 	sub.w	r9, r3, r1
 800b63a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b63e:	1c7b      	adds	r3, r7, #1
 800b640:	444b      	add	r3, r9
 800b642:	106d      	asrs	r5, r5, #1
 800b644:	429d      	cmp	r5, r3
 800b646:	bf38      	it	cc
 800b648:	461d      	movcc	r5, r3
 800b64a:	0553      	lsls	r3, r2, #21
 800b64c:	d527      	bpl.n	800b69e <__ssputs_r+0x8e>
 800b64e:	4629      	mov	r1, r5
 800b650:	f7ff ff52 	bl	800b4f8 <_malloc_r>
 800b654:	4606      	mov	r6, r0
 800b656:	b360      	cbz	r0, 800b6b2 <__ssputs_r+0xa2>
 800b658:	464a      	mov	r2, r9
 800b65a:	6921      	ldr	r1, [r4, #16]
 800b65c:	f000 fafa 	bl	800bc54 <memcpy>
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b66a:	81a3      	strh	r3, [r4, #12]
 800b66c:	6126      	str	r6, [r4, #16]
 800b66e:	444e      	add	r6, r9
 800b670:	6026      	str	r6, [r4, #0]
 800b672:	463e      	mov	r6, r7
 800b674:	6165      	str	r5, [r4, #20]
 800b676:	eba5 0509 	sub.w	r5, r5, r9
 800b67a:	60a5      	str	r5, [r4, #8]
 800b67c:	42be      	cmp	r6, r7
 800b67e:	d900      	bls.n	800b682 <__ssputs_r+0x72>
 800b680:	463e      	mov	r6, r7
 800b682:	4632      	mov	r2, r6
 800b684:	4641      	mov	r1, r8
 800b686:	6820      	ldr	r0, [r4, #0]
 800b688:	f000 faac 	bl	800bbe4 <memmove>
 800b68c:	2000      	movs	r0, #0
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	1b9b      	subs	r3, r3, r6
 800b692:	60a3      	str	r3, [r4, #8]
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	4433      	add	r3, r6
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69e:	462a      	mov	r2, r5
 800b6a0:	f000 fae6 	bl	800bc70 <_realloc_r>
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d1e0      	bne.n	800b66c <__ssputs_r+0x5c>
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	6921      	ldr	r1, [r4, #16]
 800b6ae:	f7ff feb9 	bl	800b424 <_free_r>
 800b6b2:	230c      	movs	r3, #12
 800b6b4:	f8ca 3000 	str.w	r3, [sl]
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c2:	81a3      	strh	r3, [r4, #12]
 800b6c4:	e7e9      	b.n	800b69a <__ssputs_r+0x8a>
	...

0800b6c8 <_svfiprintf_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	4698      	mov	r8, r3
 800b6ce:	898b      	ldrh	r3, [r1, #12]
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	061b      	lsls	r3, r3, #24
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	b09d      	sub	sp, #116	@ 0x74
 800b6da:	d510      	bpl.n	800b6fe <_svfiprintf_r+0x36>
 800b6dc:	690b      	ldr	r3, [r1, #16]
 800b6de:	b973      	cbnz	r3, 800b6fe <_svfiprintf_r+0x36>
 800b6e0:	2140      	movs	r1, #64	@ 0x40
 800b6e2:	f7ff ff09 	bl	800b4f8 <_malloc_r>
 800b6e6:	6028      	str	r0, [r5, #0]
 800b6e8:	6128      	str	r0, [r5, #16]
 800b6ea:	b930      	cbnz	r0, 800b6fa <_svfiprintf_r+0x32>
 800b6ec:	230c      	movs	r3, #12
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	b01d      	add	sp, #116	@ 0x74
 800b6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fa:	2340      	movs	r3, #64	@ 0x40
 800b6fc:	616b      	str	r3, [r5, #20]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9309      	str	r3, [sp, #36]	@ 0x24
 800b702:	2320      	movs	r3, #32
 800b704:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b708:	2330      	movs	r3, #48	@ 0x30
 800b70a:	f04f 0901 	mov.w	r9, #1
 800b70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b712:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b8ac <_svfiprintf_r+0x1e4>
 800b716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b71a:	4623      	mov	r3, r4
 800b71c:	469a      	mov	sl, r3
 800b71e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b722:	b10a      	cbz	r2, 800b728 <_svfiprintf_r+0x60>
 800b724:	2a25      	cmp	r2, #37	@ 0x25
 800b726:	d1f9      	bne.n	800b71c <_svfiprintf_r+0x54>
 800b728:	ebba 0b04 	subs.w	fp, sl, r4
 800b72c:	d00b      	beq.n	800b746 <_svfiprintf_r+0x7e>
 800b72e:	465b      	mov	r3, fp
 800b730:	4622      	mov	r2, r4
 800b732:	4629      	mov	r1, r5
 800b734:	4638      	mov	r0, r7
 800b736:	f7ff ff6b 	bl	800b610 <__ssputs_r>
 800b73a:	3001      	adds	r0, #1
 800b73c:	f000 80a7 	beq.w	800b88e <_svfiprintf_r+0x1c6>
 800b740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b742:	445a      	add	r2, fp
 800b744:	9209      	str	r2, [sp, #36]	@ 0x24
 800b746:	f89a 3000 	ldrb.w	r3, [sl]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 809f 	beq.w	800b88e <_svfiprintf_r+0x1c6>
 800b750:	2300      	movs	r3, #0
 800b752:	f04f 32ff 	mov.w	r2, #4294967295
 800b756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b75a:	f10a 0a01 	add.w	sl, sl, #1
 800b75e:	9304      	str	r3, [sp, #16]
 800b760:	9307      	str	r3, [sp, #28]
 800b762:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b766:	931a      	str	r3, [sp, #104]	@ 0x68
 800b768:	4654      	mov	r4, sl
 800b76a:	2205      	movs	r2, #5
 800b76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b770:	484e      	ldr	r0, [pc, #312]	@ (800b8ac <_svfiprintf_r+0x1e4>)
 800b772:	f000 fa61 	bl	800bc38 <memchr>
 800b776:	9a04      	ldr	r2, [sp, #16]
 800b778:	b9d8      	cbnz	r0, 800b7b2 <_svfiprintf_r+0xea>
 800b77a:	06d0      	lsls	r0, r2, #27
 800b77c:	bf44      	itt	mi
 800b77e:	2320      	movmi	r3, #32
 800b780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b784:	0711      	lsls	r1, r2, #28
 800b786:	bf44      	itt	mi
 800b788:	232b      	movmi	r3, #43	@ 0x2b
 800b78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b78e:	f89a 3000 	ldrb.w	r3, [sl]
 800b792:	2b2a      	cmp	r3, #42	@ 0x2a
 800b794:	d015      	beq.n	800b7c2 <_svfiprintf_r+0xfa>
 800b796:	4654      	mov	r4, sl
 800b798:	2000      	movs	r0, #0
 800b79a:	f04f 0c0a 	mov.w	ip, #10
 800b79e:	9a07      	ldr	r2, [sp, #28]
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a6:	3b30      	subs	r3, #48	@ 0x30
 800b7a8:	2b09      	cmp	r3, #9
 800b7aa:	d94b      	bls.n	800b844 <_svfiprintf_r+0x17c>
 800b7ac:	b1b0      	cbz	r0, 800b7dc <_svfiprintf_r+0x114>
 800b7ae:	9207      	str	r2, [sp, #28]
 800b7b0:	e014      	b.n	800b7dc <_svfiprintf_r+0x114>
 800b7b2:	eba0 0308 	sub.w	r3, r0, r8
 800b7b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	46a2      	mov	sl, r4
 800b7be:	9304      	str	r3, [sp, #16]
 800b7c0:	e7d2      	b.n	800b768 <_svfiprintf_r+0xa0>
 800b7c2:	9b03      	ldr	r3, [sp, #12]
 800b7c4:	1d19      	adds	r1, r3, #4
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	9103      	str	r1, [sp, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bfbb      	ittet	lt
 800b7ce:	425b      	neglt	r3, r3
 800b7d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7d4:	9307      	strge	r3, [sp, #28]
 800b7d6:	9307      	strlt	r3, [sp, #28]
 800b7d8:	bfb8      	it	lt
 800b7da:	9204      	strlt	r2, [sp, #16]
 800b7dc:	7823      	ldrb	r3, [r4, #0]
 800b7de:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7e0:	d10a      	bne.n	800b7f8 <_svfiprintf_r+0x130>
 800b7e2:	7863      	ldrb	r3, [r4, #1]
 800b7e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7e6:	d132      	bne.n	800b84e <_svfiprintf_r+0x186>
 800b7e8:	9b03      	ldr	r3, [sp, #12]
 800b7ea:	3402      	adds	r4, #2
 800b7ec:	1d1a      	adds	r2, r3, #4
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	9203      	str	r2, [sp, #12]
 800b7f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b8b0 <_svfiprintf_r+0x1e8>
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	4650      	mov	r0, sl
 800b800:	7821      	ldrb	r1, [r4, #0]
 800b802:	f000 fa19 	bl	800bc38 <memchr>
 800b806:	b138      	cbz	r0, 800b818 <_svfiprintf_r+0x150>
 800b808:	2240      	movs	r2, #64	@ 0x40
 800b80a:	9b04      	ldr	r3, [sp, #16]
 800b80c:	eba0 000a 	sub.w	r0, r0, sl
 800b810:	4082      	lsls	r2, r0
 800b812:	4313      	orrs	r3, r2
 800b814:	3401      	adds	r4, #1
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81c:	2206      	movs	r2, #6
 800b81e:	4825      	ldr	r0, [pc, #148]	@ (800b8b4 <_svfiprintf_r+0x1ec>)
 800b820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b824:	f000 fa08 	bl	800bc38 <memchr>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d036      	beq.n	800b89a <_svfiprintf_r+0x1d2>
 800b82c:	4b22      	ldr	r3, [pc, #136]	@ (800b8b8 <_svfiprintf_r+0x1f0>)
 800b82e:	bb1b      	cbnz	r3, 800b878 <_svfiprintf_r+0x1b0>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	3307      	adds	r3, #7
 800b834:	f023 0307 	bic.w	r3, r3, #7
 800b838:	3308      	adds	r3, #8
 800b83a:	9303      	str	r3, [sp, #12]
 800b83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83e:	4433      	add	r3, r6
 800b840:	9309      	str	r3, [sp, #36]	@ 0x24
 800b842:	e76a      	b.n	800b71a <_svfiprintf_r+0x52>
 800b844:	460c      	mov	r4, r1
 800b846:	2001      	movs	r0, #1
 800b848:	fb0c 3202 	mla	r2, ip, r2, r3
 800b84c:	e7a8      	b.n	800b7a0 <_svfiprintf_r+0xd8>
 800b84e:	2300      	movs	r3, #0
 800b850:	f04f 0c0a 	mov.w	ip, #10
 800b854:	4619      	mov	r1, r3
 800b856:	3401      	adds	r4, #1
 800b858:	9305      	str	r3, [sp, #20]
 800b85a:	4620      	mov	r0, r4
 800b85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b860:	3a30      	subs	r2, #48	@ 0x30
 800b862:	2a09      	cmp	r2, #9
 800b864:	d903      	bls.n	800b86e <_svfiprintf_r+0x1a6>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0c6      	beq.n	800b7f8 <_svfiprintf_r+0x130>
 800b86a:	9105      	str	r1, [sp, #20]
 800b86c:	e7c4      	b.n	800b7f8 <_svfiprintf_r+0x130>
 800b86e:	4604      	mov	r4, r0
 800b870:	2301      	movs	r3, #1
 800b872:	fb0c 2101 	mla	r1, ip, r1, r2
 800b876:	e7f0      	b.n	800b85a <_svfiprintf_r+0x192>
 800b878:	ab03      	add	r3, sp, #12
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	462a      	mov	r2, r5
 800b87e:	4638      	mov	r0, r7
 800b880:	4b0e      	ldr	r3, [pc, #56]	@ (800b8bc <_svfiprintf_r+0x1f4>)
 800b882:	a904      	add	r1, sp, #16
 800b884:	f3af 8000 	nop.w
 800b888:	1c42      	adds	r2, r0, #1
 800b88a:	4606      	mov	r6, r0
 800b88c:	d1d6      	bne.n	800b83c <_svfiprintf_r+0x174>
 800b88e:	89ab      	ldrh	r3, [r5, #12]
 800b890:	065b      	lsls	r3, r3, #25
 800b892:	f53f af2d 	bmi.w	800b6f0 <_svfiprintf_r+0x28>
 800b896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b898:	e72c      	b.n	800b6f4 <_svfiprintf_r+0x2c>
 800b89a:	ab03      	add	r3, sp, #12
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	462a      	mov	r2, r5
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	4b06      	ldr	r3, [pc, #24]	@ (800b8bc <_svfiprintf_r+0x1f4>)
 800b8a4:	a904      	add	r1, sp, #16
 800b8a6:	f000 f87d 	bl	800b9a4 <_printf_i>
 800b8aa:	e7ed      	b.n	800b888 <_svfiprintf_r+0x1c0>
 800b8ac:	0800c067 	.word	0x0800c067
 800b8b0:	0800c06d 	.word	0x0800c06d
 800b8b4:	0800c071 	.word	0x0800c071
 800b8b8:	00000000 	.word	0x00000000
 800b8bc:	0800b611 	.word	0x0800b611

0800b8c0 <_printf_common>:
 800b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	4698      	mov	r8, r3
 800b8c8:	688a      	ldr	r2, [r1, #8]
 800b8ca:	690b      	ldr	r3, [r1, #16]
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	bfb8      	it	lt
 800b8d2:	4613      	movlt	r3, r2
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8da:	460c      	mov	r4, r1
 800b8dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8e0:	b10a      	cbz	r2, 800b8e6 <_printf_common+0x26>
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	6033      	str	r3, [r6, #0]
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	0699      	lsls	r1, r3, #26
 800b8ea:	bf42      	ittt	mi
 800b8ec:	6833      	ldrmi	r3, [r6, #0]
 800b8ee:	3302      	addmi	r3, #2
 800b8f0:	6033      	strmi	r3, [r6, #0]
 800b8f2:	6825      	ldr	r5, [r4, #0]
 800b8f4:	f015 0506 	ands.w	r5, r5, #6
 800b8f8:	d106      	bne.n	800b908 <_printf_common+0x48>
 800b8fa:	f104 0a19 	add.w	sl, r4, #25
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	6832      	ldr	r2, [r6, #0]
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	42ab      	cmp	r3, r5
 800b906:	dc2b      	bgt.n	800b960 <_printf_common+0xa0>
 800b908:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b90c:	6822      	ldr	r2, [r4, #0]
 800b90e:	3b00      	subs	r3, #0
 800b910:	bf18      	it	ne
 800b912:	2301      	movne	r3, #1
 800b914:	0692      	lsls	r2, r2, #26
 800b916:	d430      	bmi.n	800b97a <_printf_common+0xba>
 800b918:	4641      	mov	r1, r8
 800b91a:	4638      	mov	r0, r7
 800b91c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b920:	47c8      	blx	r9
 800b922:	3001      	adds	r0, #1
 800b924:	d023      	beq.n	800b96e <_printf_common+0xae>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	6922      	ldr	r2, [r4, #16]
 800b92a:	f003 0306 	and.w	r3, r3, #6
 800b92e:	2b04      	cmp	r3, #4
 800b930:	bf14      	ite	ne
 800b932:	2500      	movne	r5, #0
 800b934:	6833      	ldreq	r3, [r6, #0]
 800b936:	f04f 0600 	mov.w	r6, #0
 800b93a:	bf08      	it	eq
 800b93c:	68e5      	ldreq	r5, [r4, #12]
 800b93e:	f104 041a 	add.w	r4, r4, #26
 800b942:	bf08      	it	eq
 800b944:	1aed      	subeq	r5, r5, r3
 800b946:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b94a:	bf08      	it	eq
 800b94c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b950:	4293      	cmp	r3, r2
 800b952:	bfc4      	itt	gt
 800b954:	1a9b      	subgt	r3, r3, r2
 800b956:	18ed      	addgt	r5, r5, r3
 800b958:	42b5      	cmp	r5, r6
 800b95a:	d11a      	bne.n	800b992 <_printf_common+0xd2>
 800b95c:	2000      	movs	r0, #0
 800b95e:	e008      	b.n	800b972 <_printf_common+0xb2>
 800b960:	2301      	movs	r3, #1
 800b962:	4652      	mov	r2, sl
 800b964:	4641      	mov	r1, r8
 800b966:	4638      	mov	r0, r7
 800b968:	47c8      	blx	r9
 800b96a:	3001      	adds	r0, #1
 800b96c:	d103      	bne.n	800b976 <_printf_common+0xb6>
 800b96e:	f04f 30ff 	mov.w	r0, #4294967295
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b976:	3501      	adds	r5, #1
 800b978:	e7c1      	b.n	800b8fe <_printf_common+0x3e>
 800b97a:	2030      	movs	r0, #48	@ 0x30
 800b97c:	18e1      	adds	r1, r4, r3
 800b97e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b988:	4422      	add	r2, r4
 800b98a:	3302      	adds	r3, #2
 800b98c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b990:	e7c2      	b.n	800b918 <_printf_common+0x58>
 800b992:	2301      	movs	r3, #1
 800b994:	4622      	mov	r2, r4
 800b996:	4641      	mov	r1, r8
 800b998:	4638      	mov	r0, r7
 800b99a:	47c8      	blx	r9
 800b99c:	3001      	adds	r0, #1
 800b99e:	d0e6      	beq.n	800b96e <_printf_common+0xae>
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	e7d9      	b.n	800b958 <_printf_common+0x98>

0800b9a4 <_printf_i>:
 800b9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a8:	7e0f      	ldrb	r7, [r1, #24]
 800b9aa:	4691      	mov	r9, r2
 800b9ac:	2f78      	cmp	r7, #120	@ 0x78
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	469a      	mov	sl, r3
 800b9b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b9b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9ba:	d807      	bhi.n	800b9cc <_printf_i+0x28>
 800b9bc:	2f62      	cmp	r7, #98	@ 0x62
 800b9be:	d80a      	bhi.n	800b9d6 <_printf_i+0x32>
 800b9c0:	2f00      	cmp	r7, #0
 800b9c2:	f000 80d3 	beq.w	800bb6c <_printf_i+0x1c8>
 800b9c6:	2f58      	cmp	r7, #88	@ 0x58
 800b9c8:	f000 80ba 	beq.w	800bb40 <_printf_i+0x19c>
 800b9cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9d4:	e03a      	b.n	800ba4c <_printf_i+0xa8>
 800b9d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9da:	2b15      	cmp	r3, #21
 800b9dc:	d8f6      	bhi.n	800b9cc <_printf_i+0x28>
 800b9de:	a101      	add	r1, pc, #4	@ (adr r1, 800b9e4 <_printf_i+0x40>)
 800b9e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9e4:	0800ba3d 	.word	0x0800ba3d
 800b9e8:	0800ba51 	.word	0x0800ba51
 800b9ec:	0800b9cd 	.word	0x0800b9cd
 800b9f0:	0800b9cd 	.word	0x0800b9cd
 800b9f4:	0800b9cd 	.word	0x0800b9cd
 800b9f8:	0800b9cd 	.word	0x0800b9cd
 800b9fc:	0800ba51 	.word	0x0800ba51
 800ba00:	0800b9cd 	.word	0x0800b9cd
 800ba04:	0800b9cd 	.word	0x0800b9cd
 800ba08:	0800b9cd 	.word	0x0800b9cd
 800ba0c:	0800b9cd 	.word	0x0800b9cd
 800ba10:	0800bb53 	.word	0x0800bb53
 800ba14:	0800ba7b 	.word	0x0800ba7b
 800ba18:	0800bb0d 	.word	0x0800bb0d
 800ba1c:	0800b9cd 	.word	0x0800b9cd
 800ba20:	0800b9cd 	.word	0x0800b9cd
 800ba24:	0800bb75 	.word	0x0800bb75
 800ba28:	0800b9cd 	.word	0x0800b9cd
 800ba2c:	0800ba7b 	.word	0x0800ba7b
 800ba30:	0800b9cd 	.word	0x0800b9cd
 800ba34:	0800b9cd 	.word	0x0800b9cd
 800ba38:	0800bb15 	.word	0x0800bb15
 800ba3c:	6833      	ldr	r3, [r6, #0]
 800ba3e:	1d1a      	adds	r2, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6032      	str	r2, [r6, #0]
 800ba44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e09e      	b.n	800bb8e <_printf_i+0x1ea>
 800ba50:	6833      	ldr	r3, [r6, #0]
 800ba52:	6820      	ldr	r0, [r4, #0]
 800ba54:	1d19      	adds	r1, r3, #4
 800ba56:	6031      	str	r1, [r6, #0]
 800ba58:	0606      	lsls	r6, r0, #24
 800ba5a:	d501      	bpl.n	800ba60 <_printf_i+0xbc>
 800ba5c:	681d      	ldr	r5, [r3, #0]
 800ba5e:	e003      	b.n	800ba68 <_printf_i+0xc4>
 800ba60:	0645      	lsls	r5, r0, #25
 800ba62:	d5fb      	bpl.n	800ba5c <_printf_i+0xb8>
 800ba64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	da03      	bge.n	800ba74 <_printf_i+0xd0>
 800ba6c:	232d      	movs	r3, #45	@ 0x2d
 800ba6e:	426d      	negs	r5, r5
 800ba70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba74:	230a      	movs	r3, #10
 800ba76:	4859      	ldr	r0, [pc, #356]	@ (800bbdc <_printf_i+0x238>)
 800ba78:	e011      	b.n	800ba9e <_printf_i+0xfa>
 800ba7a:	6821      	ldr	r1, [r4, #0]
 800ba7c:	6833      	ldr	r3, [r6, #0]
 800ba7e:	0608      	lsls	r0, r1, #24
 800ba80:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba84:	d402      	bmi.n	800ba8c <_printf_i+0xe8>
 800ba86:	0649      	lsls	r1, r1, #25
 800ba88:	bf48      	it	mi
 800ba8a:	b2ad      	uxthmi	r5, r5
 800ba8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba8e:	6033      	str	r3, [r6, #0]
 800ba90:	bf14      	ite	ne
 800ba92:	230a      	movne	r3, #10
 800ba94:	2308      	moveq	r3, #8
 800ba96:	4851      	ldr	r0, [pc, #324]	@ (800bbdc <_printf_i+0x238>)
 800ba98:	2100      	movs	r1, #0
 800ba9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba9e:	6866      	ldr	r6, [r4, #4]
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	bfa8      	it	ge
 800baa4:	6821      	ldrge	r1, [r4, #0]
 800baa6:	60a6      	str	r6, [r4, #8]
 800baa8:	bfa4      	itt	ge
 800baaa:	f021 0104 	bicge.w	r1, r1, #4
 800baae:	6021      	strge	r1, [r4, #0]
 800bab0:	b90d      	cbnz	r5, 800bab6 <_printf_i+0x112>
 800bab2:	2e00      	cmp	r6, #0
 800bab4:	d04b      	beq.n	800bb4e <_printf_i+0x1aa>
 800bab6:	4616      	mov	r6, r2
 800bab8:	fbb5 f1f3 	udiv	r1, r5, r3
 800babc:	fb03 5711 	mls	r7, r3, r1, r5
 800bac0:	5dc7      	ldrb	r7, [r0, r7]
 800bac2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bac6:	462f      	mov	r7, r5
 800bac8:	42bb      	cmp	r3, r7
 800baca:	460d      	mov	r5, r1
 800bacc:	d9f4      	bls.n	800bab8 <_printf_i+0x114>
 800bace:	2b08      	cmp	r3, #8
 800bad0:	d10b      	bne.n	800baea <_printf_i+0x146>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	07df      	lsls	r7, r3, #31
 800bad6:	d508      	bpl.n	800baea <_printf_i+0x146>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	6861      	ldr	r1, [r4, #4]
 800badc:	4299      	cmp	r1, r3
 800bade:	bfde      	ittt	le
 800bae0:	2330      	movle	r3, #48	@ 0x30
 800bae2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bae6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800baea:	1b92      	subs	r2, r2, r6
 800baec:	6122      	str	r2, [r4, #16]
 800baee:	464b      	mov	r3, r9
 800baf0:	4621      	mov	r1, r4
 800baf2:	4640      	mov	r0, r8
 800baf4:	f8cd a000 	str.w	sl, [sp]
 800baf8:	aa03      	add	r2, sp, #12
 800bafa:	f7ff fee1 	bl	800b8c0 <_printf_common>
 800bafe:	3001      	adds	r0, #1
 800bb00:	d14a      	bne.n	800bb98 <_printf_i+0x1f4>
 800bb02:	f04f 30ff 	mov.w	r0, #4294967295
 800bb06:	b004      	add	sp, #16
 800bb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	f043 0320 	orr.w	r3, r3, #32
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	2778      	movs	r7, #120	@ 0x78
 800bb16:	4832      	ldr	r0, [pc, #200]	@ (800bbe0 <_printf_i+0x23c>)
 800bb18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	6831      	ldr	r1, [r6, #0]
 800bb20:	061f      	lsls	r7, r3, #24
 800bb22:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb26:	d402      	bmi.n	800bb2e <_printf_i+0x18a>
 800bb28:	065f      	lsls	r7, r3, #25
 800bb2a:	bf48      	it	mi
 800bb2c:	b2ad      	uxthmi	r5, r5
 800bb2e:	6031      	str	r1, [r6, #0]
 800bb30:	07d9      	lsls	r1, r3, #31
 800bb32:	bf44      	itt	mi
 800bb34:	f043 0320 	orrmi.w	r3, r3, #32
 800bb38:	6023      	strmi	r3, [r4, #0]
 800bb3a:	b11d      	cbz	r5, 800bb44 <_printf_i+0x1a0>
 800bb3c:	2310      	movs	r3, #16
 800bb3e:	e7ab      	b.n	800ba98 <_printf_i+0xf4>
 800bb40:	4826      	ldr	r0, [pc, #152]	@ (800bbdc <_printf_i+0x238>)
 800bb42:	e7e9      	b.n	800bb18 <_printf_i+0x174>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	f023 0320 	bic.w	r3, r3, #32
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	e7f6      	b.n	800bb3c <_printf_i+0x198>
 800bb4e:	4616      	mov	r6, r2
 800bb50:	e7bd      	b.n	800bace <_printf_i+0x12a>
 800bb52:	6833      	ldr	r3, [r6, #0]
 800bb54:	6825      	ldr	r5, [r4, #0]
 800bb56:	1d18      	adds	r0, r3, #4
 800bb58:	6961      	ldr	r1, [r4, #20]
 800bb5a:	6030      	str	r0, [r6, #0]
 800bb5c:	062e      	lsls	r6, r5, #24
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	d501      	bpl.n	800bb66 <_printf_i+0x1c2>
 800bb62:	6019      	str	r1, [r3, #0]
 800bb64:	e002      	b.n	800bb6c <_printf_i+0x1c8>
 800bb66:	0668      	lsls	r0, r5, #25
 800bb68:	d5fb      	bpl.n	800bb62 <_printf_i+0x1be>
 800bb6a:	8019      	strh	r1, [r3, #0]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4616      	mov	r6, r2
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	e7bc      	b.n	800baee <_printf_i+0x14a>
 800bb74:	6833      	ldr	r3, [r6, #0]
 800bb76:	2100      	movs	r1, #0
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	6032      	str	r2, [r6, #0]
 800bb7c:	681e      	ldr	r6, [r3, #0]
 800bb7e:	6862      	ldr	r2, [r4, #4]
 800bb80:	4630      	mov	r0, r6
 800bb82:	f000 f859 	bl	800bc38 <memchr>
 800bb86:	b108      	cbz	r0, 800bb8c <_printf_i+0x1e8>
 800bb88:	1b80      	subs	r0, r0, r6
 800bb8a:	6060      	str	r0, [r4, #4]
 800bb8c:	6863      	ldr	r3, [r4, #4]
 800bb8e:	6123      	str	r3, [r4, #16]
 800bb90:	2300      	movs	r3, #0
 800bb92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb96:	e7aa      	b.n	800baee <_printf_i+0x14a>
 800bb98:	4632      	mov	r2, r6
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	47d0      	blx	sl
 800bba2:	3001      	adds	r0, #1
 800bba4:	d0ad      	beq.n	800bb02 <_printf_i+0x15e>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	079b      	lsls	r3, r3, #30
 800bbaa:	d413      	bmi.n	800bbd4 <_printf_i+0x230>
 800bbac:	68e0      	ldr	r0, [r4, #12]
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	4298      	cmp	r0, r3
 800bbb2:	bfb8      	it	lt
 800bbb4:	4618      	movlt	r0, r3
 800bbb6:	e7a6      	b.n	800bb06 <_printf_i+0x162>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	4632      	mov	r2, r6
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	4640      	mov	r0, r8
 800bbc0:	47d0      	blx	sl
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	d09d      	beq.n	800bb02 <_printf_i+0x15e>
 800bbc6:	3501      	adds	r5, #1
 800bbc8:	68e3      	ldr	r3, [r4, #12]
 800bbca:	9903      	ldr	r1, [sp, #12]
 800bbcc:	1a5b      	subs	r3, r3, r1
 800bbce:	42ab      	cmp	r3, r5
 800bbd0:	dcf2      	bgt.n	800bbb8 <_printf_i+0x214>
 800bbd2:	e7eb      	b.n	800bbac <_printf_i+0x208>
 800bbd4:	2500      	movs	r5, #0
 800bbd6:	f104 0619 	add.w	r6, r4, #25
 800bbda:	e7f5      	b.n	800bbc8 <_printf_i+0x224>
 800bbdc:	0800c078 	.word	0x0800c078
 800bbe0:	0800c089 	.word	0x0800c089

0800bbe4 <memmove>:
 800bbe4:	4288      	cmp	r0, r1
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	eb01 0402 	add.w	r4, r1, r2
 800bbec:	d902      	bls.n	800bbf4 <memmove+0x10>
 800bbee:	4284      	cmp	r4, r0
 800bbf0:	4623      	mov	r3, r4
 800bbf2:	d807      	bhi.n	800bc04 <memmove+0x20>
 800bbf4:	1e43      	subs	r3, r0, #1
 800bbf6:	42a1      	cmp	r1, r4
 800bbf8:	d008      	beq.n	800bc0c <memmove+0x28>
 800bbfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc02:	e7f8      	b.n	800bbf6 <memmove+0x12>
 800bc04:	4601      	mov	r1, r0
 800bc06:	4402      	add	r2, r0
 800bc08:	428a      	cmp	r2, r1
 800bc0a:	d100      	bne.n	800bc0e <memmove+0x2a>
 800bc0c:	bd10      	pop	{r4, pc}
 800bc0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc16:	e7f7      	b.n	800bc08 <memmove+0x24>

0800bc18 <_sbrk_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4d05      	ldr	r5, [pc, #20]	@ (800bc34 <_sbrk_r+0x1c>)
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	f7fb fc30 	bl	8007488 <_sbrk>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_sbrk_r+0x1a>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_sbrk_r+0x1a>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	200002cc 	.word	0x200002cc

0800bc38 <memchr>:
 800bc38:	4603      	mov	r3, r0
 800bc3a:	b510      	push	{r4, lr}
 800bc3c:	b2c9      	uxtb	r1, r1
 800bc3e:	4402      	add	r2, r0
 800bc40:	4293      	cmp	r3, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	d101      	bne.n	800bc4a <memchr+0x12>
 800bc46:	2000      	movs	r0, #0
 800bc48:	e003      	b.n	800bc52 <memchr+0x1a>
 800bc4a:	7804      	ldrb	r4, [r0, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	428c      	cmp	r4, r1
 800bc50:	d1f6      	bne.n	800bc40 <memchr+0x8>
 800bc52:	bd10      	pop	{r4, pc}

0800bc54 <memcpy>:
 800bc54:	440a      	add	r2, r1
 800bc56:	4291      	cmp	r1, r2
 800bc58:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc5c:	d100      	bne.n	800bc60 <memcpy+0xc>
 800bc5e:	4770      	bx	lr
 800bc60:	b510      	push	{r4, lr}
 800bc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc66:	4291      	cmp	r1, r2
 800bc68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc6c:	d1f9      	bne.n	800bc62 <memcpy+0xe>
 800bc6e:	bd10      	pop	{r4, pc}

0800bc70 <_realloc_r>:
 800bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc74:	4680      	mov	r8, r0
 800bc76:	4615      	mov	r5, r2
 800bc78:	460c      	mov	r4, r1
 800bc7a:	b921      	cbnz	r1, 800bc86 <_realloc_r+0x16>
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	f7ff bc39 	b.w	800b4f8 <_malloc_r>
 800bc86:	b92a      	cbnz	r2, 800bc94 <_realloc_r+0x24>
 800bc88:	f7ff fbcc 	bl	800b424 <_free_r>
 800bc8c:	2400      	movs	r4, #0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc94:	f000 f81a 	bl	800bccc <_malloc_usable_size_r>
 800bc98:	4285      	cmp	r5, r0
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	d802      	bhi.n	800bca4 <_realloc_r+0x34>
 800bc9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bca2:	d8f4      	bhi.n	800bc8e <_realloc_r+0x1e>
 800bca4:	4629      	mov	r1, r5
 800bca6:	4640      	mov	r0, r8
 800bca8:	f7ff fc26 	bl	800b4f8 <_malloc_r>
 800bcac:	4607      	mov	r7, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d0ec      	beq.n	800bc8c <_realloc_r+0x1c>
 800bcb2:	42b5      	cmp	r5, r6
 800bcb4:	462a      	mov	r2, r5
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	bf28      	it	cs
 800bcba:	4632      	movcs	r2, r6
 800bcbc:	f7ff ffca 	bl	800bc54 <memcpy>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	f7ff fbae 	bl	800b424 <_free_r>
 800bcc8:	463c      	mov	r4, r7
 800bcca:	e7e0      	b.n	800bc8e <_realloc_r+0x1e>

0800bccc <_malloc_usable_size_r>:
 800bccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd0:	1f18      	subs	r0, r3, #4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	bfbc      	itt	lt
 800bcd6:	580b      	ldrlt	r3, [r1, r0]
 800bcd8:	18c0      	addlt	r0, r0, r3
 800bcda:	4770      	bx	lr

0800bcdc <_init>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	bf00      	nop
 800bce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce2:	bc08      	pop	{r3}
 800bce4:	469e      	mov	lr, r3
 800bce6:	4770      	bx	lr

0800bce8 <_fini>:
 800bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcea:	bf00      	nop
 800bcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcee:	bc08      	pop	{r3}
 800bcf0:	469e      	mov	lr, r3
 800bcf2:	4770      	bx	lr
